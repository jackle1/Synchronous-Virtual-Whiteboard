
camera_sys.elf:     file format elf32-littlenios2
camera_sys.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00080020

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x00000464 memsz 0x00000464 flags r-x
    LOAD off    0x00001484 vaddr 0x00080484 paddr 0x00080488 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x0000148c vaddr 0x0008048c paddr 0x0008048c align 2**12
         filesz 0x00000000 memsz 0x0000e11c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00080020  00080020  00001488  2**0
                  CONTENTS
  2 .text         0000044c  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000018  0008046c  0008046c  0000146c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000004  00080484  00080488  00001484  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000e1a2  0008048c  0008048c  0000148c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  0008e5a8  0008e5a8  00001488  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001488  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000168  00000000  00000000  000014b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00000cc5  00000000  00000000  00001618  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000006fe  00000000  00000000  000022dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000006a6  00000000  00000000  000029db  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000001d0  00000000  00000000  00003084  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000575  00000000  00000000  00003254  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000002dd  00000000  00000000  000037c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00003aa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000090  00000000  00000000  00003ab8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00004942  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00004945  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00004951  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00004952  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00004953  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0000495e  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00004969  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000d  00000000  00000000  00004974  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000004e  00000000  00000000  00004981  2**0
                  CONTENTS, READONLY
 26 .jdi          000056f0  00000000  00000000  000049cf  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000392c0  00000000  00000000  0000a0bf  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
00080020 l    d  .text	00000000 .text
0008046c l    d  .rodata	00000000 .rodata
00080484 l    d  .rwdata	00000000 .rwdata
0008048c l    d  .bss	00000000 .bss
0008e5a8 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../camera_sys_bsp//obj/HAL/src/crt0.o
00080058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 camera_pix_xfer.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00080220 g     F .text	0000002c alt_main
00080488 g       *ABS*	00000000 __flash_rwdata_start
000804a8 g     O .bss	0000e100 pixels
00080464 g     F .text	00000008 altera_nios2_gen2_irq_init
00080000 g     F .entry	0000000c __reset
00080020 g       *ABS*	00000000 __flash_exceptions_start
000804a0 g     O .bss	00000004 alt_argv
00088484 g       *ABS*	00000000 _gp
00080000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0008e5a8 g       *ABS*	00000000 __bss_end
0008048c g     O .bss	00000004 pixel_count
0008045c g     F .text	00000004 alt_dcache_flush_all
00080488 g       *ABS*	00000000 __ram_rwdata_end
00080484 g       *ABS*	00000000 __ram_rodata_end
00080484 g     O .rwdata	00000004 jtag_uart_0
0008e5a8 g       *ABS*	00000000 end
000a7400 g       *ABS*	00000000 __alt_stack_pointer
00080428 g     F .text	00000034 altera_avalon_jtag_uart_write
0008024c g     F .text	00000170 alt_printf
00080020 g     F .text	0000003c _start
00080424 g     F .text	00000004 alt_sys_init
00080484 g       *ABS*	00000000 __ram_rwdata_start
0008046c g       *ABS*	00000000 __ram_rodata_start
00080490 g     O .bss	00000004 col
0008e5a8 g       *ABS*	00000000 __alt_stack_base
0008048c g       *ABS*	00000000 __bss_start
0008005c g     F .text	000000e4 main
0008049c g     O .bss	00000004 alt_envp
0008046c g       *ABS*	00000000 __flash_rodata_start
00080494 g     O .bss	00000004 curr_pixel_data
00080404 g     F .text	00000020 alt_irq_init
000804a4 g     O .bss	00000004 alt_argc
00080020 g       *ABS*	00000000 __ram_exceptions_start
00080488 g       *ABS*	00000000 _edata
0008e5a8 g       *ABS*	00000000 _end
00080020 g       *ABS*	00000000 __ram_exceptions_end
000a7400 g       *ABS*	00000000 __alt_data_end
0008000c g       .entry	00000000 _exit
000803bc g     F .text	00000048 alt_putchar
00080460 g     F .text	00000004 alt_icache_flush_all
00080140 g     F .text	000000e0 alt_load
00080498 g     O .bss	00000004 row



Disassembly of section .entry:

00080000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80000:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80004:	08400814 	ori	at,at,32
    jmp r1
   80008:	0800683a 	jmp	at

0008000c <_exit>:
	...

Disassembly of section .text:

00080020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   80020:	06c002b4 	movhi	sp,10
    ori sp, sp, %lo(__alt_stack_pointer)
   80024:	dedd0014 	ori	sp,sp,29696
    movhi gp, %hi(_gp)
   80028:	06800234 	movhi	gp,8
    ori gp, gp, %lo(_gp)
   8002c:	d6a12114 	ori	gp,gp,33924
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   80030:	00800234 	movhi	r2,8
    ori r2, r2, %lo(__bss_start)
   80034:	10812314 	ori	r2,r2,1164

    movhi r3, %hi(__bss_end)
   80038:	00c00234 	movhi	r3,8
    ori r3, r3, %lo(__bss_end)
   8003c:	18f96a14 	ori	r3,r3,58792

    beq r2, r3, 1f
   80040:	10c00326 	beq	r2,r3,80050 <_start+0x30>

0:
    stw zero, (r2)
   80044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   80048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   8004c:	10fffd36 	bltu	r2,r3,80044 <__alt_data_end+0xfffd8c44>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   80050:	00801400 	call	80140 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   80054:	00802200 	call	80220 <alt_main>

00080058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   80058:	003fff06 	br	80058 <__alt_data_end+0xfffd8c58>

0008005c <main>:
unsigned int row;
unsigned int col;

int main(void) {
    unsigned int pixel_ready;
    row = 0;
   8005c:	d0200515 	stw	zero,-32748(gp)
    col = 0;
   80060:	d0200315 	stw	zero,-32756(gp)

    volatile int *JTAG_PTR = (int *) JTAG_BASE;

    char prompt = 0;

     pixel_count = 0;
   80064:	d0200215 	stw	zero,-32760(gp)



	while (1) {
		// image transfer monitor
		pixel_ready = *PIX_RDY_PTR;
   80068:	01040004 	movi	r4,4096
//        alt_printf("\nStarted %x", pixel_ready);
		if (pixel_ready == 1) {
   8006c:	00800044 	movi	r2,1



	while (1) {
		// image transfer monitor
		pixel_ready = *PIX_RDY_PTR;
   80070:	20c00017 	ldw	r3,0(r4)
//        alt_printf("\nStarted %x", pixel_ready);
		if (pixel_ready == 1) {
   80074:	18bffe1e 	bne	r3,r2,80070 <__alt_data_end+0xfffd8c70>

unsigned int pixels[120][120];
unsigned int row;
unsigned int col;

int main(void) {
   80078:	defffd04 	addi	sp,sp,-12
   8007c:	dc400115 	stw	r17,4(sp)
   80080:	dc000015 	stw	r16,0(sp)
   80084:	dfc00215 	stw	ra,8(sp)
//        alt_printf("\nStarted %x", pixel_ready);
		if (pixel_ready == 1) {
//			alt_printf("\nEntered1");
			// turn LED
			while(pixel_ready != 2) {
				prompt = *JTAG_PTR;
   80088:	04440c04 	movi	r17,4144
				if(pixel_ready == 0) {   //next pixel not ready, wait
					pixel_ready = *PIX_RDY_PTR;
				} else { //if(prompt == 'a'){    //next pixel ready, acknowledge & process. Ack when prompt == a used to debug pixel by pixel
//					alt_printf("\nEntered2");
					*ACK_PTR = 1;
   8008c:	04040104 	movi	r16,4100
//        alt_printf("\nStarted %x", pixel_ready);
		if (pixel_ready == 1) {
//			alt_printf("\nEntered1");
			// turn LED
			while(pixel_ready != 2) {
				prompt = *JTAG_PTR;
   80090:	88c00017 	ldw	r3,0(r17)
				if(pixel_ready == 0) {   //next pixel not ready, wait
   80094:	10001d26 	beq	r2,zero,8010c <main+0xb0>
					pixel_ready = *PIX_RDY_PTR;
				} else { //if(prompt == 'a'){    //next pixel ready, acknowledge & process. Ack when prompt == a used to debug pixel by pixel
//					alt_printf("\nEntered2");
					*ACK_PTR = 1;
   80098:	00800044 	movi	r2,1
   8009c:	80800015 	stw	r2,0(r16)

					curr_pixel_data = *PIX_DATA_PTR;
   800a0:	00840204 	movi	r2,4104
   800a4:	11400017 	ldw	r5,0(r2)

					if(row < 640) {
   800a8:	d0a00517 	ldw	r2,-32748(gp)
   800ac:	00c09fc4 	movi	r3,639
					pixel_ready = *PIX_RDY_PTR;
				} else { //if(prompt == 'a'){    //next pixel ready, acknowledge & process. Ack when prompt == a used to debug pixel by pixel
//					alt_printf("\nEntered2");
					*ACK_PTR = 1;

					curr_pixel_data = *PIX_DATA_PTR;
   800b0:	d1600415 	stw	r5,-32752(gp)

					if(row < 640) {
   800b4:	18801136 	bltu	r3,r2,800fc <main+0xa0>
						if(col < 480) {
   800b8:	d0a00317 	ldw	r2,-32756(gp)
   800bc:	00c077c4 	movi	r3,479
   800c0:	18800736 	bltu	r3,r2,800e0 <main+0x84>
//							pixels[row][col] = curr_pixel_data;
							alt_printf("%x ", curr_pixel_data);
   800c4:	01000234 	movhi	r4,8
   800c8:	21011b04 	addi	r4,r4,1132
   800cc:	008024c0 	call	8024c <alt_printf>
							col++;
   800d0:	d0a00317 	ldw	r2,-32756(gp)
   800d4:	10800044 	addi	r2,r2,1
   800d8:	d0a00315 	stw	r2,-32756(gp)
   800dc:	00000706 	br	800fc <main+0xa0>
						} else {
							alt_printf("\n");
   800e0:	01000234 	movhi	r4,8
   800e4:	21011c04 	addi	r4,r4,1136
   800e8:	008024c0 	call	8024c <alt_printf>
							col = 0;
							row++;
   800ec:	d0a00517 	ldw	r2,-32748(gp)
//							pixels[row][col] = curr_pixel_data;
							alt_printf("%x ", curr_pixel_data);
							col++;
						} else {
							alt_printf("\n");
							col = 0;
   800f0:	d0200315 	stw	zero,-32756(gp)
							row++;
   800f4:	10800044 	addi	r2,r2,1
   800f8:	d0a00515 	stw	r2,-32748(gp)
						}
					}
//					alt_printf("\n Pixel %x: %x", pixel_count, curr_pixel_data);

					 pixel_count++;
   800fc:	d0a00217 	ldw	r2,-32760(gp)
   80100:	10800044 	addi	r2,r2,1
   80104:	d0a00215 	stw	r2,-32760(gp)
					*ACK_PTR = 0;
   80108:	80000015 	stw	zero,0(r16)

					pixel_ready = *PIX_RDY_PTR;
   8010c:	00840004 	movi	r2,4096
   80110:	10800017 	ldw	r2,0(r2)
		pixel_ready = *PIX_RDY_PTR;
//        alt_printf("\nStarted %x", pixel_ready);
		if (pixel_ready == 1) {
//			alt_printf("\nEntered1");
			// turn LED
			while(pixel_ready != 2) {
   80114:	00c00084 	movi	r3,2
   80118:	10ffdd1e 	bne	r2,r3,80090 <__alt_data_end+0xfffd8c90>
					//     // full image captured
					// }
				}

			}
			alt_printf("\nDone pixels.");
   8011c:	01000234 	movhi	r4,8
   80120:	21011d04 	addi	r4,r4,1140
   80124:	008024c0 	call	8024c <alt_printf>

        // touch screen monitor



}
   80128:	0005883a 	mov	r2,zero
   8012c:	dfc00217 	ldw	ra,8(sp)
   80130:	dc400117 	ldw	r17,4(sp)
   80134:	dc000017 	ldw	r16,0(sp)
   80138:	dec00304 	addi	sp,sp,12
   8013c:	f800283a 	ret

00080140 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   80140:	deffff04 	addi	sp,sp,-4
   80144:	01000234 	movhi	r4,8
   80148:	01400234 	movhi	r5,8
   8014c:	dfc00015 	stw	ra,0(sp)
   80150:	21012104 	addi	r4,r4,1156
   80154:	29412204 	addi	r5,r5,1160

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   80158:	2140061e 	bne	r4,r5,80174 <alt_load+0x34>
   8015c:	01000234 	movhi	r4,8
   80160:	01400234 	movhi	r5,8
   80164:	21000804 	addi	r4,r4,32
   80168:	29400804 	addi	r5,r5,32
   8016c:	2140121e 	bne	r4,r5,801b8 <alt_load+0x78>
   80170:	00000b06 	br	801a0 <alt_load+0x60>
   80174:	00c00234 	movhi	r3,8
   80178:	18c12204 	addi	r3,r3,1160
   8017c:	1907c83a 	sub	r3,r3,r4
   80180:	0005883a 	mov	r2,zero
  {
    while( to != end )
   80184:	10fff526 	beq	r2,r3,8015c <__alt_data_end+0xfffd8d5c>
    {
      *to++ = *from++;
   80188:	114f883a 	add	r7,r2,r5
   8018c:	39c00017 	ldw	r7,0(r7)
   80190:	110d883a 	add	r6,r2,r4
   80194:	10800104 	addi	r2,r2,4
   80198:	31c00015 	stw	r7,0(r6)
   8019c:	003ff906 	br	80184 <__alt_data_end+0xfffd8d84>
   801a0:	01000234 	movhi	r4,8
   801a4:	01400234 	movhi	r5,8
   801a8:	21011b04 	addi	r4,r4,1132
   801ac:	29411b04 	addi	r5,r5,1132

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   801b0:	2140101e 	bne	r4,r5,801f4 <alt_load+0xb4>
   801b4:	00000b06 	br	801e4 <alt_load+0xa4>
   801b8:	00c00234 	movhi	r3,8
   801bc:	18c00804 	addi	r3,r3,32
   801c0:	1907c83a 	sub	r3,r3,r4
   801c4:	0005883a 	mov	r2,zero
  {
    while( to != end )
   801c8:	10fff526 	beq	r2,r3,801a0 <__alt_data_end+0xfffd8da0>
    {
      *to++ = *from++;
   801cc:	114f883a 	add	r7,r2,r5
   801d0:	39c00017 	ldw	r7,0(r7)
   801d4:	110d883a 	add	r6,r2,r4
   801d8:	10800104 	addi	r2,r2,4
   801dc:	31c00015 	stw	r7,0(r6)
   801e0:	003ff906 	br	801c8 <__alt_data_end+0xfffd8dc8>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   801e4:	008045c0 	call	8045c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   801e8:	dfc00017 	ldw	ra,0(sp)
   801ec:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   801f0:	00804601 	jmpi	80460 <alt_icache_flush_all>
   801f4:	00c00234 	movhi	r3,8
   801f8:	18c12104 	addi	r3,r3,1156
   801fc:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   80200:	0005883a 	mov	r2,zero
  {
    while( to != end )
   80204:	18bff726 	beq	r3,r2,801e4 <__alt_data_end+0xfffd8de4>
    {
      *to++ = *from++;
   80208:	114f883a 	add	r7,r2,r5
   8020c:	39c00017 	ldw	r7,0(r7)
   80210:	110d883a 	add	r6,r2,r4
   80214:	10800104 	addi	r2,r2,4
   80218:	31c00015 	stw	r7,0(r6)
   8021c:	003ff906 	br	80204 <__alt_data_end+0xfffd8e04>

00080220 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   80220:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   80224:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   80228:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   8022c:	00804040 	call	80404 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   80230:	00804240 	call	80424 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   80234:	d1a00617 	ldw	r6,-32744(gp)
   80238:	d1600717 	ldw	r5,-32740(gp)
   8023c:	d1200817 	ldw	r4,-32736(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   80240:	dfc00017 	ldw	ra,0(sp)
   80244:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   80248:	008005c1 	jmpi	8005c <main>

0008024c <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   8024c:	defff204 	addi	sp,sp,-56
   80250:	2005883a 	mov	r2,r4
   80254:	dfc00a15 	stw	ra,40(sp)
   80258:	df000915 	stw	fp,36(sp)
   8025c:	ddc00815 	stw	r23,32(sp)
   80260:	dd800715 	stw	r22,28(sp)
   80264:	dd400615 	stw	r21,24(sp)
   80268:	dd000515 	stw	r20,20(sp)
   8026c:	dcc00415 	stw	r19,16(sp)
   80270:	dc800315 	stw	r18,12(sp)
   80274:	dc400215 	stw	r17,8(sp)
   80278:	dc000115 	stw	r16,4(sp)
   8027c:	d9400b15 	stw	r5,44(sp)
   80280:	d9800c15 	stw	r6,48(sp)
   80284:	d9c00d15 	stw	r7,52(sp)
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   80288:	04000944 	movi	r16,37
 */
void 
alt_printf(const char* fmt, ... )
{
	va_list args;
	va_start(args, fmt);
   8028c:	dd400b04 	addi	r21,sp,44
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
   80290:	048018c4 	movi	r18,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
   80294:	04c01e04 	movi	r19,120
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   80298:	05001cc4 	movi	r20,115
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   8029c:	11000007 	ldb	r4,0(r2)
   802a0:	20003a26 	beq	r4,zero,8038c <alt_printf+0x140>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   802a4:	24000226 	beq	r4,r16,802b0 <alt_printf+0x64>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   802a8:	14400044 	addi	r17,r2,1
   802ac:	00001406 	br	80300 <alt_printf+0xb4>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   802b0:	14400084 	addi	r17,r2,2
   802b4:	10800047 	ldb	r2,1(r2)
   802b8:	10003426 	beq	r2,zero,8038c <alt_printf+0x140>
            {
                if (c == '%')
   802bc:	1400021e 	bne	r2,r16,802c8 <alt_printf+0x7c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   802c0:	8009883a 	mov	r4,r16
   802c4:	00000e06 	br	80300 <alt_printf+0xb4>
                } 
                else if (c == 'c')
   802c8:	1480051e 	bne	r2,r18,802e0 <alt_printf+0x94>
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
   802cc:	a9000017 	ldw	r4,0(r21)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
   802d0:	ad800104 	addi	r22,r21,4
   802d4:	b02b883a 	mov	r21,r22
                    alt_putchar(v);
   802d8:	00803bc0 	call	803bc <alt_putchar>
   802dc:	00002906 	br	80384 <alt_printf+0x138>
                }
                else if (c == 'x')
   802e0:	14c0201e 	bne	r2,r19,80364 <alt_printf+0x118>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   802e4:	adc00017 	ldw	r23,0(r21)
   802e8:	ad400104 	addi	r21,r21,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   802ec:	b8000326 	beq	r23,zero,802fc <alt_printf+0xb0>
   802f0:	05800704 	movi	r22,28
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   802f4:	00c003c4 	movi	r3,15
   802f8:	00000306 	br	80308 <alt_printf+0xbc>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
   802fc:	01000c04 	movi	r4,48
   80300:	00803bc0 	call	803bc <alt_putchar>
                        continue;
   80304:	00001f06 	br	80384 <alt_printf+0x138>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   80308:	1d84983a 	sll	r2,r3,r22
   8030c:	15c4703a 	and	r2,r2,r23
   80310:	1000021e 	bne	r2,zero,8031c <alt_printf+0xd0>
                        digit_shift -= 4;
   80314:	b5bfff04 	addi	r22,r22,-4
   80318:	003ffb06 	br	80308 <__alt_data_end+0xfffd8f08>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   8031c:	070003c4 	movi	fp,15
                        if (digit <= 9)
   80320:	00c00244 	movi	r3,9
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   80324:	b0001716 	blt	r22,zero,80384 <alt_printf+0x138>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   80328:	e588983a 	sll	r4,fp,r22
   8032c:	25c8703a 	and	r4,r4,r23
   80330:	2588d83a 	srl	r4,r4,r22
                        if (digit <= 9)
   80334:	19000236 	bltu	r3,r4,80340 <alt_printf+0xf4>
                            c = '0' + digit;
   80338:	21000c04 	addi	r4,r4,48
   8033c:	00000106 	br	80344 <alt_printf+0xf8>
                        else
                            c = 'a' + digit - 10;
   80340:	210015c4 	addi	r4,r4,87
                        alt_putchar(c);
   80344:	21003fcc 	andi	r4,r4,255
   80348:	2100201c 	xori	r4,r4,128
   8034c:	213fe004 	addi	r4,r4,-128
   80350:	d8c00015 	stw	r3,0(sp)
   80354:	00803bc0 	call	803bc <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   80358:	b5bfff04 	addi	r22,r22,-4
   8035c:	d8c00017 	ldw	r3,0(sp)
   80360:	003ff006 	br	80324 <__alt_data_end+0xfffd8f24>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   80364:	1500071e 	bne	r2,r20,80384 <alt_printf+0x138>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   80368:	ad800017 	ldw	r22,0(r21)
   8036c:	ad400104 	addi	r21,r21,4

                    while(*s)
   80370:	b1000007 	ldb	r4,0(r22)
   80374:	20000326 	beq	r4,zero,80384 <alt_printf+0x138>
                      alt_putchar(*s++);
   80378:	b5800044 	addi	r22,r22,1
   8037c:	00803bc0 	call	803bc <alt_putchar>
   80380:	003ffb06 	br	80370 <__alt_data_end+0xfffd8f70>
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
   80384:	8805883a 	mov	r2,r17
   80388:	003fc406 	br	8029c <__alt_data_end+0xfffd8e9c>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   8038c:	dfc00a17 	ldw	ra,40(sp)
   80390:	df000917 	ldw	fp,36(sp)
   80394:	ddc00817 	ldw	r23,32(sp)
   80398:	dd800717 	ldw	r22,28(sp)
   8039c:	dd400617 	ldw	r21,24(sp)
   803a0:	dd000517 	ldw	r20,20(sp)
   803a4:	dcc00417 	ldw	r19,16(sp)
   803a8:	dc800317 	ldw	r18,12(sp)
   803ac:	dc400217 	ldw	r17,8(sp)
   803b0:	dc000117 	ldw	r16,4(sp)
   803b4:	dec00e04 	addi	sp,sp,56
   803b8:	f800283a 	ret

000803bc <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   803bc:	defffd04 	addi	sp,sp,-12
   803c0:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
   803c4:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   803c8:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
   803cc:	01000234 	movhi	r4,8
   803d0:	000f883a 	mov	r7,zero
   803d4:	01800044 	movi	r6,1
   803d8:	d80b883a 	mov	r5,sp
   803dc:	21012104 	addi	r4,r4,1156
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   803e0:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
   803e4:	00804280 	call	80428 <altera_avalon_jtag_uart_write>
   803e8:	00ffffc4 	movi	r3,-1
   803ec:	10c00126 	beq	r2,r3,803f4 <alt_putchar+0x38>
        return -1;
    }
    return c;
   803f0:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
   803f4:	dfc00217 	ldw	ra,8(sp)
   803f8:	dc000117 	ldw	r16,4(sp)
   803fc:	dec00304 	addi	sp,sp,12
   80400:	f800283a 	ret

00080404 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   80404:	deffff04 	addi	sp,sp,-4
   80408:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   8040c:	00804640 	call	80464 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   80410:	00800044 	movi	r2,1
   80414:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   80418:	dfc00017 	ldw	ra,0(sp)
   8041c:	dec00104 	addi	sp,sp,4
   80420:	f800283a 	ret

00080424 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   80424:	f800283a 	ret

00080428 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   80428:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   8042c:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   80430:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   80434:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   80438:	2980072e 	bgeu	r5,r6,80458 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   8043c:	38c00037 	ldwio	r3,0(r7)
   80440:	18ffffec 	andhi	r3,r3,65535
   80444:	183ffc26 	beq	r3,zero,80438 <__alt_data_end+0xfffd9038>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   80448:	28c00007 	ldb	r3,0(r5)
   8044c:	20c00035 	stwio	r3,0(r4)
   80450:	29400044 	addi	r5,r5,1
   80454:	003ff806 	br	80438 <__alt_data_end+0xfffd9038>

  return count;
}
   80458:	f800283a 	ret

0008045c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   8045c:	f800283a 	ret

00080460 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   80460:	f800283a 	ret

00080464 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   80464:	000170fa 	wrctl	ienable,zero
   80468:	f800283a 	ret
