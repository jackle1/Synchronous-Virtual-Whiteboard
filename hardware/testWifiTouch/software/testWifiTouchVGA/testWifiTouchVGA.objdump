
testWifiTouchVGA.elf:     file format elf32-littlenios2
testWifiTouchVGA.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00040234

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x00005fc4 memsz 0x00005fc4 flags r-x
    LOAD off    0x00007000 vaddr 0x08000000 paddr 0x00045fe4 align 2**12
         filesz 0x00001c10 memsz 0x00001d64 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000214  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005db0  00040234  00040234  00001234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000b4  08000000  00045fe4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b5c  080000b4  00046098  000070b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  08001c10  00047bf4  00008c10  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00047bf4  00047bf4  00008c10  2**0
                  CONTENTS
  7 .sdram_controller 00000000  08001d64  08001d64  00008c10  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00008c10  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000a30  00000000  00000000  00008c38  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00017381  00000000  00000000  00009668  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000619a  00000000  00000000  000209e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00006d01  00000000  00000000  00026b83  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001734  00000000  00000000  0002d884  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002a7e  00000000  00000000  0002efb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004ae9  00000000  00000000  00031a36  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  00036520  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000680  00000000  00000000  00036530  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00039346  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00039349  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00039355  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00039356  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  00039357  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  00039362  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  0003936d  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000003  00000000  00000000  00039378  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000002e  00000000  00000000  0003937b  2**0
                  CONTENTS, READONLY
 27 .jdi          00004a36  00000000  00000000  000393a9  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00063163  00000000  00000000  0003dddf  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
00040234 l    d  .text	00000000 .text
08000000 l    d  .rodata	00000000 .rodata
080000b4 l    d  .rwdata	00000000 .rwdata
08001c10 l    d  .bss	00000000 .bss
00047bf4 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
08001d64 l    d  .sdram_controller	00000000 .sdram_controller
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../testWifiTouchVGA_bsp//obj/HAL/src/crt0.o
0004026c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
000407c8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0004096c l     F .text	00000034 alt_dev_reg
080000b4 l     O .rwdata	00001060 jtag_uart_0
08001114 l     O .rwdata	0000002c touchscreen_uart
08001140 l     O .rwdata	0000002c wifi_uart
0800116c l     O .rwdata	00000054 video_pixel_buffer_dma_0
080011c0 l     O .rwdata	00000044 video_rgb_resampler_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00040f0c l     F .text	00000210 altera_avalon_jtag_uart_irq
0004111c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00041c10 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00041d44 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00041d70 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00041fc0 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000422a0 l     F .text	0000003c alt_get_errno
000422dc l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
080013ac l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00044894 l     F .text	00000008 __fp_unlock
000448a8 l     F .text	0000019c __sinit.part.1
00044a44 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0004597c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00045a70 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
00045b58 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00045cb8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sbrk.c
08001c0c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00045ea8 l     F .text	0000003c alt_get_errno
08001c28 g     O .bss	00000004 alt_instruction_exception_handler
00045834 g     F .text	00000054 _isatty_r
000408b4 g     F .text	0000007c alt_main
08001c64 g     O .bss	00000100 alt_irq
00045888 g     F .text	00000060 _lseek_r
00046098 g       *ABS*	00000000 __flash_rwdata_start
08001d64 g       *ABS*	00000000 __alt_heap_start
000455bc g     F .text	0000005c __sseek
00044bf4 g     F .text	00000010 __sinit
00044a4c g     F .text	00000078 __sfmoreglue
00045c94 g     F .text	00000024 __malloc_unlock
00041984 g     F .text	00000090 alt_up_rs232_read_fd
00043a54 g     F .text	0000015c memmove
00044bdc g     F .text	00000018 _cleanup
00040930 g     F .text	0000003c alt_putstr
0004274c g     F .text	00000024 altera_nios2_gen2_irq_init
00040000 g     F .entry	0000000c __reset
00040020 g       *ABS*	00000000 __flash_exceptions_start
000457d8 g     F .text	0000005c _fstat_r
08001c2c g     O .bss	00000004 errno
00045538 g     F .text	00000008 __seofread
08000000 g       *ABS*	00000000 __alt_mem_sdram_controller
08001c14 g     O .bss	00000004 alt_argv
08009bd8 g       *ABS*	00000000 _gp
0800122c g     O .rwdata	00000180 alt_fd_list
00041f10 g     F .text	00000090 alt_find_dev
0004390c g     F .text	00000148 memcpy
00040504 g     F .text	0000006c clearVGA
0004489c g     F .text	0000000c _cleanup_r
000420a4 g     F .text	0000007c alt_io_redirect
00045fe4 g       *ABS*	00000000 __DTOR_END__
00041910 g     F .text	00000074 alt_up_rs232_read_data
0004293c g     F .text	0000009c alt_exception_cause_generated_bad_addr
00041314 g     F .text	0000021c altera_avalon_jtag_uart_read
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
000406e4 g     F .text	00000064 .hidden __udivsi3
00045aac g     F .text	000000ac isatty
0004033c g     F .text	00000048 getUart
08001c38 g     O .bss	00000004 __malloc_top_pad
00040384 g     F .text	000000bc getTouchscreenCoords
00042ad8 g     F .text	000004c8 __sfvwrite_r
00044114 g     F .text	00000054 _sbrk_r
000458e8 g     F .text	00000060 _read_r
08001be8 g     O .rwdata	00000004 alt_max_fd
0004188c g     F .text	00000044 alt_up_rs232_check_parity
000456d4 g     F .text	000000f0 _fclose_r
00044864 g     F .text	00000030 fflush
08001c34 g     O .bss	00000004 __malloc_max_sbrked_mem
00042120 g     F .text	00000180 alt_irq_register
00045b94 g     F .text	000000dc lseek
08001bfc g     O .rwdata	00000004 _global_impure_ptr
00043bb0 g     F .text	00000564 _realloc_r
08001d64 g       *ABS*	00000000 __bss_end
00042644 g     F .text	00000108 alt_tick
00044c14 g     F .text	00000018 __fp_lock_all
0004046c g     F .text	00000098 translateTouchscreenVGACoords
000425a8 g     F .text	0000009c alt_alarm_stop
08001c1c g     O .bss	00000004 alt_irq_active
000400fc g     F .exceptions	000000d8 alt_irq_handler
08001204 g     O .rwdata	00000028 alt_dev_null
00041d24 g     F .text	00000020 alt_dcache_flush_all
08001c10 g       *ABS*	00000000 __ram_rwdata_end
08001be0 g     O .rwdata	00000008 alt_dev_list
00045ee4 g     F .text	00000100 write
080000b4 g       *ABS*	00000000 __ram_rodata_end
000459b8 g     F .text	000000b8 fstat
00041a14 g     F .text	00000094 alt_up_rs232_write_fd
00040748 g     F .text	00000058 .hidden __umodsi3
08001d64 g       *ABS*	00000000 end
00040e58 g     F .text	000000b4 altera_avalon_jtag_uart_init
000401d4 g     F .exceptions	00000060 alt_instruction_exception_entry
00045fe4 g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
00041530 g     F .text	00000224 altera_avalon_jtag_uart_write
00044c04 g     F .text	00000004 __sfp_lock_acquire
000437ac g     F .text	000000e4 memchr
00044d68 g     F .text	00000310 _free_r
0004446c g     F .text	00000180 __call_exitprocs
08001c04 g     O .rwdata	00000004 __malloc_sbrk_base
00040234 g     F .text	0000003c _start
08001c20 g     O .bss	00000004 _alt_tick_rate
08001c24 g     O .bss	00000004 _alt_nticks
00045cf4 g     F .text	00000104 read
000409d8 g     F .text	0000031c alt_sys_init
00044354 g     F .text	00000118 __register_exitproc
00041850 g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
000411bc g     F .text	00000068 altera_avalon_jtag_uart_close
000407a0 g     F .text	00000028 .hidden __mulsi3
080000b4 g       *ABS*	00000000 __ram_rwdata_start
08000000 g       *ABS*	00000000 __ram_rodata_start
08001c3c g     O .bss	00000028 __malloc_current_mallinfo
00040570 g     F .text	0000007c paintPixel
00040cf4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00042878 g     F .text	000000c4 alt_get_fd
00045680 g     F .text	00000054 _close_r
00043890 g     F .text	0000007c memcmp
00040db4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
08001d64 g       *ABS*	00000000 __alt_stack_base
00040e04 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00044200 g     F .text	00000154 __swsetup_r
00044ac4 g     F .text	00000118 __sfp
080017d0 g     O .rwdata	00000408 __malloc_av_
00044c10 g     F .text	00000004 __sinit_lock_release
000454e4 g     F .text	00000054 __sread
000417b0 g     F .text	00000060 alt_up_rs232_disable_read_interrupt
00042770 g     F .text	00000108 alt_find_file
00041dac g     F .text	000000a4 alt_dev_llist_insert
00045c70 g     F .text	00000024 __malloc_lock
00045df8 g     F .text	000000b0 sbrk
00044808 g     F .text	0000005c _fflush_r
08001c10 g       *ABS*	00000000 __bss_start
000453bc g     F .text	00000128 memset
00040270 g     F .text	000000cc main
08001c18 g     O .bss	00000004 alt_envp
08001c30 g     O .bss	00000004 __malloc_max_total_mem
00040d54 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00045618 g     F .text	00000008 __sclose
0c000000 g       *ABS*	00000000 __alt_heap_limit
000457c4 g     F .text	00000014 fclose
00042fa0 g     F .text	0000080c _malloc_r
08001bec g     O .rwdata	00000004 alt_errno
00045078 g     F .text	000000c4 _fwalk
000405ec g     F .text	00000084 .hidden __divsi3
00044c44 g     F .text	00000124 _malloc_trim_r
00045fe4 g       *ABS*	00000000 __CTOR_END__
00045fe4 g       *ABS*	00000000 __flash_rodata_start
00045fe4 g       *ABS*	00000000 __DTOR_LIST__
00041aa8 g     F .text	0000003c alt_up_rs232_open_dev
000409a0 g     F .text	00000038 alt_irq_init
00042524 g     F .text	00000084 alt_release_fd
000429d8 g     F .text	00000014 atexit
00045620 g     F .text	00000060 _write_r
08001c00 g     O .rwdata	00000004 _impure_ptr
08001c10 g     O .bss	00000004 alt_argc
000445ec g     F .text	0000021c __sflush_r
00041eb0 g     F .text	00000060 _do_dtors
00040020 g       .exceptions	00000000 alt_irq_entry
00044c2c g     F .text	00000018 __fp_unlock_all
08001bd8 g     O .rwdata	00000008 alt_fs_list
00041754 g     F .text	0000005c alt_up_rs232_enable_read_interrupt
000418d0 g     F .text	00000040 alt_up_rs232_write_data
00040020 g       *ABS*	00000000 __ram_exceptions_start
08001c10 g       *ABS*	00000000 _edata
08001d64 g       *ABS*	00000000 _end
00040234 g       *ABS*	00000000 __ram_exceptions_end
00041224 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00042a24 g     F .text	0000009c _fputs_r
00045540 g     F .text	0000007c __swrite
08001c08 g     O .rwdata	00000004 __malloc_trim_threshold
000429ec g     F .text	00000038 exit
0004513c g     F .text	000000c4 _fwalk_reent
00040670 g     F .text	00000074 .hidden __modsi3
00040440 g     F .text	0000002c checkEmpty
0c000000 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
00044c08 g     F .text	00000004 __sfp_lock_release
00045948 g     F .text	00000034 _exit
00041ae4 g     F .text	0000012c alt_alarm_start
00045200 g     F .text	000001bc __smakebuf_r
00044168 g     F .text	00000098 strlen
000423c8 g     F .text	0000015c open
00041fa0 g     F .text	00000020 alt_icache_flush_all
00042ac0 g     F .text	00000018 fputs
08001bf0 g     O .rwdata	00000004 alt_priority_mask
08001bf4 g     O .rwdata	00000008 alt_alarm_list
00041e50 g     F .text	00000060 _do_ctors
00041810 g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
00041c4c g     F .text	000000d8 close
00040830 g     F .text	00000084 alt_load
00044c0c g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00040000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40000:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40004:	08408d14 	ori	at,at,564
    jmp r1
   40008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400fc0 	call	400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000706 	br	400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   4008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   40094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   40098:	00401d40 	call	401d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   4009c:	1000021e 	bne	r2,zero,400a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   400a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400f8:	ef80083a 	eret

000400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400fc:	defff904 	addi	sp,sp,-28
   40100:	dfc00615 	stw	ra,24(sp)
   40104:	df000515 	stw	fp,20(sp)
   40108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   4010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40110:	0005313a 	rdctl	r2,ipending
   40114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40124:	00800044 	movi	r2,1
   40128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4012c:	e0fffb17 	ldw	r3,-20(fp)
   40130:	e0bffc17 	ldw	r2,-16(fp)
   40134:	1884703a 	and	r2,r3,r2
   40138:	10001526 	beq	r2,zero,40190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   4013c:	00820034 	movhi	r2,2048
   40140:	10871904 	addi	r2,r2,7268
   40144:	e0fffd17 	ldw	r3,-12(fp)
   40148:	180690fa 	slli	r3,r3,3
   4014c:	10c5883a 	add	r2,r2,r3
   40150:	10c00017 	ldw	r3,0(r2)
   40154:	00820034 	movhi	r2,2048
   40158:	10871904 	addi	r2,r2,7268
   4015c:	e13ffd17 	ldw	r4,-12(fp)
   40160:	200890fa 	slli	r4,r4,3
   40164:	1105883a 	add	r2,r2,r4
   40168:	10800104 	addi	r2,r2,4
   4016c:	10800017 	ldw	r2,0(r2)
   40170:	e17ffd17 	ldw	r5,-12(fp)
   40174:	1009883a 	mov	r4,r2
   40178:	183ee83a 	callr	r3
#endif
        break;
   4017c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40180:	0005313a 	rdctl	r2,ipending
   40184:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40188:	e0bfff17 	ldw	r2,-4(fp)
   4018c:	00000706 	br	401ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
   40190:	e0bffc17 	ldw	r2,-16(fp)
   40194:	1085883a 	add	r2,r2,r2
   40198:	e0bffc15 	stw	r2,-16(fp)
      i++;
   4019c:	e0bffd17 	ldw	r2,-12(fp)
   401a0:	10800044 	addi	r2,r2,1
   401a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   401a8:	003fe006 	br	4012c <__alt_data_end+0xf404012c>

    active = alt_irq_pending ();
   401ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   401b0:	e0bffb17 	ldw	r2,-20(fp)
   401b4:	103fda1e 	bne	r2,zero,40120 <__alt_data_end+0xf4040120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   401b8:	0001883a 	nop
}
   401bc:	0001883a 	nop
   401c0:	e037883a 	mov	sp,fp
   401c4:	dfc00117 	ldw	ra,4(sp)
   401c8:	df000017 	ldw	fp,0(sp)
   401cc:	dec00204 	addi	sp,sp,8
   401d0:	f800283a 	ret

000401d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   401d4:	defffb04 	addi	sp,sp,-20
   401d8:	dfc00415 	stw	ra,16(sp)
   401dc:	df000315 	stw	fp,12(sp)
   401e0:	df000304 	addi	fp,sp,12
   401e4:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   401e8:	00bfffc4 	movi	r2,-1
   401ec:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   401f0:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   401f4:	d0a01417 	ldw	r2,-32688(gp)
   401f8:	10000726 	beq	r2,zero,40218 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   401fc:	d0a01417 	ldw	r2,-32688(gp)
   40200:	e0fffd17 	ldw	r3,-12(fp)
   40204:	e1bffe17 	ldw	r6,-8(fp)
   40208:	e17fff17 	ldw	r5,-4(fp)
   4020c:	1809883a 	mov	r4,r3
   40210:	103ee83a 	callr	r2
   40214:	00000206 	br	40220 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   40218:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   4021c:	0005883a 	mov	r2,zero
}
   40220:	e037883a 	mov	sp,fp
   40224:	dfc00117 	ldw	ra,4(sp)
   40228:	df000017 	ldw	fp,0(sp)
   4022c:	dec00204 	addi	sp,sp,8
   40230:	f800283a 	ret

Disassembly of section .text:

00040234 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   40234:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
   40238:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   4023c:	06820034 	movhi	gp,2048
    ori gp, gp, %lo(_gp)
   40240:	d6a6f614 	ori	gp,gp,39896
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   40244:	00820034 	movhi	r2,2048
    ori r2, r2, %lo(__bss_start)
   40248:	10870414 	ori	r2,r2,7184

    movhi r3, %hi(__bss_end)
   4024c:	00c20034 	movhi	r3,2048
    ori r3, r3, %lo(__bss_end)
   40250:	18c75914 	ori	r3,r3,7524

    beq r2, r3, 1f
   40254:	10c00326 	beq	r2,r3,40264 <_start+0x30>

0:
    stw zero, (r2)
   40258:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   4025c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   40260:	10fffd36 	bltu	r2,r3,40258 <__alt_data_end+0xf4040258>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   40264:	00408300 	call	40830 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40268:	00408b40 	call	408b4 <alt_main>

0004026c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   4026c:	003fff06 	br	4026c <__alt_data_end+0xf404026c>

00040270 <main>:

#define COLOUR_WHITE -1
#define COLOUR_BLACK 0

int main()
{
   40270:	defffa04 	addi	sp,sp,-24
   40274:	dfc00515 	stw	ra,20(sp)
   40278:	df000415 	stw	fp,16(sp)
   4027c:	df000404 	addi	fp,sp,16
  alt_putstr("Hello from Nios II!\n");
   40280:	01020034 	movhi	r4,2048
   40284:	21000004 	addi	r4,r4,0
   40288:	00409300 	call	40930 <alt_putstr>
  volatile unsigned short * VGA_BASE = *((unsigned int *) VIDEO_PIXEL_BUFFER_DMA_0_BASE);
   4028c:	0005883a 	mov	r2,zero
   40290:	10800017 	ldw	r2,0(r2)
   40294:	e0bffc15 	stw	r2,-16(fp)
  clearVGA(VGA_BASE, COLOUR_WHITE);
   40298:	017fffd4 	movui	r5,65535
   4029c:	e13ffc17 	ldw	r4,-16(fp)
   402a0:	00405040 	call	40504 <clearVGA>
  while (1)
  {
	  if (checkEmpty(TOUCHSCREEN_UART))
   402a4:	01000234 	movhi	r4,8
   402a8:	21040404 	addi	r4,r4,4112
   402ac:	00404400 	call	40440 <checkEmpty>
   402b0:	10803fcc 	andi	r2,r2,255
   402b4:	103ffb26 	beq	r2,zero,402a4 <__alt_data_end+0xf40402a4>
	  {
		  unsigned char readData = getUart(TOUCHSCREEN_UART);
   402b8:	01000234 	movhi	r4,8
   402bc:	21040404 	addi	r4,r4,4112
   402c0:	004033c0 	call	4033c <getUart>
   402c4:	e0bffd05 	stb	r2,-12(fp)
		  if (readData == TOUCHSCREEN_PEN_DOWN)
   402c8:	e0bffd03 	ldbu	r2,-12(fp)
   402cc:	10802058 	cmpnei	r2,r2,129
   402d0:	103ff41e 	bne	r2,zero,402a4 <__alt_data_end+0xf40402a4>
		  {
			  unsigned short x, y, vga_x, vga_y;
        getTouchscreenCoords(TOUCHSCREEN_UART, &x, &y);
   402d4:	e0fffe04 	addi	r3,fp,-8
   402d8:	e0bffd84 	addi	r2,fp,-10
   402dc:	180d883a 	mov	r6,r3
   402e0:	100b883a 	mov	r5,r2
   402e4:	01000234 	movhi	r4,8
   402e8:	21040404 	addi	r4,r4,4112
   402ec:	00403840 	call	40384 <getTouchscreenCoords>
        //printf("Hi mary %d\n", x);
        translateTouchscreenVGACoords(&x, &vga_x, &y, &vga_y);
   402f0:	e17fff04 	addi	r5,fp,-4
   402f4:	e13ffe04 	addi	r4,fp,-8
   402f8:	e0fffe84 	addi	r3,fp,-6
   402fc:	e0bffd84 	addi	r2,fp,-10
   40300:	280f883a 	mov	r7,r5
   40304:	200d883a 	mov	r6,r4
   40308:	180b883a 	mov	r5,r3
   4030c:	1009883a 	mov	r4,r2
   40310:	004046c0 	call	4046c <translateTouchscreenVGACoords>
        paintPixel(VGA_BASE, vga_x, vga_y, COLOUR_BLACK);
   40314:	e0bffe8b 	ldhu	r2,-6(fp)
   40318:	10bfffcc 	andi	r2,r2,65535
   4031c:	e0ffff0b 	ldhu	r3,-4(fp)
   40320:	18ffffcc 	andi	r3,r3,65535
   40324:	000f883a 	mov	r7,zero
   40328:	180d883a 	mov	r6,r3
   4032c:	100b883a 	mov	r5,r2
   40330:	e13ffc17 	ldw	r4,-16(fp)
   40334:	00405700 	call	40570 <paintPixel>
		  }
	  }
  }
   40338:	003fda06 	br	402a4 <__alt_data_end+0xf40402a4>

0004033c <getUart>:

  return 0;
}

inline unsigned char getUart(volatile unsigned char * uart)
{
   4033c:	defffe04 	addi	sp,sp,-8
   40340:	df000115 	stw	fp,4(sp)
   40344:	df000104 	addi	fp,sp,4
   40348:	e13fff15 	stw	r4,-4(fp)
  while (!(uart[1] & 0x80));
   4034c:	0001883a 	nop
   40350:	e0bfff17 	ldw	r2,-4(fp)
   40354:	10800044 	addi	r2,r2,1
   40358:	10800003 	ldbu	r2,0(r2)
   4035c:	10803fcc 	andi	r2,r2,255
   40360:	1080201c 	xori	r2,r2,128
   40364:	10bfe004 	addi	r2,r2,-128
   40368:	103ff90e 	bge	r2,zero,40350 <__alt_data_end+0xf4040350>
	return *uart;
   4036c:	e0bfff17 	ldw	r2,-4(fp)
   40370:	10800003 	ldbu	r2,0(r2)
}
   40374:	e037883a 	mov	sp,fp
   40378:	df000017 	ldw	fp,0(sp)
   4037c:	dec00104 	addi	sp,sp,4
   40380:	f800283a 	ret

00040384 <getTouchscreenCoords>:

void getTouchscreenCoords(volatile unsigned char * uart, unsigned short * x, unsigned short * y)
{
   40384:	defffb04 	addi	sp,sp,-20
   40388:	dfc00415 	stw	ra,16(sp)
   4038c:	df000315 	stw	fp,12(sp)
   40390:	df000304 	addi	fp,sp,12
   40394:	e13ffd15 	stw	r4,-12(fp)
   40398:	e17ffe15 	stw	r5,-8(fp)
   4039c:	e1bfff15 	stw	r6,-4(fp)
  *x = getUart(uart);
   403a0:	e13ffd17 	ldw	r4,-12(fp)
   403a4:	004033c0 	call	4033c <getUart>
   403a8:	10c03fcc 	andi	r3,r2,255
   403ac:	e0bffe17 	ldw	r2,-8(fp)
   403b0:	10c0000d 	sth	r3,0(r2)
  *x |= getUart(uart) << 7;
   403b4:	e13ffd17 	ldw	r4,-12(fp)
   403b8:	004033c0 	call	4033c <getUart>
   403bc:	10803fcc 	andi	r2,r2,255
   403c0:	100891fa 	slli	r4,r2,7
   403c4:	e0bffe17 	ldw	r2,-8(fp)
   403c8:	1080000b 	ldhu	r2,0(r2)
   403cc:	1007883a 	mov	r3,r2
   403d0:	2005883a 	mov	r2,r4
   403d4:	1884b03a 	or	r2,r3,r2
   403d8:	1007883a 	mov	r3,r2
   403dc:	e0bffe17 	ldw	r2,-8(fp)
   403e0:	10c0000d 	sth	r3,0(r2)
  *y = getUart(uart);
   403e4:	e13ffd17 	ldw	r4,-12(fp)
   403e8:	004033c0 	call	4033c <getUart>
   403ec:	10c03fcc 	andi	r3,r2,255
   403f0:	e0bfff17 	ldw	r2,-4(fp)
   403f4:	10c0000d 	sth	r3,0(r2)
  *y |= getUart(uart) << 7;
   403f8:	e13ffd17 	ldw	r4,-12(fp)
   403fc:	004033c0 	call	4033c <getUart>
   40400:	10803fcc 	andi	r2,r2,255
   40404:	100891fa 	slli	r4,r2,7
   40408:	e0bfff17 	ldw	r2,-4(fp)
   4040c:	1080000b 	ldhu	r2,0(r2)
   40410:	1007883a 	mov	r3,r2
   40414:	2005883a 	mov	r2,r4
   40418:	1884b03a 	or	r2,r3,r2
   4041c:	1007883a 	mov	r3,r2
   40420:	e0bfff17 	ldw	r2,-4(fp)
   40424:	10c0000d 	sth	r3,0(r2)
}
   40428:	0001883a 	nop
   4042c:	e037883a 	mov	sp,fp
   40430:	dfc00117 	ldw	ra,4(sp)
   40434:	df000017 	ldw	fp,0(sp)
   40438:	dec00204 	addi	sp,sp,8
   4043c:	f800283a 	ret

00040440 <checkEmpty>:

inline unsigned char checkEmpty(volatile unsigned char * uart)
{
   40440:	defffe04 	addi	sp,sp,-8
   40444:	df000115 	stw	fp,4(sp)
   40448:	df000104 	addi	fp,sp,4
   4044c:	e13fff15 	stw	r4,-4(fp)
  return *(uart + 2);
   40450:	e0bfff17 	ldw	r2,-4(fp)
   40454:	10800084 	addi	r2,r2,2
   40458:	10800003 	ldbu	r2,0(r2)
}
   4045c:	e037883a 	mov	sp,fp
   40460:	df000017 	ldw	fp,0(sp)
   40464:	dec00104 	addi	sp,sp,4
   40468:	f800283a 	ret

0004046c <translateTouchscreenVGACoords>:

inline void translateTouchscreenVGACoords(unsigned short * x, unsigned short * new_x, unsigned short * y, unsigned short * new_y)
{
   4046c:	defffa04 	addi	sp,sp,-24
   40470:	dfc00515 	stw	ra,20(sp)
   40474:	df000415 	stw	fp,16(sp)
   40478:	df000404 	addi	fp,sp,16
   4047c:	e13ffc15 	stw	r4,-16(fp)
   40480:	e17ffd15 	stw	r5,-12(fp)
   40484:	e1bffe15 	stw	r6,-8(fp)
   40488:	e1ffff15 	stw	r7,-4(fp)
  *new_x = *x * VGA_X / TOUCHSCREEN_X;
   4048c:	e0bffc17 	ldw	r2,-16(fp)
   40490:	1080000b 	ldhu	r2,0(r2)
   40494:	10bfffcc 	andi	r2,r2,65535
   40498:	0140a004 	movi	r5,640
   4049c:	1009883a 	mov	r4,r2
   404a0:	00407a00 	call	407a0 <__mulsi3>
   404a4:	0143ffc4 	movi	r5,4095
   404a8:	1009883a 	mov	r4,r2
   404ac:	00405ec0 	call	405ec <__divsi3>
   404b0:	1007883a 	mov	r3,r2
   404b4:	e0bffd17 	ldw	r2,-12(fp)
   404b8:	10c0000d 	sth	r3,0(r2)
  *new_y = *y * VGA_Y / TOUCHSCREEN_Y;
   404bc:	e0bffe17 	ldw	r2,-8(fp)
   404c0:	1080000b 	ldhu	r2,0(r2)
   404c4:	10bfffcc 	andi	r2,r2,65535
   404c8:	01407804 	movi	r5,480
   404cc:	1009883a 	mov	r4,r2
   404d0:	00407a00 	call	407a0 <__mulsi3>
   404d4:	0143ffc4 	movi	r5,4095
   404d8:	1009883a 	mov	r4,r2
   404dc:	00405ec0 	call	405ec <__divsi3>
   404e0:	1007883a 	mov	r3,r2
   404e4:	e0bfff17 	ldw	r2,-4(fp)
   404e8:	10c0000d 	sth	r3,0(r2)
}
   404ec:	0001883a 	nop
   404f0:	e037883a 	mov	sp,fp
   404f4:	dfc00117 	ldw	ra,4(sp)
   404f8:	df000017 	ldw	fp,0(sp)
   404fc:	dec00204 	addi	sp,sp,8
   40500:	f800283a 	ret

00040504 <clearVGA>:

void clearVGA(volatile unsigned short * vga_base, unsigned short colour)
{
   40504:	defffc04 	addi	sp,sp,-16
   40508:	df000315 	stw	fp,12(sp)
   4050c:	df000304 	addi	fp,sp,12
   40510:	e13ffe15 	stw	r4,-8(fp)
   40514:	2805883a 	mov	r2,r5
   40518:	e0bfff0d 	sth	r2,-4(fp)
  for (int i = 0; i < VGA_X * VGA_Y; i++)
   4051c:	e03ffd15 	stw	zero,-12(fp)
   40520:	00000a06 	br	4054c <clearVGA+0x48>
      *(vga_base + i) = colour;
   40524:	e0bffd17 	ldw	r2,-12(fp)
   40528:	1085883a 	add	r2,r2,r2
   4052c:	1007883a 	mov	r3,r2
   40530:	e0bffe17 	ldw	r2,-8(fp)
   40534:	10c5883a 	add	r2,r2,r3
   40538:	e0ffff0b 	ldhu	r3,-4(fp)
   4053c:	10c0000d 	sth	r3,0(r2)
  *new_y = *y * VGA_Y / TOUCHSCREEN_Y;
}

void clearVGA(volatile unsigned short * vga_base, unsigned short colour)
{
  for (int i = 0; i < VGA_X * VGA_Y; i++)
   40540:	e0bffd17 	ldw	r2,-12(fp)
   40544:	10800044 	addi	r2,r2,1
   40548:	e0bffd15 	stw	r2,-12(fp)
   4054c:	e0fffd17 	ldw	r3,-12(fp)
   40550:	00800174 	movhi	r2,5
   40554:	10abffc4 	addi	r2,r2,-20481
   40558:	10fff20e 	bge	r2,r3,40524 <__alt_data_end+0xf4040524>
      *(vga_base + i) = colour;
}
   4055c:	0001883a 	nop
   40560:	e037883a 	mov	sp,fp
   40564:	df000017 	ldw	fp,0(sp)
   40568:	dec00104 	addi	sp,sp,4
   4056c:	f800283a 	ret

00040570 <paintPixel>:

inline void paintPixel (volatile unsigned short * vga_base, unsigned short x, unsigned short y, unsigned short colour)
{
   40570:	defff904 	addi	sp,sp,-28
   40574:	dfc00615 	stw	ra,24(sp)
   40578:	df000515 	stw	fp,20(sp)
   4057c:	dc000415 	stw	r16,16(sp)
   40580:	df000504 	addi	fp,sp,20
   40584:	e13ffb15 	stw	r4,-20(fp)
   40588:	2809883a 	mov	r4,r5
   4058c:	3007883a 	mov	r3,r6
   40590:	3805883a 	mov	r2,r7
   40594:	e13ffc0d 	sth	r4,-16(fp)
   40598:	e0fffd0d 	sth	r3,-12(fp)
   4059c:	e0bffe0d 	sth	r2,-8(fp)
  vga_base[x + VGA_X * y] = colour;
   405a0:	e43ffc0b 	ldhu	r16,-16(fp)
   405a4:	e0bffd0b 	ldhu	r2,-12(fp)
   405a8:	0140a004 	movi	r5,640
   405ac:	1009883a 	mov	r4,r2
   405b0:	00407a00 	call	407a0 <__mulsi3>
   405b4:	8085883a 	add	r2,r16,r2
   405b8:	1085883a 	add	r2,r2,r2
   405bc:	1007883a 	mov	r3,r2
   405c0:	e0bffb17 	ldw	r2,-20(fp)
   405c4:	10c5883a 	add	r2,r2,r3
   405c8:	e0fffe0b 	ldhu	r3,-8(fp)
   405cc:	10c0000d 	sth	r3,0(r2)
}
   405d0:	0001883a 	nop
   405d4:	e6ffff04 	addi	sp,fp,-4
   405d8:	dfc00217 	ldw	ra,8(sp)
   405dc:	df000117 	ldw	fp,4(sp)
   405e0:	dc000017 	ldw	r16,0(sp)
   405e4:	dec00304 	addi	sp,sp,12
   405e8:	f800283a 	ret

000405ec <__divsi3>:
   405ec:	20001b16 	blt	r4,zero,4065c <__divsi3+0x70>
   405f0:	000f883a 	mov	r7,zero
   405f4:	28001616 	blt	r5,zero,40650 <__divsi3+0x64>
   405f8:	200d883a 	mov	r6,r4
   405fc:	29001a2e 	bgeu	r5,r4,40668 <__divsi3+0x7c>
   40600:	00800804 	movi	r2,32
   40604:	00c00044 	movi	r3,1
   40608:	00000106 	br	40610 <__divsi3+0x24>
   4060c:	10000d26 	beq	r2,zero,40644 <__divsi3+0x58>
   40610:	294b883a 	add	r5,r5,r5
   40614:	10bfffc4 	addi	r2,r2,-1
   40618:	18c7883a 	add	r3,r3,r3
   4061c:	293ffb36 	bltu	r5,r4,4060c <__alt_data_end+0xf404060c>
   40620:	0005883a 	mov	r2,zero
   40624:	18000726 	beq	r3,zero,40644 <__divsi3+0x58>
   40628:	0005883a 	mov	r2,zero
   4062c:	31400236 	bltu	r6,r5,40638 <__divsi3+0x4c>
   40630:	314dc83a 	sub	r6,r6,r5
   40634:	10c4b03a 	or	r2,r2,r3
   40638:	1806d07a 	srli	r3,r3,1
   4063c:	280ad07a 	srli	r5,r5,1
   40640:	183ffa1e 	bne	r3,zero,4062c <__alt_data_end+0xf404062c>
   40644:	38000126 	beq	r7,zero,4064c <__divsi3+0x60>
   40648:	0085c83a 	sub	r2,zero,r2
   4064c:	f800283a 	ret
   40650:	014bc83a 	sub	r5,zero,r5
   40654:	39c0005c 	xori	r7,r7,1
   40658:	003fe706 	br	405f8 <__alt_data_end+0xf40405f8>
   4065c:	0109c83a 	sub	r4,zero,r4
   40660:	01c00044 	movi	r7,1
   40664:	003fe306 	br	405f4 <__alt_data_end+0xf40405f4>
   40668:	00c00044 	movi	r3,1
   4066c:	003fee06 	br	40628 <__alt_data_end+0xf4040628>

00040670 <__modsi3>:
   40670:	20001716 	blt	r4,zero,406d0 <__modsi3+0x60>
   40674:	000f883a 	mov	r7,zero
   40678:	2005883a 	mov	r2,r4
   4067c:	28001216 	blt	r5,zero,406c8 <__modsi3+0x58>
   40680:	2900162e 	bgeu	r5,r4,406dc <__modsi3+0x6c>
   40684:	01800804 	movi	r6,32
   40688:	00c00044 	movi	r3,1
   4068c:	00000106 	br	40694 <__modsi3+0x24>
   40690:	30000a26 	beq	r6,zero,406bc <__modsi3+0x4c>
   40694:	294b883a 	add	r5,r5,r5
   40698:	31bfffc4 	addi	r6,r6,-1
   4069c:	18c7883a 	add	r3,r3,r3
   406a0:	293ffb36 	bltu	r5,r4,40690 <__alt_data_end+0xf4040690>
   406a4:	18000526 	beq	r3,zero,406bc <__modsi3+0x4c>
   406a8:	1806d07a 	srli	r3,r3,1
   406ac:	11400136 	bltu	r2,r5,406b4 <__modsi3+0x44>
   406b0:	1145c83a 	sub	r2,r2,r5
   406b4:	280ad07a 	srli	r5,r5,1
   406b8:	183ffb1e 	bne	r3,zero,406a8 <__alt_data_end+0xf40406a8>
   406bc:	38000126 	beq	r7,zero,406c4 <__modsi3+0x54>
   406c0:	0085c83a 	sub	r2,zero,r2
   406c4:	f800283a 	ret
   406c8:	014bc83a 	sub	r5,zero,r5
   406cc:	003fec06 	br	40680 <__alt_data_end+0xf4040680>
   406d0:	0109c83a 	sub	r4,zero,r4
   406d4:	01c00044 	movi	r7,1
   406d8:	003fe706 	br	40678 <__alt_data_end+0xf4040678>
   406dc:	00c00044 	movi	r3,1
   406e0:	003ff106 	br	406a8 <__alt_data_end+0xf40406a8>

000406e4 <__udivsi3>:
   406e4:	200d883a 	mov	r6,r4
   406e8:	2900152e 	bgeu	r5,r4,40740 <__udivsi3+0x5c>
   406ec:	28001416 	blt	r5,zero,40740 <__udivsi3+0x5c>
   406f0:	00800804 	movi	r2,32
   406f4:	00c00044 	movi	r3,1
   406f8:	00000206 	br	40704 <__udivsi3+0x20>
   406fc:	10000e26 	beq	r2,zero,40738 <__udivsi3+0x54>
   40700:	28000516 	blt	r5,zero,40718 <__udivsi3+0x34>
   40704:	294b883a 	add	r5,r5,r5
   40708:	10bfffc4 	addi	r2,r2,-1
   4070c:	18c7883a 	add	r3,r3,r3
   40710:	293ffa36 	bltu	r5,r4,406fc <__alt_data_end+0xf40406fc>
   40714:	18000826 	beq	r3,zero,40738 <__udivsi3+0x54>
   40718:	0005883a 	mov	r2,zero
   4071c:	31400236 	bltu	r6,r5,40728 <__udivsi3+0x44>
   40720:	314dc83a 	sub	r6,r6,r5
   40724:	10c4b03a 	or	r2,r2,r3
   40728:	1806d07a 	srli	r3,r3,1
   4072c:	280ad07a 	srli	r5,r5,1
   40730:	183ffa1e 	bne	r3,zero,4071c <__alt_data_end+0xf404071c>
   40734:	f800283a 	ret
   40738:	0005883a 	mov	r2,zero
   4073c:	f800283a 	ret
   40740:	00c00044 	movi	r3,1
   40744:	003ff406 	br	40718 <__alt_data_end+0xf4040718>

00040748 <__umodsi3>:
   40748:	2005883a 	mov	r2,r4
   4074c:	2900122e 	bgeu	r5,r4,40798 <__umodsi3+0x50>
   40750:	28001116 	blt	r5,zero,40798 <__umodsi3+0x50>
   40754:	01800804 	movi	r6,32
   40758:	00c00044 	movi	r3,1
   4075c:	00000206 	br	40768 <__umodsi3+0x20>
   40760:	30000c26 	beq	r6,zero,40794 <__umodsi3+0x4c>
   40764:	28000516 	blt	r5,zero,4077c <__umodsi3+0x34>
   40768:	294b883a 	add	r5,r5,r5
   4076c:	31bfffc4 	addi	r6,r6,-1
   40770:	18c7883a 	add	r3,r3,r3
   40774:	293ffa36 	bltu	r5,r4,40760 <__alt_data_end+0xf4040760>
   40778:	18000626 	beq	r3,zero,40794 <__umodsi3+0x4c>
   4077c:	1806d07a 	srli	r3,r3,1
   40780:	11400136 	bltu	r2,r5,40788 <__umodsi3+0x40>
   40784:	1145c83a 	sub	r2,r2,r5
   40788:	280ad07a 	srli	r5,r5,1
   4078c:	183ffb1e 	bne	r3,zero,4077c <__alt_data_end+0xf404077c>
   40790:	f800283a 	ret
   40794:	f800283a 	ret
   40798:	00c00044 	movi	r3,1
   4079c:	003ff706 	br	4077c <__alt_data_end+0xf404077c>

000407a0 <__mulsi3>:
   407a0:	0005883a 	mov	r2,zero
   407a4:	20000726 	beq	r4,zero,407c4 <__mulsi3+0x24>
   407a8:	20c0004c 	andi	r3,r4,1
   407ac:	2008d07a 	srli	r4,r4,1
   407b0:	18000126 	beq	r3,zero,407b8 <__mulsi3+0x18>
   407b4:	1145883a 	add	r2,r2,r5
   407b8:	294b883a 	add	r5,r5,r5
   407bc:	203ffa1e 	bne	r4,zero,407a8 <__alt_data_end+0xf40407a8>
   407c0:	f800283a 	ret
   407c4:	f800283a 	ret

000407c8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   407c8:	defffc04 	addi	sp,sp,-16
   407cc:	df000315 	stw	fp,12(sp)
   407d0:	df000304 	addi	fp,sp,12
   407d4:	e13ffd15 	stw	r4,-12(fp)
   407d8:	e17ffe15 	stw	r5,-8(fp)
   407dc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   407e0:	e0fffe17 	ldw	r3,-8(fp)
   407e4:	e0bffd17 	ldw	r2,-12(fp)
   407e8:	18800c26 	beq	r3,r2,4081c <alt_load_section+0x54>
  {
    while( to != end )
   407ec:	00000806 	br	40810 <alt_load_section+0x48>
    {
      *to++ = *from++;
   407f0:	e0bffe17 	ldw	r2,-8(fp)
   407f4:	10c00104 	addi	r3,r2,4
   407f8:	e0fffe15 	stw	r3,-8(fp)
   407fc:	e0fffd17 	ldw	r3,-12(fp)
   40800:	19000104 	addi	r4,r3,4
   40804:	e13ffd15 	stw	r4,-12(fp)
   40808:	18c00017 	ldw	r3,0(r3)
   4080c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   40810:	e0fffe17 	ldw	r3,-8(fp)
   40814:	e0bfff17 	ldw	r2,-4(fp)
   40818:	18bff51e 	bne	r3,r2,407f0 <__alt_data_end+0xf40407f0>
    {
      *to++ = *from++;
    }
  }
}
   4081c:	0001883a 	nop
   40820:	e037883a 	mov	sp,fp
   40824:	df000017 	ldw	fp,0(sp)
   40828:	dec00104 	addi	sp,sp,4
   4082c:	f800283a 	ret

00040830 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   40830:	defffe04 	addi	sp,sp,-8
   40834:	dfc00115 	stw	ra,4(sp)
   40838:	df000015 	stw	fp,0(sp)
   4083c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   40840:	01820034 	movhi	r6,2048
   40844:	31870404 	addi	r6,r6,7184
   40848:	01420034 	movhi	r5,2048
   4084c:	29402d04 	addi	r5,r5,180
   40850:	01000134 	movhi	r4,4
   40854:	21182604 	addi	r4,r4,24728
   40858:	00407c80 	call	407c8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   4085c:	01800134 	movhi	r6,4
   40860:	31808d04 	addi	r6,r6,564
   40864:	01400134 	movhi	r5,4
   40868:	29400804 	addi	r5,r5,32
   4086c:	01000134 	movhi	r4,4
   40870:	21000804 	addi	r4,r4,32
   40874:	00407c80 	call	407c8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   40878:	01820034 	movhi	r6,2048
   4087c:	31802d04 	addi	r6,r6,180
   40880:	01420034 	movhi	r5,2048
   40884:	29400004 	addi	r5,r5,0
   40888:	01000134 	movhi	r4,4
   4088c:	2117f904 	addi	r4,r4,24548
   40890:	00407c80 	call	407c8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   40894:	0041d240 	call	41d24 <alt_dcache_flush_all>
  alt_icache_flush_all();
   40898:	0041fa00 	call	41fa0 <alt_icache_flush_all>
}
   4089c:	0001883a 	nop
   408a0:	e037883a 	mov	sp,fp
   408a4:	dfc00117 	ldw	ra,4(sp)
   408a8:	df000017 	ldw	fp,0(sp)
   408ac:	dec00204 	addi	sp,sp,8
   408b0:	f800283a 	ret

000408b4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   408b4:	defffd04 	addi	sp,sp,-12
   408b8:	dfc00215 	stw	ra,8(sp)
   408bc:	df000115 	stw	fp,4(sp)
   408c0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   408c4:	0009883a 	mov	r4,zero
   408c8:	00409a00 	call	409a0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   408cc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   408d0:	00409d80 	call	409d8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   408d4:	01820034 	movhi	r6,2048
   408d8:	31800604 	addi	r6,r6,24
   408dc:	01420034 	movhi	r5,2048
   408e0:	29400604 	addi	r5,r5,24
   408e4:	01020034 	movhi	r4,2048
   408e8:	21000604 	addi	r4,r4,24
   408ec:	00420a40 	call	420a4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   408f0:	0041e500 	call	41e50 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   408f4:	01000134 	movhi	r4,4
   408f8:	2107ac04 	addi	r4,r4,7856
   408fc:	00429d80 	call	429d8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   40900:	d0a00e17 	ldw	r2,-32712(gp)
   40904:	d0e00f17 	ldw	r3,-32708(gp)
   40908:	d1201017 	ldw	r4,-32704(gp)
   4090c:	200d883a 	mov	r6,r4
   40910:	180b883a 	mov	r5,r3
   40914:	1009883a 	mov	r4,r2
   40918:	00402700 	call	40270 <main>
   4091c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   40920:	01000044 	movi	r4,1
   40924:	0041c4c0 	call	41c4c <close>
  exit (result);
   40928:	e13fff17 	ldw	r4,-4(fp)
   4092c:	00429ec0 	call	429ec <exit>

00040930 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
   40930:	defffd04 	addi	sp,sp,-12
   40934:	dfc00215 	stw	ra,8(sp)
   40938:	df000115 	stw	fp,4(sp)
   4093c:	df000104 	addi	fp,sp,4
   40940:	e13fff15 	stw	r4,-4(fp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
#else
    return fputs(str, stdout);
   40944:	d0a00a17 	ldw	r2,-32728(gp)
   40948:	10800217 	ldw	r2,8(r2)
   4094c:	100b883a 	mov	r5,r2
   40950:	e13fff17 	ldw	r4,-4(fp)
   40954:	0042ac00 	call	42ac0 <fputs>
#endif
#endif
}
   40958:	e037883a 	mov	sp,fp
   4095c:	dfc00117 	ldw	ra,4(sp)
   40960:	df000017 	ldw	fp,0(sp)
   40964:	dec00204 	addi	sp,sp,8
   40968:	f800283a 	ret

0004096c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   4096c:	defffd04 	addi	sp,sp,-12
   40970:	dfc00215 	stw	ra,8(sp)
   40974:	df000115 	stw	fp,4(sp)
   40978:	df000104 	addi	fp,sp,4
   4097c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   40980:	d1600204 	addi	r5,gp,-32760
   40984:	e13fff17 	ldw	r4,-4(fp)
   40988:	0041dac0 	call	41dac <alt_dev_llist_insert>
}
   4098c:	e037883a 	mov	sp,fp
   40990:	dfc00117 	ldw	ra,4(sp)
   40994:	df000017 	ldw	fp,0(sp)
   40998:	dec00204 	addi	sp,sp,8
   4099c:	f800283a 	ret

000409a0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   409a0:	defffd04 	addi	sp,sp,-12
   409a4:	dfc00215 	stw	ra,8(sp)
   409a8:	df000115 	stw	fp,4(sp)
   409ac:	df000104 	addi	fp,sp,4
   409b0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   409b4:	004274c0 	call	4274c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   409b8:	00800044 	movi	r2,1
   409bc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   409c0:	0001883a 	nop
   409c4:	e037883a 	mov	sp,fp
   409c8:	dfc00117 	ldw	ra,4(sp)
   409cc:	df000017 	ldw	fp,0(sp)
   409d0:	dec00204 	addi	sp,sp,8
   409d4:	f800283a 	ret

000409d8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   409d8:	defffd04 	addi	sp,sp,-12
   409dc:	dfc00215 	stw	ra,8(sp)
   409e0:	df000115 	stw	fp,4(sp)
   409e4:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   409e8:	01800084 	movi	r6,2
   409ec:	000b883a 	mov	r5,zero
   409f0:	01020034 	movhi	r4,2048
   409f4:	21003704 	addi	r4,r4,220
   409f8:	0040e580 	call	40e58 <altera_avalon_jtag_uart_init>
   409fc:	01020034 	movhi	r4,2048
   40a00:	21002d04 	addi	r4,r4,180
   40a04:	004096c0 	call	4096c <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( TOUCHSCREEN_UART, touchscreen_uart);
   40a08:	01020034 	movhi	r4,2048
   40a0c:	21044504 	addi	r4,r4,4372
   40a10:	004096c0 	call	4096c <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( WIFI_UART, wifi_uart);
   40a14:	01020034 	movhi	r4,2048
   40a18:	21045004 	addi	r4,r4,4416
   40a1c:	004096c0 	call	4096c <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VIDEO_PIXEL_BUFFER_DMA_0, video_pixel_buffer_dma_0);
   40a20:	00820034 	movhi	r2,2048
   40a24:	10845b04 	addi	r2,r2,4460
   40a28:	10800a17 	ldw	r2,40(r2)
   40a2c:	10800017 	ldw	r2,0(r2)
   40a30:	1007883a 	mov	r3,r2
   40a34:	00820034 	movhi	r2,2048
   40a38:	10845b04 	addi	r2,r2,4460
   40a3c:	10c00b15 	stw	r3,44(r2)
   40a40:	00820034 	movhi	r2,2048
   40a44:	10845b04 	addi	r2,r2,4460
   40a48:	10800a17 	ldw	r2,40(r2)
   40a4c:	10800104 	addi	r2,r2,4
   40a50:	10800017 	ldw	r2,0(r2)
   40a54:	1007883a 	mov	r3,r2
   40a58:	00820034 	movhi	r2,2048
   40a5c:	10845b04 	addi	r2,r2,4460
   40a60:	10c00c15 	stw	r3,48(r2)
   40a64:	00820034 	movhi	r2,2048
   40a68:	10845b04 	addi	r2,r2,4460
   40a6c:	10800a17 	ldw	r2,40(r2)
   40a70:	10800204 	addi	r2,r2,8
   40a74:	10800017 	ldw	r2,0(r2)
   40a78:	10ffffcc 	andi	r3,r2,65535
   40a7c:	00820034 	movhi	r2,2048
   40a80:	10845b04 	addi	r2,r2,4460
   40a84:	10c00f15 	stw	r3,60(r2)
   40a88:	00820034 	movhi	r2,2048
   40a8c:	10845b04 	addi	r2,r2,4460
   40a90:	10800a17 	ldw	r2,40(r2)
   40a94:	10800204 	addi	r2,r2,8
   40a98:	10800017 	ldw	r2,0(r2)
   40a9c:	1006d43a 	srli	r3,r2,16
   40aa0:	00820034 	movhi	r2,2048
   40aa4:	10845b04 	addi	r2,r2,4460
   40aa8:	10c01015 	stw	r3,64(r2)
   40aac:	00820034 	movhi	r2,2048
   40ab0:	10845b04 	addi	r2,r2,4460
   40ab4:	10800a17 	ldw	r2,40(r2)
   40ab8:	10800304 	addi	r2,r2,12
   40abc:	10800017 	ldw	r2,0(r2)
   40ac0:	1005d07a 	srai	r2,r2,1
   40ac4:	10c0004c 	andi	r3,r2,1
   40ac8:	00820034 	movhi	r2,2048
   40acc:	10845b04 	addi	r2,r2,4460
   40ad0:	10c00d15 	stw	r3,52(r2)
   40ad4:	00820034 	movhi	r2,2048
   40ad8:	10845b04 	addi	r2,r2,4460
   40adc:	10800a17 	ldw	r2,40(r2)
   40ae0:	10800304 	addi	r2,r2,12
   40ae4:	10800017 	ldw	r2,0(r2)
   40ae8:	1005d13a 	srai	r2,r2,4
   40aec:	10c003cc 	andi	r3,r2,15
   40af0:	00820034 	movhi	r2,2048
   40af4:	10845b04 	addi	r2,r2,4460
   40af8:	10c00e15 	stw	r3,56(r2)
   40afc:	00820034 	movhi	r2,2048
   40b00:	10845b04 	addi	r2,r2,4460
   40b04:	10800a17 	ldw	r2,40(r2)
   40b08:	10800304 	addi	r2,r2,12
   40b0c:	10800017 	ldw	r2,0(r2)
   40b10:	1005d43a 	srai	r2,r2,16
   40b14:	e0bfff05 	stb	r2,-4(fp)
   40b18:	00820034 	movhi	r2,2048
   40b1c:	10845b04 	addi	r2,r2,4460
   40b20:	10800a17 	ldw	r2,40(r2)
   40b24:	10800304 	addi	r2,r2,12
   40b28:	10800017 	ldw	r2,0(r2)
   40b2c:	1004d63a 	srli	r2,r2,24
   40b30:	e0bfff45 	stb	r2,-3(fp)
   40b34:	00820034 	movhi	r2,2048
   40b38:	10845b04 	addi	r2,r2,4460
   40b3c:	10800e17 	ldw	r2,56(r2)
   40b40:	10800058 	cmpnei	r2,r2,1
   40b44:	1000041e 	bne	r2,zero,40b58 <alt_sys_init+0x180>
   40b48:	00820034 	movhi	r2,2048
   40b4c:	10845b04 	addi	r2,r2,4460
   40b50:	10001115 	stw	zero,68(r2)
   40b54:	00000e06 	br	40b90 <alt_sys_init+0x1b8>
   40b58:	00820034 	movhi	r2,2048
   40b5c:	10845b04 	addi	r2,r2,4460
   40b60:	10800e17 	ldw	r2,56(r2)
   40b64:	10800098 	cmpnei	r2,r2,2
   40b68:	1000051e 	bne	r2,zero,40b80 <alt_sys_init+0x1a8>
   40b6c:	00820034 	movhi	r2,2048
   40b70:	10845b04 	addi	r2,r2,4460
   40b74:	00c00044 	movi	r3,1
   40b78:	10c01115 	stw	r3,68(r2)
   40b7c:	00000406 	br	40b90 <alt_sys_init+0x1b8>
   40b80:	00820034 	movhi	r2,2048
   40b84:	10845b04 	addi	r2,r2,4460
   40b88:	00c00084 	movi	r3,2
   40b8c:	10c01115 	stw	r3,68(r2)
   40b90:	e0bfff03 	ldbu	r2,-4(fp)
   40b94:	00c00804 	movi	r3,32
   40b98:	1885c83a 	sub	r2,r3,r2
   40b9c:	00ffffc4 	movi	r3,-1
   40ba0:	1886d83a 	srl	r3,r3,r2
   40ba4:	00820034 	movhi	r2,2048
   40ba8:	10845b04 	addi	r2,r2,4460
   40bac:	10c01215 	stw	r3,72(r2)
   40bb0:	e0ffff03 	ldbu	r3,-4(fp)
   40bb4:	00820034 	movhi	r2,2048
   40bb8:	10845b04 	addi	r2,r2,4460
   40bbc:	10801117 	ldw	r2,68(r2)
   40bc0:	1887883a 	add	r3,r3,r2
   40bc4:	00820034 	movhi	r2,2048
   40bc8:	10845b04 	addi	r2,r2,4460
   40bcc:	10c01315 	stw	r3,76(r2)
   40bd0:	e0bfff43 	ldbu	r2,-3(fp)
   40bd4:	00c00804 	movi	r3,32
   40bd8:	1885c83a 	sub	r2,r3,r2
   40bdc:	00ffffc4 	movi	r3,-1
   40be0:	1886d83a 	srl	r3,r3,r2
   40be4:	00820034 	movhi	r2,2048
   40be8:	10845b04 	addi	r2,r2,4460
   40bec:	10c01415 	stw	r3,80(r2)
   40bf0:	01020034 	movhi	r4,2048
   40bf4:	21045b04 	addi	r4,r4,4460
   40bf8:	004096c0 	call	4096c <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_RGB_RESAMPLER_INIT ( VIDEO_RGB_RESAMPLER_0, video_rgb_resampler_0);
   40bfc:	00820034 	movhi	r2,2048
   40c00:	10847004 	addi	r2,r2,4544
   40c04:	10800a17 	ldw	r2,40(r2)
   40c08:	10800017 	ldw	r2,0(r2)
   40c0c:	10c003cc 	andi	r3,r2,15
   40c10:	00820034 	movhi	r2,2048
   40c14:	10847004 	addi	r2,r2,4544
   40c18:	10c00b15 	stw	r3,44(r2)
   40c1c:	00820034 	movhi	r2,2048
   40c20:	10847004 	addi	r2,r2,4544
   40c24:	10800a17 	ldw	r2,40(r2)
   40c28:	10800017 	ldw	r2,0(r2)
   40c2c:	1005d13a 	srai	r2,r2,4
   40c30:	10c0004c 	andi	r3,r2,1
   40c34:	00820034 	movhi	r2,2048
   40c38:	10847004 	addi	r2,r2,4544
   40c3c:	10c00c15 	stw	r3,48(r2)
   40c40:	00820034 	movhi	r2,2048
   40c44:	10847004 	addi	r2,r2,4544
   40c48:	10800a17 	ldw	r2,40(r2)
   40c4c:	10800017 	ldw	r2,0(r2)
   40c50:	1005d17a 	srai	r2,r2,5
   40c54:	10c0004c 	andi	r3,r2,1
   40c58:	00820034 	movhi	r2,2048
   40c5c:	10847004 	addi	r2,r2,4544
   40c60:	10c00d15 	stw	r3,52(r2)
   40c64:	00820034 	movhi	r2,2048
   40c68:	10847004 	addi	r2,r2,4544
   40c6c:	10800a17 	ldw	r2,40(r2)
   40c70:	10800017 	ldw	r2,0(r2)
   40c74:	1005d43a 	srai	r2,r2,16
   40c78:	10c003cc 	andi	r3,r2,15
   40c7c:	00820034 	movhi	r2,2048
   40c80:	10847004 	addi	r2,r2,4544
   40c84:	10c00e15 	stw	r3,56(r2)
   40c88:	00820034 	movhi	r2,2048
   40c8c:	10847004 	addi	r2,r2,4544
   40c90:	10800a17 	ldw	r2,40(r2)
   40c94:	10800017 	ldw	r2,0(r2)
   40c98:	1005d53a 	srai	r2,r2,20
   40c9c:	10c0004c 	andi	r3,r2,1
   40ca0:	00820034 	movhi	r2,2048
   40ca4:	10847004 	addi	r2,r2,4544
   40ca8:	10c00f15 	stw	r3,60(r2)
   40cac:	00820034 	movhi	r2,2048
   40cb0:	10847004 	addi	r2,r2,4544
   40cb4:	10800a17 	ldw	r2,40(r2)
   40cb8:	10800017 	ldw	r2,0(r2)
   40cbc:	1005d57a 	srai	r2,r2,21
   40cc0:	10c0004c 	andi	r3,r2,1
   40cc4:	00820034 	movhi	r2,2048
   40cc8:	10847004 	addi	r2,r2,4544
   40ccc:	10c01015 	stw	r3,64(r2)
   40cd0:	01020034 	movhi	r4,2048
   40cd4:	21047004 	addi	r4,r4,4544
   40cd8:	004096c0 	call	4096c <alt_dev_reg>
}
   40cdc:	0001883a 	nop
   40ce0:	e037883a 	mov	sp,fp
   40ce4:	dfc00117 	ldw	ra,4(sp)
   40ce8:	df000017 	ldw	fp,0(sp)
   40cec:	dec00204 	addi	sp,sp,8
   40cf0:	f800283a 	ret

00040cf4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   40cf4:	defffa04 	addi	sp,sp,-24
   40cf8:	dfc00515 	stw	ra,20(sp)
   40cfc:	df000415 	stw	fp,16(sp)
   40d00:	df000404 	addi	fp,sp,16
   40d04:	e13ffd15 	stw	r4,-12(fp)
   40d08:	e17ffe15 	stw	r5,-8(fp)
   40d0c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   40d10:	e0bffd17 	ldw	r2,-12(fp)
   40d14:	10800017 	ldw	r2,0(r2)
   40d18:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   40d1c:	e0bffc17 	ldw	r2,-16(fp)
   40d20:	10c00a04 	addi	r3,r2,40
   40d24:	e0bffd17 	ldw	r2,-12(fp)
   40d28:	10800217 	ldw	r2,8(r2)
   40d2c:	100f883a 	mov	r7,r2
   40d30:	e1bfff17 	ldw	r6,-4(fp)
   40d34:	e17ffe17 	ldw	r5,-8(fp)
   40d38:	1809883a 	mov	r4,r3
   40d3c:	00413140 	call	41314 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   40d40:	e037883a 	mov	sp,fp
   40d44:	dfc00117 	ldw	ra,4(sp)
   40d48:	df000017 	ldw	fp,0(sp)
   40d4c:	dec00204 	addi	sp,sp,8
   40d50:	f800283a 	ret

00040d54 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   40d54:	defffa04 	addi	sp,sp,-24
   40d58:	dfc00515 	stw	ra,20(sp)
   40d5c:	df000415 	stw	fp,16(sp)
   40d60:	df000404 	addi	fp,sp,16
   40d64:	e13ffd15 	stw	r4,-12(fp)
   40d68:	e17ffe15 	stw	r5,-8(fp)
   40d6c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   40d70:	e0bffd17 	ldw	r2,-12(fp)
   40d74:	10800017 	ldw	r2,0(r2)
   40d78:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   40d7c:	e0bffc17 	ldw	r2,-16(fp)
   40d80:	10c00a04 	addi	r3,r2,40
   40d84:	e0bffd17 	ldw	r2,-12(fp)
   40d88:	10800217 	ldw	r2,8(r2)
   40d8c:	100f883a 	mov	r7,r2
   40d90:	e1bfff17 	ldw	r6,-4(fp)
   40d94:	e17ffe17 	ldw	r5,-8(fp)
   40d98:	1809883a 	mov	r4,r3
   40d9c:	00415300 	call	41530 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   40da0:	e037883a 	mov	sp,fp
   40da4:	dfc00117 	ldw	ra,4(sp)
   40da8:	df000017 	ldw	fp,0(sp)
   40dac:	dec00204 	addi	sp,sp,8
   40db0:	f800283a 	ret

00040db4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   40db4:	defffc04 	addi	sp,sp,-16
   40db8:	dfc00315 	stw	ra,12(sp)
   40dbc:	df000215 	stw	fp,8(sp)
   40dc0:	df000204 	addi	fp,sp,8
   40dc4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   40dc8:	e0bfff17 	ldw	r2,-4(fp)
   40dcc:	10800017 	ldw	r2,0(r2)
   40dd0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   40dd4:	e0bffe17 	ldw	r2,-8(fp)
   40dd8:	10c00a04 	addi	r3,r2,40
   40ddc:	e0bfff17 	ldw	r2,-4(fp)
   40de0:	10800217 	ldw	r2,8(r2)
   40de4:	100b883a 	mov	r5,r2
   40de8:	1809883a 	mov	r4,r3
   40dec:	00411bc0 	call	411bc <altera_avalon_jtag_uart_close>
}
   40df0:	e037883a 	mov	sp,fp
   40df4:	dfc00117 	ldw	ra,4(sp)
   40df8:	df000017 	ldw	fp,0(sp)
   40dfc:	dec00204 	addi	sp,sp,8
   40e00:	f800283a 	ret

00040e04 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   40e04:	defffa04 	addi	sp,sp,-24
   40e08:	dfc00515 	stw	ra,20(sp)
   40e0c:	df000415 	stw	fp,16(sp)
   40e10:	df000404 	addi	fp,sp,16
   40e14:	e13ffd15 	stw	r4,-12(fp)
   40e18:	e17ffe15 	stw	r5,-8(fp)
   40e1c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   40e20:	e0bffd17 	ldw	r2,-12(fp)
   40e24:	10800017 	ldw	r2,0(r2)
   40e28:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   40e2c:	e0bffc17 	ldw	r2,-16(fp)
   40e30:	10800a04 	addi	r2,r2,40
   40e34:	e1bfff17 	ldw	r6,-4(fp)
   40e38:	e17ffe17 	ldw	r5,-8(fp)
   40e3c:	1009883a 	mov	r4,r2
   40e40:	00412240 	call	41224 <altera_avalon_jtag_uart_ioctl>
}
   40e44:	e037883a 	mov	sp,fp
   40e48:	dfc00117 	ldw	ra,4(sp)
   40e4c:	df000017 	ldw	fp,0(sp)
   40e50:	dec00204 	addi	sp,sp,8
   40e54:	f800283a 	ret

00040e58 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   40e58:	defffb04 	addi	sp,sp,-20
   40e5c:	dfc00415 	stw	ra,16(sp)
   40e60:	df000315 	stw	fp,12(sp)
   40e64:	df000304 	addi	fp,sp,12
   40e68:	e13ffd15 	stw	r4,-12(fp)
   40e6c:	e17ffe15 	stw	r5,-8(fp)
   40e70:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   40e74:	e0bffd17 	ldw	r2,-12(fp)
   40e78:	00c00044 	movi	r3,1
   40e7c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   40e80:	e0bffd17 	ldw	r2,-12(fp)
   40e84:	10800017 	ldw	r2,0(r2)
   40e88:	10800104 	addi	r2,r2,4
   40e8c:	1007883a 	mov	r3,r2
   40e90:	e0bffd17 	ldw	r2,-12(fp)
   40e94:	10800817 	ldw	r2,32(r2)
   40e98:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   40e9c:	e0bfff17 	ldw	r2,-4(fp)
   40ea0:	01800134 	movhi	r6,4
   40ea4:	3183c304 	addi	r6,r6,3852
   40ea8:	e17ffd17 	ldw	r5,-12(fp)
   40eac:	1009883a 	mov	r4,r2
   40eb0:	00421200 	call	42120 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   40eb4:	e0bffd17 	ldw	r2,-12(fp)
   40eb8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   40ebc:	e0bffd17 	ldw	r2,-12(fp)
   40ec0:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   40ec4:	d0e01217 	ldw	r3,-32696(gp)
   40ec8:	e1fffd17 	ldw	r7,-12(fp)
   40ecc:	01800134 	movhi	r6,4
   40ed0:	31844704 	addi	r6,r6,4380
   40ed4:	180b883a 	mov	r5,r3
   40ed8:	1009883a 	mov	r4,r2
   40edc:	0041ae40 	call	41ae4 <alt_alarm_start>
   40ee0:	1000040e 	bge	r2,zero,40ef4 <altera_avalon_jtag_uart_init+0x9c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   40ee4:	e0fffd17 	ldw	r3,-12(fp)
   40ee8:	00a00034 	movhi	r2,32768
   40eec:	10bfffc4 	addi	r2,r2,-1
   40ef0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   40ef4:	0001883a 	nop
   40ef8:	e037883a 	mov	sp,fp
   40efc:	dfc00117 	ldw	ra,4(sp)
   40f00:	df000017 	ldw	fp,0(sp)
   40f04:	dec00204 	addi	sp,sp,8
   40f08:	f800283a 	ret

00040f0c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   40f0c:	defff704 	addi	sp,sp,-36
   40f10:	df000815 	stw	fp,32(sp)
   40f14:	df000804 	addi	fp,sp,32
   40f18:	e13ffe15 	stw	r4,-8(fp)
   40f1c:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   40f20:	e0bffe17 	ldw	r2,-8(fp)
   40f24:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
   40f28:	e0bffa17 	ldw	r2,-24(fp)
   40f2c:	10800017 	ldw	r2,0(r2)
   40f30:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   40f34:	e0bffb17 	ldw	r2,-20(fp)
   40f38:	10800104 	addi	r2,r2,4
   40f3c:	10800037 	ldwio	r2,0(r2)
   40f40:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   40f44:	e0bffc17 	ldw	r2,-16(fp)
   40f48:	1080c00c 	andi	r2,r2,768
   40f4c:	10006d26 	beq	r2,zero,41104 <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   40f50:	e0bffc17 	ldw	r2,-16(fp)
   40f54:	1080400c 	andi	r2,r2,256
   40f58:	10003526 	beq	r2,zero,41030 <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   40f5c:	00800074 	movhi	r2,1
   40f60:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   40f64:	e0bffa17 	ldw	r2,-24(fp)
   40f68:	10800a17 	ldw	r2,40(r2)
   40f6c:	10800044 	addi	r2,r2,1
   40f70:	1081ffcc 	andi	r2,r2,2047
   40f74:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
   40f78:	e0bffa17 	ldw	r2,-24(fp)
   40f7c:	10c00b17 	ldw	r3,44(r2)
   40f80:	e0bffd17 	ldw	r2,-12(fp)
   40f84:	18801526 	beq	r3,r2,40fdc <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   40f88:	e0bffb17 	ldw	r2,-20(fp)
   40f8c:	10800037 	ldwio	r2,0(r2)
   40f90:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   40f94:	e0bff817 	ldw	r2,-32(fp)
   40f98:	10a0000c 	andi	r2,r2,32768
   40f9c:	10001126 	beq	r2,zero,40fe4 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   40fa0:	e0bffa17 	ldw	r2,-24(fp)
   40fa4:	10800a17 	ldw	r2,40(r2)
   40fa8:	e0fff817 	ldw	r3,-32(fp)
   40fac:	1809883a 	mov	r4,r3
   40fb0:	e0fffa17 	ldw	r3,-24(fp)
   40fb4:	1885883a 	add	r2,r3,r2
   40fb8:	10800e04 	addi	r2,r2,56
   40fbc:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   40fc0:	e0bffa17 	ldw	r2,-24(fp)
   40fc4:	10800a17 	ldw	r2,40(r2)
   40fc8:	10800044 	addi	r2,r2,1
   40fcc:	10c1ffcc 	andi	r3,r2,2047
   40fd0:	e0bffa17 	ldw	r2,-24(fp)
   40fd4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   40fd8:	003fe206 	br	40f64 <__alt_data_end+0xf4040f64>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   40fdc:	0001883a 	nop
   40fe0:	00000106 	br	40fe8 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   40fe4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   40fe8:	e0bff817 	ldw	r2,-32(fp)
   40fec:	10bfffec 	andhi	r2,r2,65535
   40ff0:	10000f26 	beq	r2,zero,41030 <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   40ff4:	e0bffa17 	ldw	r2,-24(fp)
   40ff8:	10c00817 	ldw	r3,32(r2)
   40ffc:	00bfff84 	movi	r2,-2
   41000:	1886703a 	and	r3,r3,r2
   41004:	e0bffa17 	ldw	r2,-24(fp)
   41008:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   4100c:	e0bffb17 	ldw	r2,-20(fp)
   41010:	10800104 	addi	r2,r2,4
   41014:	1007883a 	mov	r3,r2
   41018:	e0bffa17 	ldw	r2,-24(fp)
   4101c:	10800817 	ldw	r2,32(r2)
   41020:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   41024:	e0bffb17 	ldw	r2,-20(fp)
   41028:	10800104 	addi	r2,r2,4
   4102c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   41030:	e0bffc17 	ldw	r2,-16(fp)
   41034:	1080800c 	andi	r2,r2,512
   41038:	103fbe26 	beq	r2,zero,40f34 <__alt_data_end+0xf4040f34>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   4103c:	e0bffc17 	ldw	r2,-16(fp)
   41040:	1004d43a 	srli	r2,r2,16
   41044:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   41048:	00001406 	br	4109c <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   4104c:	e0bffb17 	ldw	r2,-20(fp)
   41050:	e0fffa17 	ldw	r3,-24(fp)
   41054:	18c00d17 	ldw	r3,52(r3)
   41058:	e13ffa17 	ldw	r4,-24(fp)
   4105c:	20c7883a 	add	r3,r4,r3
   41060:	18c20e04 	addi	r3,r3,2104
   41064:	18c00003 	ldbu	r3,0(r3)
   41068:	18c03fcc 	andi	r3,r3,255
   4106c:	18c0201c 	xori	r3,r3,128
   41070:	18ffe004 	addi	r3,r3,-128
   41074:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   41078:	e0bffa17 	ldw	r2,-24(fp)
   4107c:	10800d17 	ldw	r2,52(r2)
   41080:	10800044 	addi	r2,r2,1
   41084:	10c1ffcc 	andi	r3,r2,2047
   41088:	e0bffa17 	ldw	r2,-24(fp)
   4108c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   41090:	e0bff917 	ldw	r2,-28(fp)
   41094:	10bfffc4 	addi	r2,r2,-1
   41098:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   4109c:	e0bff917 	ldw	r2,-28(fp)
   410a0:	10000526 	beq	r2,zero,410b8 <altera_avalon_jtag_uart_irq+0x1ac>
   410a4:	e0bffa17 	ldw	r2,-24(fp)
   410a8:	10c00d17 	ldw	r3,52(r2)
   410ac:	e0bffa17 	ldw	r2,-24(fp)
   410b0:	10800c17 	ldw	r2,48(r2)
   410b4:	18bfe51e 	bne	r3,r2,4104c <__alt_data_end+0xf404104c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   410b8:	e0bff917 	ldw	r2,-28(fp)
   410bc:	103f9d26 	beq	r2,zero,40f34 <__alt_data_end+0xf4040f34>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   410c0:	e0bffa17 	ldw	r2,-24(fp)
   410c4:	10c00817 	ldw	r3,32(r2)
   410c8:	00bfff44 	movi	r2,-3
   410cc:	1886703a 	and	r3,r3,r2
   410d0:	e0bffa17 	ldw	r2,-24(fp)
   410d4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   410d8:	e0bffa17 	ldw	r2,-24(fp)
   410dc:	10800017 	ldw	r2,0(r2)
   410e0:	10800104 	addi	r2,r2,4
   410e4:	1007883a 	mov	r3,r2
   410e8:	e0bffa17 	ldw	r2,-24(fp)
   410ec:	10800817 	ldw	r2,32(r2)
   410f0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   410f4:	e0bffb17 	ldw	r2,-20(fp)
   410f8:	10800104 	addi	r2,r2,4
   410fc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   41100:	003f8c06 	br	40f34 <__alt_data_end+0xf4040f34>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   41104:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   41108:	0001883a 	nop
   4110c:	e037883a 	mov	sp,fp
   41110:	df000017 	ldw	fp,0(sp)
   41114:	dec00104 	addi	sp,sp,4
   41118:	f800283a 	ret

0004111c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   4111c:	defff804 	addi	sp,sp,-32
   41120:	df000715 	stw	fp,28(sp)
   41124:	df000704 	addi	fp,sp,28
   41128:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   4112c:	e0bffb17 	ldw	r2,-20(fp)
   41130:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   41134:	e0bff917 	ldw	r2,-28(fp)
   41138:	10800017 	ldw	r2,0(r2)
   4113c:	10800104 	addi	r2,r2,4
   41140:	10800037 	ldwio	r2,0(r2)
   41144:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   41148:	e0bffa17 	ldw	r2,-24(fp)
   4114c:	1081000c 	andi	r2,r2,1024
   41150:	10000b26 	beq	r2,zero,41180 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   41154:	e0bff917 	ldw	r2,-28(fp)
   41158:	10800017 	ldw	r2,0(r2)
   4115c:	10800104 	addi	r2,r2,4
   41160:	1007883a 	mov	r3,r2
   41164:	e0bff917 	ldw	r2,-28(fp)
   41168:	10800817 	ldw	r2,32(r2)
   4116c:	10810014 	ori	r2,r2,1024
   41170:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   41174:	e0bff917 	ldw	r2,-28(fp)
   41178:	10000915 	stw	zero,36(r2)
   4117c:	00000a06 	br	411a8 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   41180:	e0bff917 	ldw	r2,-28(fp)
   41184:	10c00917 	ldw	r3,36(r2)
   41188:	00a00034 	movhi	r2,32768
   4118c:	10bfff04 	addi	r2,r2,-4
   41190:	10c00536 	bltu	r2,r3,411a8 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   41194:	e0bff917 	ldw	r2,-28(fp)
   41198:	10800917 	ldw	r2,36(r2)
   4119c:	10c00044 	addi	r3,r2,1
   411a0:	e0bff917 	ldw	r2,-28(fp)
   411a4:	10c00915 	stw	r3,36(r2)
   411a8:	d0a01217 	ldw	r2,-32696(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   411ac:	e037883a 	mov	sp,fp
   411b0:	df000017 	ldw	fp,0(sp)
   411b4:	dec00104 	addi	sp,sp,4
   411b8:	f800283a 	ret

000411bc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   411bc:	defffd04 	addi	sp,sp,-12
   411c0:	df000215 	stw	fp,8(sp)
   411c4:	df000204 	addi	fp,sp,8
   411c8:	e13ffe15 	stw	r4,-8(fp)
   411cc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   411d0:	00000506 	br	411e8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   411d4:	e0bfff17 	ldw	r2,-4(fp)
   411d8:	1090000c 	andi	r2,r2,16384
   411dc:	10000226 	beq	r2,zero,411e8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   411e0:	00bffd44 	movi	r2,-11
   411e4:	00000b06 	br	41214 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   411e8:	e0bffe17 	ldw	r2,-8(fp)
   411ec:	10c00d17 	ldw	r3,52(r2)
   411f0:	e0bffe17 	ldw	r2,-8(fp)
   411f4:	10800c17 	ldw	r2,48(r2)
   411f8:	18800526 	beq	r3,r2,41210 <altera_avalon_jtag_uart_close+0x54>
   411fc:	e0bffe17 	ldw	r2,-8(fp)
   41200:	10c00917 	ldw	r3,36(r2)
   41204:	e0bffe17 	ldw	r2,-8(fp)
   41208:	10800117 	ldw	r2,4(r2)
   4120c:	18bff136 	bltu	r3,r2,411d4 <__alt_data_end+0xf40411d4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   41210:	0005883a 	mov	r2,zero
}
   41214:	e037883a 	mov	sp,fp
   41218:	df000017 	ldw	fp,0(sp)
   4121c:	dec00104 	addi	sp,sp,4
   41220:	f800283a 	ret

00041224 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   41224:	defffa04 	addi	sp,sp,-24
   41228:	df000515 	stw	fp,20(sp)
   4122c:	df000504 	addi	fp,sp,20
   41230:	e13ffd15 	stw	r4,-12(fp)
   41234:	e17ffe15 	stw	r5,-8(fp)
   41238:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   4123c:	00bff9c4 	movi	r2,-25
   41240:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   41244:	e0bffe17 	ldw	r2,-8(fp)
   41248:	10da8060 	cmpeqi	r3,r2,27137
   4124c:	1800031e 	bne	r3,zero,4125c <altera_avalon_jtag_uart_ioctl+0x38>
   41250:	109a80a0 	cmpeqi	r2,r2,27138
   41254:	1000181e 	bne	r2,zero,412b8 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   41258:	00002906 	br	41300 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   4125c:	e0bffd17 	ldw	r2,-12(fp)
   41260:	10c00117 	ldw	r3,4(r2)
   41264:	00a00034 	movhi	r2,32768
   41268:	10bfffc4 	addi	r2,r2,-1
   4126c:	18802126 	beq	r3,r2,412f4 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   41270:	e0bfff17 	ldw	r2,-4(fp)
   41274:	10800017 	ldw	r2,0(r2)
   41278:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   4127c:	e0bffc17 	ldw	r2,-16(fp)
   41280:	10800090 	cmplti	r2,r2,2
   41284:	1000061e 	bne	r2,zero,412a0 <altera_avalon_jtag_uart_ioctl+0x7c>
   41288:	e0fffc17 	ldw	r3,-16(fp)
   4128c:	00a00034 	movhi	r2,32768
   41290:	10bfffc4 	addi	r2,r2,-1
   41294:	18800226 	beq	r3,r2,412a0 <altera_avalon_jtag_uart_ioctl+0x7c>
   41298:	e0bffc17 	ldw	r2,-16(fp)
   4129c:	00000206 	br	412a8 <altera_avalon_jtag_uart_ioctl+0x84>
   412a0:	00a00034 	movhi	r2,32768
   412a4:	10bfff84 	addi	r2,r2,-2
   412a8:	e0fffd17 	ldw	r3,-12(fp)
   412ac:	18800115 	stw	r2,4(r3)
      rc = 0;
   412b0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   412b4:	00000f06 	br	412f4 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   412b8:	e0bffd17 	ldw	r2,-12(fp)
   412bc:	10c00117 	ldw	r3,4(r2)
   412c0:	00a00034 	movhi	r2,32768
   412c4:	10bfffc4 	addi	r2,r2,-1
   412c8:	18800c26 	beq	r3,r2,412fc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   412cc:	e0bffd17 	ldw	r2,-12(fp)
   412d0:	10c00917 	ldw	r3,36(r2)
   412d4:	e0bffd17 	ldw	r2,-12(fp)
   412d8:	10800117 	ldw	r2,4(r2)
   412dc:	1885803a 	cmpltu	r2,r3,r2
   412e0:	10c03fcc 	andi	r3,r2,255
   412e4:	e0bfff17 	ldw	r2,-4(fp)
   412e8:	10c00015 	stw	r3,0(r2)
      rc = 0;
   412ec:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   412f0:	00000206 	br	412fc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   412f4:	0001883a 	nop
   412f8:	00000106 	br	41300 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   412fc:	0001883a 	nop

  default:
    break;
  }

  return rc;
   41300:	e0bffb17 	ldw	r2,-20(fp)
}
   41304:	e037883a 	mov	sp,fp
   41308:	df000017 	ldw	fp,0(sp)
   4130c:	dec00104 	addi	sp,sp,4
   41310:	f800283a 	ret

00041314 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   41314:	defff304 	addi	sp,sp,-52
   41318:	dfc00c15 	stw	ra,48(sp)
   4131c:	df000b15 	stw	fp,44(sp)
   41320:	df000b04 	addi	fp,sp,44
   41324:	e13ffc15 	stw	r4,-16(fp)
   41328:	e17ffd15 	stw	r5,-12(fp)
   4132c:	e1bffe15 	stw	r6,-8(fp)
   41330:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   41334:	e0bffd17 	ldw	r2,-12(fp)
   41338:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   4133c:	00004706 	br	4145c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   41340:	e0bffc17 	ldw	r2,-16(fp)
   41344:	10800a17 	ldw	r2,40(r2)
   41348:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   4134c:	e0bffc17 	ldw	r2,-16(fp)
   41350:	10800b17 	ldw	r2,44(r2)
   41354:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   41358:	e0fff717 	ldw	r3,-36(fp)
   4135c:	e0bff817 	ldw	r2,-32(fp)
   41360:	18800536 	bltu	r3,r2,41378 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   41364:	e0fff717 	ldw	r3,-36(fp)
   41368:	e0bff817 	ldw	r2,-32(fp)
   4136c:	1885c83a 	sub	r2,r3,r2
   41370:	e0bff615 	stw	r2,-40(fp)
   41374:	00000406 	br	41388 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   41378:	00c20004 	movi	r3,2048
   4137c:	e0bff817 	ldw	r2,-32(fp)
   41380:	1885c83a 	sub	r2,r3,r2
   41384:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   41388:	e0bff617 	ldw	r2,-40(fp)
   4138c:	10001e26 	beq	r2,zero,41408 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   41390:	e0fffe17 	ldw	r3,-8(fp)
   41394:	e0bff617 	ldw	r2,-40(fp)
   41398:	1880022e 	bgeu	r3,r2,413a4 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   4139c:	e0bffe17 	ldw	r2,-8(fp)
   413a0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   413a4:	e0bffc17 	ldw	r2,-16(fp)
   413a8:	10c00e04 	addi	r3,r2,56
   413ac:	e0bff817 	ldw	r2,-32(fp)
   413b0:	1885883a 	add	r2,r3,r2
   413b4:	e1bff617 	ldw	r6,-40(fp)
   413b8:	100b883a 	mov	r5,r2
   413bc:	e13ff517 	ldw	r4,-44(fp)
   413c0:	004390c0 	call	4390c <memcpy>
      ptr   += n;
   413c4:	e0fff517 	ldw	r3,-44(fp)
   413c8:	e0bff617 	ldw	r2,-40(fp)
   413cc:	1885883a 	add	r2,r3,r2
   413d0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   413d4:	e0fffe17 	ldw	r3,-8(fp)
   413d8:	e0bff617 	ldw	r2,-40(fp)
   413dc:	1885c83a 	sub	r2,r3,r2
   413e0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   413e4:	e0fff817 	ldw	r3,-32(fp)
   413e8:	e0bff617 	ldw	r2,-40(fp)
   413ec:	1885883a 	add	r2,r3,r2
   413f0:	10c1ffcc 	andi	r3,r2,2047
   413f4:	e0bffc17 	ldw	r2,-16(fp)
   413f8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   413fc:	e0bffe17 	ldw	r2,-8(fp)
   41400:	00bfcf16 	blt	zero,r2,41340 <__alt_data_end+0xf4041340>
   41404:	00000106 	br	4140c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   41408:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   4140c:	e0fff517 	ldw	r3,-44(fp)
   41410:	e0bffd17 	ldw	r2,-12(fp)
   41414:	1880141e 	bne	r3,r2,41468 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   41418:	e0bfff17 	ldw	r2,-4(fp)
   4141c:	1090000c 	andi	r2,r2,16384
   41420:	1000131e 	bne	r2,zero,41470 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   41424:	0001883a 	nop
   41428:	e0bffc17 	ldw	r2,-16(fp)
   4142c:	10c00a17 	ldw	r3,40(r2)
   41430:	e0bff717 	ldw	r2,-36(fp)
   41434:	1880051e 	bne	r3,r2,4144c <altera_avalon_jtag_uart_read+0x138>
   41438:	e0bffc17 	ldw	r2,-16(fp)
   4143c:	10c00917 	ldw	r3,36(r2)
   41440:	e0bffc17 	ldw	r2,-16(fp)
   41444:	10800117 	ldw	r2,4(r2)
   41448:	18bff736 	bltu	r3,r2,41428 <__alt_data_end+0xf4041428>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   4144c:	e0bffc17 	ldw	r2,-16(fp)
   41450:	10c00a17 	ldw	r3,40(r2)
   41454:	e0bff717 	ldw	r2,-36(fp)
   41458:	18800726 	beq	r3,r2,41478 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   4145c:	e0bffe17 	ldw	r2,-8(fp)
   41460:	00bfb716 	blt	zero,r2,41340 <__alt_data_end+0xf4041340>
   41464:	00000506 	br	4147c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   41468:	0001883a 	nop
   4146c:	00000306 	br	4147c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   41470:	0001883a 	nop
   41474:	00000106 	br	4147c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   41478:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   4147c:	e0fff517 	ldw	r3,-44(fp)
   41480:	e0bffd17 	ldw	r2,-12(fp)
   41484:	18801826 	beq	r3,r2,414e8 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   41488:	0005303a 	rdctl	r2,status
   4148c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   41490:	e0fffb17 	ldw	r3,-20(fp)
   41494:	00bfff84 	movi	r2,-2
   41498:	1884703a 	and	r2,r3,r2
   4149c:	1001703a 	wrctl	status,r2
  
  return context;
   414a0:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   414a4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   414a8:	e0bffc17 	ldw	r2,-16(fp)
   414ac:	10800817 	ldw	r2,32(r2)
   414b0:	10c00054 	ori	r3,r2,1
   414b4:	e0bffc17 	ldw	r2,-16(fp)
   414b8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   414bc:	e0bffc17 	ldw	r2,-16(fp)
   414c0:	10800017 	ldw	r2,0(r2)
   414c4:	10800104 	addi	r2,r2,4
   414c8:	1007883a 	mov	r3,r2
   414cc:	e0bffc17 	ldw	r2,-16(fp)
   414d0:	10800817 	ldw	r2,32(r2)
   414d4:	18800035 	stwio	r2,0(r3)
   414d8:	e0bffa17 	ldw	r2,-24(fp)
   414dc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   414e0:	e0bff917 	ldw	r2,-28(fp)
   414e4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   414e8:	e0fff517 	ldw	r3,-44(fp)
   414ec:	e0bffd17 	ldw	r2,-12(fp)
   414f0:	18800426 	beq	r3,r2,41504 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   414f4:	e0fff517 	ldw	r3,-44(fp)
   414f8:	e0bffd17 	ldw	r2,-12(fp)
   414fc:	1885c83a 	sub	r2,r3,r2
   41500:	00000606 	br	4151c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   41504:	e0bfff17 	ldw	r2,-4(fp)
   41508:	1090000c 	andi	r2,r2,16384
   4150c:	10000226 	beq	r2,zero,41518 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   41510:	00bffd44 	movi	r2,-11
   41514:	00000106 	br	4151c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   41518:	00bffec4 	movi	r2,-5
}
   4151c:	e037883a 	mov	sp,fp
   41520:	dfc00117 	ldw	ra,4(sp)
   41524:	df000017 	ldw	fp,0(sp)
   41528:	dec00204 	addi	sp,sp,8
   4152c:	f800283a 	ret

00041530 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   41530:	defff304 	addi	sp,sp,-52
   41534:	dfc00c15 	stw	ra,48(sp)
   41538:	df000b15 	stw	fp,44(sp)
   4153c:	df000b04 	addi	fp,sp,44
   41540:	e13ffc15 	stw	r4,-16(fp)
   41544:	e17ffd15 	stw	r5,-12(fp)
   41548:	e1bffe15 	stw	r6,-8(fp)
   4154c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   41550:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   41554:	e0bffd17 	ldw	r2,-12(fp)
   41558:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   4155c:	00003706 	br	4163c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   41560:	e0bffc17 	ldw	r2,-16(fp)
   41564:	10800c17 	ldw	r2,48(r2)
   41568:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   4156c:	e0bffc17 	ldw	r2,-16(fp)
   41570:	10800d17 	ldw	r2,52(r2)
   41574:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   41578:	e0fff917 	ldw	r3,-28(fp)
   4157c:	e0bff517 	ldw	r2,-44(fp)
   41580:	1880062e 	bgeu	r3,r2,4159c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   41584:	e0fff517 	ldw	r3,-44(fp)
   41588:	e0bff917 	ldw	r2,-28(fp)
   4158c:	1885c83a 	sub	r2,r3,r2
   41590:	10bfffc4 	addi	r2,r2,-1
   41594:	e0bff615 	stw	r2,-40(fp)
   41598:	00000b06 	br	415c8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   4159c:	e0bff517 	ldw	r2,-44(fp)
   415a0:	10000526 	beq	r2,zero,415b8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   415a4:	00c20004 	movi	r3,2048
   415a8:	e0bff917 	ldw	r2,-28(fp)
   415ac:	1885c83a 	sub	r2,r3,r2
   415b0:	e0bff615 	stw	r2,-40(fp)
   415b4:	00000406 	br	415c8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   415b8:	00c1ffc4 	movi	r3,2047
   415bc:	e0bff917 	ldw	r2,-28(fp)
   415c0:	1885c83a 	sub	r2,r3,r2
   415c4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   415c8:	e0bff617 	ldw	r2,-40(fp)
   415cc:	10001e26 	beq	r2,zero,41648 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   415d0:	e0fffe17 	ldw	r3,-8(fp)
   415d4:	e0bff617 	ldw	r2,-40(fp)
   415d8:	1880022e 	bgeu	r3,r2,415e4 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   415dc:	e0bffe17 	ldw	r2,-8(fp)
   415e0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   415e4:	e0bffc17 	ldw	r2,-16(fp)
   415e8:	10c20e04 	addi	r3,r2,2104
   415ec:	e0bff917 	ldw	r2,-28(fp)
   415f0:	1885883a 	add	r2,r3,r2
   415f4:	e1bff617 	ldw	r6,-40(fp)
   415f8:	e17ffd17 	ldw	r5,-12(fp)
   415fc:	1009883a 	mov	r4,r2
   41600:	004390c0 	call	4390c <memcpy>
      ptr   += n;
   41604:	e0fffd17 	ldw	r3,-12(fp)
   41608:	e0bff617 	ldw	r2,-40(fp)
   4160c:	1885883a 	add	r2,r3,r2
   41610:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   41614:	e0fffe17 	ldw	r3,-8(fp)
   41618:	e0bff617 	ldw	r2,-40(fp)
   4161c:	1885c83a 	sub	r2,r3,r2
   41620:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   41624:	e0fff917 	ldw	r3,-28(fp)
   41628:	e0bff617 	ldw	r2,-40(fp)
   4162c:	1885883a 	add	r2,r3,r2
   41630:	10c1ffcc 	andi	r3,r2,2047
   41634:	e0bffc17 	ldw	r2,-16(fp)
   41638:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   4163c:	e0bffe17 	ldw	r2,-8(fp)
   41640:	00bfc716 	blt	zero,r2,41560 <__alt_data_end+0xf4041560>
   41644:	00000106 	br	4164c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   41648:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4164c:	0005303a 	rdctl	r2,status
   41650:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   41654:	e0fffb17 	ldw	r3,-20(fp)
   41658:	00bfff84 	movi	r2,-2
   4165c:	1884703a 	and	r2,r3,r2
   41660:	1001703a 	wrctl	status,r2
  
  return context;
   41664:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   41668:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   4166c:	e0bffc17 	ldw	r2,-16(fp)
   41670:	10800817 	ldw	r2,32(r2)
   41674:	10c00094 	ori	r3,r2,2
   41678:	e0bffc17 	ldw	r2,-16(fp)
   4167c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   41680:	e0bffc17 	ldw	r2,-16(fp)
   41684:	10800017 	ldw	r2,0(r2)
   41688:	10800104 	addi	r2,r2,4
   4168c:	1007883a 	mov	r3,r2
   41690:	e0bffc17 	ldw	r2,-16(fp)
   41694:	10800817 	ldw	r2,32(r2)
   41698:	18800035 	stwio	r2,0(r3)
   4169c:	e0bffa17 	ldw	r2,-24(fp)
   416a0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   416a4:	e0bff817 	ldw	r2,-32(fp)
   416a8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   416ac:	e0bffe17 	ldw	r2,-8(fp)
   416b0:	0080100e 	bge	zero,r2,416f4 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   416b4:	e0bfff17 	ldw	r2,-4(fp)
   416b8:	1090000c 	andi	r2,r2,16384
   416bc:	1000101e 	bne	r2,zero,41700 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   416c0:	0001883a 	nop
   416c4:	e0bffc17 	ldw	r2,-16(fp)
   416c8:	10c00d17 	ldw	r3,52(r2)
   416cc:	e0bff517 	ldw	r2,-44(fp)
   416d0:	1880051e 	bne	r3,r2,416e8 <altera_avalon_jtag_uart_write+0x1b8>
   416d4:	e0bffc17 	ldw	r2,-16(fp)
   416d8:	10c00917 	ldw	r3,36(r2)
   416dc:	e0bffc17 	ldw	r2,-16(fp)
   416e0:	10800117 	ldw	r2,4(r2)
   416e4:	18bff736 	bltu	r3,r2,416c4 <__alt_data_end+0xf40416c4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   416e8:	e0bffc17 	ldw	r2,-16(fp)
   416ec:	10800917 	ldw	r2,36(r2)
   416f0:	1000051e 	bne	r2,zero,41708 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   416f4:	e0bffe17 	ldw	r2,-8(fp)
   416f8:	00bfd016 	blt	zero,r2,4163c <__alt_data_end+0xf404163c>
   416fc:	00000306 	br	4170c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   41700:	0001883a 	nop
   41704:	00000106 	br	4170c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   41708:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   4170c:	e0fffd17 	ldw	r3,-12(fp)
   41710:	e0bff717 	ldw	r2,-36(fp)
   41714:	18800426 	beq	r3,r2,41728 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   41718:	e0fffd17 	ldw	r3,-12(fp)
   4171c:	e0bff717 	ldw	r2,-36(fp)
   41720:	1885c83a 	sub	r2,r3,r2
   41724:	00000606 	br	41740 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   41728:	e0bfff17 	ldw	r2,-4(fp)
   4172c:	1090000c 	andi	r2,r2,16384
   41730:	10000226 	beq	r2,zero,4173c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   41734:	00bffd44 	movi	r2,-11
   41738:	00000106 	br	41740 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   4173c:	00bffec4 	movi	r2,-5
}
   41740:	e037883a 	mov	sp,fp
   41744:	dfc00117 	ldw	ra,4(sp)
   41748:	df000017 	ldw	fp,0(sp)
   4174c:	dec00204 	addi	sp,sp,8
   41750:	f800283a 	ret

00041754 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
   41754:	defffd04 	addi	sp,sp,-12
   41758:	df000215 	stw	fp,8(sp)
   4175c:	df000204 	addi	fp,sp,8
   41760:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   41764:	e0bfff17 	ldw	r2,-4(fp)
   41768:	10800a17 	ldw	r2,40(r2)
   4176c:	10800104 	addi	r2,r2,4
   41770:	10800037 	ldwio	r2,0(r2)
   41774:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
   41778:	e0bffe17 	ldw	r2,-8(fp)
   4177c:	10800054 	ori	r2,r2,1
   41780:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   41784:	e0bfff17 	ldw	r2,-4(fp)
   41788:	10800a17 	ldw	r2,40(r2)
   4178c:	10800104 	addi	r2,r2,4
   41790:	1007883a 	mov	r3,r2
   41794:	e0bffe17 	ldw	r2,-8(fp)
   41798:	18800035 	stwio	r2,0(r3)
}
   4179c:	0001883a 	nop
   417a0:	e037883a 	mov	sp,fp
   417a4:	df000017 	ldw	fp,0(sp)
   417a8:	dec00104 	addi	sp,sp,4
   417ac:	f800283a 	ret

000417b0 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
   417b0:	defffd04 	addi	sp,sp,-12
   417b4:	df000215 	stw	fp,8(sp)
   417b8:	df000204 	addi	fp,sp,8
   417bc:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   417c0:	e0bfff17 	ldw	r2,-4(fp)
   417c4:	10800a17 	ldw	r2,40(r2)
   417c8:	10800104 	addi	r2,r2,4
   417cc:	10800037 	ldwio	r2,0(r2)
   417d0:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
   417d4:	e0fffe17 	ldw	r3,-8(fp)
   417d8:	00bfff84 	movi	r2,-2
   417dc:	1884703a 	and	r2,r3,r2
   417e0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   417e4:	e0bfff17 	ldw	r2,-4(fp)
   417e8:	10800a17 	ldw	r2,40(r2)
   417ec:	10800104 	addi	r2,r2,4
   417f0:	1007883a 	mov	r3,r2
   417f4:	e0bffe17 	ldw	r2,-8(fp)
   417f8:	18800035 	stwio	r2,0(r3)
}
   417fc:	0001883a 	nop
   41800:	e037883a 	mov	sp,fp
   41804:	df000017 	ldw	fp,0(sp)
   41808:	dec00104 	addi	sp,sp,4
   4180c:	f800283a 	ret

00041810 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
   41810:	defffd04 	addi	sp,sp,-12
   41814:	df000215 	stw	fp,8(sp)
   41818:	df000204 	addi	fp,sp,8
   4181c:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   41820:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
   41824:	e0bfff17 	ldw	r2,-4(fp)
   41828:	10800a17 	ldw	r2,40(r2)
   4182c:	10800084 	addi	r2,r2,2
   41830:	1080002b 	ldhuio	r2,0(r2)
   41834:	10bfffcc 	andi	r2,r2,65535
   41838:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
   4183c:	e0bffe0b 	ldhu	r2,-8(fp)
}
   41840:	e037883a 	mov	sp,fp
   41844:	df000017 	ldw	fp,0(sp)
   41848:	dec00104 	addi	sp,sp,4
   4184c:	f800283a 	ret

00041850 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
   41850:	defffd04 	addi	sp,sp,-12
   41854:	df000215 	stw	fp,8(sp)
   41858:	df000204 	addi	fp,sp,8
   4185c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   41860:	e0bfff17 	ldw	r2,-4(fp)
   41864:	10800a17 	ldw	r2,40(r2)
   41868:	10800104 	addi	r2,r2,4
   4186c:	10800037 	ldwio	r2,0(r2)
   41870:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
   41874:	e0bffe17 	ldw	r2,-8(fp)
   41878:	1004d43a 	srli	r2,r2,16
}
   4187c:	e037883a 	mov	sp,fp
   41880:	df000017 	ldw	fp,0(sp)
   41884:	dec00104 	addi	sp,sp,4
   41888:	f800283a 	ret

0004188c <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
   4188c:	defffd04 	addi	sp,sp,-12
   41890:	df000215 	stw	fp,8(sp)
   41894:	df000204 	addi	fp,sp,8
   41898:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
   4189c:	e0bfff17 	ldw	r2,-4(fp)
   418a0:	1080800c 	andi	r2,r2,512
   418a4:	1004d27a 	srli	r2,r2,9
   418a8:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   418ac:	e0bffe17 	ldw	r2,-8(fp)
   418b0:	10000226 	beq	r2,zero,418bc <alt_up_rs232_check_parity+0x30>
   418b4:	00bfffc4 	movi	r2,-1
   418b8:	00000106 	br	418c0 <alt_up_rs232_check_parity+0x34>
   418bc:	0005883a 	mov	r2,zero
}
   418c0:	e037883a 	mov	sp,fp
   418c4:	df000017 	ldw	fp,0(sp)
   418c8:	dec00104 	addi	sp,sp,4
   418cc:	f800283a 	ret

000418d0 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
   418d0:	defffd04 	addi	sp,sp,-12
   418d4:	df000215 	stw	fp,8(sp)
   418d8:	df000204 	addi	fp,sp,8
   418dc:	e13ffe15 	stw	r4,-8(fp)
   418e0:	2805883a 	mov	r2,r5
   418e4:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
   418e8:	e0bffe17 	ldw	r2,-8(fp)
   418ec:	10800a17 	ldw	r2,40(r2)
   418f0:	1007883a 	mov	r3,r2
   418f4:	e0bfff03 	ldbu	r2,-4(fp)
   418f8:	18800035 	stwio	r2,0(r3)
	return 0;
   418fc:	0005883a 	mov	r2,zero
}
   41900:	e037883a 	mov	sp,fp
   41904:	df000017 	ldw	fp,0(sp)
   41908:	dec00104 	addi	sp,sp,4
   4190c:	f800283a 	ret

00041910 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
   41910:	defffa04 	addi	sp,sp,-24
   41914:	dfc00515 	stw	ra,20(sp)
   41918:	df000415 	stw	fp,16(sp)
   4191c:	df000404 	addi	fp,sp,16
   41920:	e13ffd15 	stw	r4,-12(fp)
   41924:	e17ffe15 	stw	r5,-8(fp)
   41928:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   4192c:	e0bffd17 	ldw	r2,-12(fp)
   41930:	10800a17 	ldw	r2,40(r2)
   41934:	10800037 	ldwio	r2,0(r2)
   41938:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
   4193c:	e0bffc17 	ldw	r2,-16(fp)
   41940:	1007883a 	mov	r3,r2
   41944:	e0bffe17 	ldw	r2,-8(fp)
   41948:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
   4194c:	e13ffc17 	ldw	r4,-16(fp)
   41950:	004188c0 	call	4188c <alt_up_rs232_check_parity>
   41954:	1007883a 	mov	r3,r2
   41958:	e0bfff17 	ldw	r2,-4(fp)
   4195c:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
   41960:	e0bffc17 	ldw	r2,-16(fp)
   41964:	10a0000c 	andi	r2,r2,32768
   41968:	1004d3fa 	srli	r2,r2,15
   4196c:	10bfffc4 	addi	r2,r2,-1
}
   41970:	e037883a 	mov	sp,fp
   41974:	dfc00117 	ldw	ra,4(sp)
   41978:	df000017 	ldw	fp,0(sp)
   4197c:	dec00204 	addi	sp,sp,8
   41980:	f800283a 	ret

00041984 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
   41984:	defff804 	addi	sp,sp,-32
   41988:	dfc00715 	stw	ra,28(sp)
   4198c:	df000615 	stw	fp,24(sp)
   41990:	df000604 	addi	fp,sp,24
   41994:	e13ffd15 	stw	r4,-12(fp)
   41998:	e17ffe15 	stw	r5,-8(fp)
   4199c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   419a0:	e0bffd17 	ldw	r2,-12(fp)
   419a4:	10800017 	ldw	r2,0(r2)
   419a8:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   419ac:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   419b0:	00000c06 	br	419e4 <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
   419b4:	e0bffe17 	ldw	r2,-8(fp)
   419b8:	10c00044 	addi	r3,r2,1
   419bc:	e0fffe15 	stw	r3,-8(fp)
   419c0:	e0fffc04 	addi	r3,fp,-16
   419c4:	180d883a 	mov	r6,r3
   419c8:	100b883a 	mov	r5,r2
   419cc:	e13ffb17 	ldw	r4,-20(fp)
   419d0:	00419100 	call	41910 <alt_up_rs232_read_data>
   419d4:	1000081e 	bne	r2,zero,419f8 <alt_up_rs232_read_fd+0x74>
			count++;
   419d8:	e0bffa17 	ldw	r2,-24(fp)
   419dc:	10800044 	addi	r2,r2,1
   419e0:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   419e4:	e0bfff17 	ldw	r2,-4(fp)
   419e8:	10ffffc4 	addi	r3,r2,-1
   419ec:	e0ffff15 	stw	r3,-4(fp)
   419f0:	103ff01e 	bne	r2,zero,419b4 <__alt_data_end+0xf40419b4>
   419f4:	00000106 	br	419fc <alt_up_rs232_read_fd+0x78>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
   419f8:	0001883a 	nop
	}
	return count;
   419fc:	e0bffa17 	ldw	r2,-24(fp)
}
   41a00:	e037883a 	mov	sp,fp
   41a04:	dfc00117 	ldw	ra,4(sp)
   41a08:	df000017 	ldw	fp,0(sp)
   41a0c:	dec00204 	addi	sp,sp,8
   41a10:	f800283a 	ret

00041a14 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
   41a14:	defff904 	addi	sp,sp,-28
   41a18:	dfc00615 	stw	ra,24(sp)
   41a1c:	df000515 	stw	fp,20(sp)
   41a20:	df000504 	addi	fp,sp,20
   41a24:	e13ffd15 	stw	r4,-12(fp)
   41a28:	e17ffe15 	stw	r5,-8(fp)
   41a2c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   41a30:	e0bffd17 	ldw	r2,-12(fp)
   41a34:	10800017 	ldw	r2,0(r2)
   41a38:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   41a3c:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   41a40:	00000d06 	br	41a78 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
   41a44:	e0bffe17 	ldw	r2,-8(fp)
   41a48:	10800003 	ldbu	r2,0(r2)
   41a4c:	10803fcc 	andi	r2,r2,255
   41a50:	100b883a 	mov	r5,r2
   41a54:	e13ffc17 	ldw	r4,-16(fp)
   41a58:	00418d00 	call	418d0 <alt_up_rs232_write_data>
   41a5c:	10000b1e 	bne	r2,zero,41a8c <alt_up_rs232_write_fd+0x78>
		{
			count++;
   41a60:	e0bffb17 	ldw	r2,-20(fp)
   41a64:	10800044 	addi	r2,r2,1
   41a68:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
   41a6c:	e0bffe17 	ldw	r2,-8(fp)
   41a70:	10800044 	addi	r2,r2,1
   41a74:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
   41a78:	e0bfff17 	ldw	r2,-4(fp)
   41a7c:	10ffffc4 	addi	r3,r2,-1
   41a80:	e0ffff15 	stw	r3,-4(fp)
   41a84:	103fef1e 	bne	r2,zero,41a44 <__alt_data_end+0xf4041a44>
   41a88:	00000106 	br	41a90 <alt_up_rs232_write_fd+0x7c>
		{
			count++;
			ptr++;
		}
		else
			break;
   41a8c:	0001883a 	nop
	}
	return count;
   41a90:	e0bffb17 	ldw	r2,-20(fp)
}
   41a94:	e037883a 	mov	sp,fp
   41a98:	dfc00117 	ldw	ra,4(sp)
   41a9c:	df000017 	ldw	fp,0(sp)
   41aa0:	dec00204 	addi	sp,sp,8
   41aa4:	f800283a 	ret

00041aa8 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
   41aa8:	defffc04 	addi	sp,sp,-16
   41aac:	dfc00315 	stw	ra,12(sp)
   41ab0:	df000215 	stw	fp,8(sp)
   41ab4:	df000204 	addi	fp,sp,8
   41ab8:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
   41abc:	d1600204 	addi	r5,gp,-32760
   41ac0:	e13fff17 	ldw	r4,-4(fp)
   41ac4:	0041f100 	call	41f10 <alt_find_dev>
   41ac8:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   41acc:	e0bffe17 	ldw	r2,-8(fp)
}
   41ad0:	e037883a 	mov	sp,fp
   41ad4:	dfc00117 	ldw	ra,4(sp)
   41ad8:	df000017 	ldw	fp,0(sp)
   41adc:	dec00204 	addi	sp,sp,8
   41ae0:	f800283a 	ret

00041ae4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   41ae4:	defff504 	addi	sp,sp,-44
   41ae8:	df000a15 	stw	fp,40(sp)
   41aec:	df000a04 	addi	fp,sp,40
   41af0:	e13ffc15 	stw	r4,-16(fp)
   41af4:	e17ffd15 	stw	r5,-12(fp)
   41af8:	e1bffe15 	stw	r6,-8(fp)
   41afc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   41b00:	e03ff615 	stw	zero,-40(fp)
   41b04:	d0a01217 	ldw	r2,-32696(gp)
  
  if (alt_ticks_per_second ())
   41b08:	10003c26 	beq	r2,zero,41bfc <alt_alarm_start+0x118>
  {
    if (alarm)
   41b0c:	e0bffc17 	ldw	r2,-16(fp)
   41b10:	10003826 	beq	r2,zero,41bf4 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   41b14:	e0bffc17 	ldw	r2,-16(fp)
   41b18:	e0fffe17 	ldw	r3,-8(fp)
   41b1c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   41b20:	e0bffc17 	ldw	r2,-16(fp)
   41b24:	e0ffff17 	ldw	r3,-4(fp)
   41b28:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   41b2c:	0005303a 	rdctl	r2,status
   41b30:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   41b34:	e0fff917 	ldw	r3,-28(fp)
   41b38:	00bfff84 	movi	r2,-2
   41b3c:	1884703a 	and	r2,r3,r2
   41b40:	1001703a 	wrctl	status,r2
  
  return context;
   41b44:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   41b48:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   41b4c:	d0a01317 	ldw	r2,-32692(gp)
      
      current_nticks = alt_nticks();
   41b50:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   41b54:	e0fffd17 	ldw	r3,-12(fp)
   41b58:	e0bff617 	ldw	r2,-40(fp)
   41b5c:	1885883a 	add	r2,r3,r2
   41b60:	10c00044 	addi	r3,r2,1
   41b64:	e0bffc17 	ldw	r2,-16(fp)
   41b68:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   41b6c:	e0bffc17 	ldw	r2,-16(fp)
   41b70:	10c00217 	ldw	r3,8(r2)
   41b74:	e0bff617 	ldw	r2,-40(fp)
   41b78:	1880042e 	bgeu	r3,r2,41b8c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   41b7c:	e0bffc17 	ldw	r2,-16(fp)
   41b80:	00c00044 	movi	r3,1
   41b84:	10c00405 	stb	r3,16(r2)
   41b88:	00000206 	br	41b94 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   41b8c:	e0bffc17 	ldw	r2,-16(fp)
   41b90:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   41b94:	e0bffc17 	ldw	r2,-16(fp)
   41b98:	d0e00704 	addi	r3,gp,-32740
   41b9c:	e0fffa15 	stw	r3,-24(fp)
   41ba0:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   41ba4:	e0bffb17 	ldw	r2,-20(fp)
   41ba8:	e0fffa17 	ldw	r3,-24(fp)
   41bac:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   41bb0:	e0bffa17 	ldw	r2,-24(fp)
   41bb4:	10c00017 	ldw	r3,0(r2)
   41bb8:	e0bffb17 	ldw	r2,-20(fp)
   41bbc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   41bc0:	e0bffa17 	ldw	r2,-24(fp)
   41bc4:	10800017 	ldw	r2,0(r2)
   41bc8:	e0fffb17 	ldw	r3,-20(fp)
   41bcc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   41bd0:	e0bffa17 	ldw	r2,-24(fp)
   41bd4:	e0fffb17 	ldw	r3,-20(fp)
   41bd8:	10c00015 	stw	r3,0(r2)
   41bdc:	e0bff817 	ldw	r2,-32(fp)
   41be0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   41be4:	e0bff717 	ldw	r2,-36(fp)
   41be8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   41bec:	0005883a 	mov	r2,zero
   41bf0:	00000306 	br	41c00 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   41bf4:	00bffa84 	movi	r2,-22
   41bf8:	00000106 	br	41c00 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   41bfc:	00bfde84 	movi	r2,-134
  }
}
   41c00:	e037883a 	mov	sp,fp
   41c04:	df000017 	ldw	fp,0(sp)
   41c08:	dec00104 	addi	sp,sp,4
   41c0c:	f800283a 	ret

00041c10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   41c10:	defffe04 	addi	sp,sp,-8
   41c14:	dfc00115 	stw	ra,4(sp)
   41c18:	df000015 	stw	fp,0(sp)
   41c1c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   41c20:	d0a00517 	ldw	r2,-32748(gp)
   41c24:	10000326 	beq	r2,zero,41c34 <alt_get_errno+0x24>
   41c28:	d0a00517 	ldw	r2,-32748(gp)
   41c2c:	103ee83a 	callr	r2
   41c30:	00000106 	br	41c38 <alt_get_errno+0x28>
   41c34:	d0a01504 	addi	r2,gp,-32684
}
   41c38:	e037883a 	mov	sp,fp
   41c3c:	dfc00117 	ldw	ra,4(sp)
   41c40:	df000017 	ldw	fp,0(sp)
   41c44:	dec00204 	addi	sp,sp,8
   41c48:	f800283a 	ret

00041c4c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   41c4c:	defffb04 	addi	sp,sp,-20
   41c50:	dfc00415 	stw	ra,16(sp)
   41c54:	df000315 	stw	fp,12(sp)
   41c58:	df000304 	addi	fp,sp,12
   41c5c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   41c60:	e0bfff17 	ldw	r2,-4(fp)
   41c64:	10000816 	blt	r2,zero,41c88 <close+0x3c>
   41c68:	01400304 	movi	r5,12
   41c6c:	e13fff17 	ldw	r4,-4(fp)
   41c70:	00407a00 	call	407a0 <__mulsi3>
   41c74:	1007883a 	mov	r3,r2
   41c78:	00820034 	movhi	r2,2048
   41c7c:	10848b04 	addi	r2,r2,4652
   41c80:	1885883a 	add	r2,r3,r2
   41c84:	00000106 	br	41c8c <close+0x40>
   41c88:	0005883a 	mov	r2,zero
   41c8c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   41c90:	e0bffd17 	ldw	r2,-12(fp)
   41c94:	10001926 	beq	r2,zero,41cfc <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   41c98:	e0bffd17 	ldw	r2,-12(fp)
   41c9c:	10800017 	ldw	r2,0(r2)
   41ca0:	10800417 	ldw	r2,16(r2)
   41ca4:	10000626 	beq	r2,zero,41cc0 <close+0x74>
   41ca8:	e0bffd17 	ldw	r2,-12(fp)
   41cac:	10800017 	ldw	r2,0(r2)
   41cb0:	10800417 	ldw	r2,16(r2)
   41cb4:	e13ffd17 	ldw	r4,-12(fp)
   41cb8:	103ee83a 	callr	r2
   41cbc:	00000106 	br	41cc4 <close+0x78>
   41cc0:	0005883a 	mov	r2,zero
   41cc4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   41cc8:	e13fff17 	ldw	r4,-4(fp)
   41ccc:	00425240 	call	42524 <alt_release_fd>
    if (rval < 0)
   41cd0:	e0bffe17 	ldw	r2,-8(fp)
   41cd4:	1000070e 	bge	r2,zero,41cf4 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   41cd8:	0041c100 	call	41c10 <alt_get_errno>
   41cdc:	1007883a 	mov	r3,r2
   41ce0:	e0bffe17 	ldw	r2,-8(fp)
   41ce4:	0085c83a 	sub	r2,zero,r2
   41ce8:	18800015 	stw	r2,0(r3)
      return -1;
   41cec:	00bfffc4 	movi	r2,-1
   41cf0:	00000706 	br	41d10 <close+0xc4>
    }
    return 0;
   41cf4:	0005883a 	mov	r2,zero
   41cf8:	00000506 	br	41d10 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   41cfc:	0041c100 	call	41c10 <alt_get_errno>
   41d00:	1007883a 	mov	r3,r2
   41d04:	00801444 	movi	r2,81
   41d08:	18800015 	stw	r2,0(r3)
    return -1;
   41d0c:	00bfffc4 	movi	r2,-1
  }
}
   41d10:	e037883a 	mov	sp,fp
   41d14:	dfc00117 	ldw	ra,4(sp)
   41d18:	df000017 	ldw	fp,0(sp)
   41d1c:	dec00204 	addi	sp,sp,8
   41d20:	f800283a 	ret

00041d24 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   41d24:	deffff04 	addi	sp,sp,-4
   41d28:	df000015 	stw	fp,0(sp)
   41d2c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   41d30:	0001883a 	nop
   41d34:	e037883a 	mov	sp,fp
   41d38:	df000017 	ldw	fp,0(sp)
   41d3c:	dec00104 	addi	sp,sp,4
   41d40:	f800283a 	ret

00041d44 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   41d44:	defffc04 	addi	sp,sp,-16
   41d48:	df000315 	stw	fp,12(sp)
   41d4c:	df000304 	addi	fp,sp,12
   41d50:	e13ffd15 	stw	r4,-12(fp)
   41d54:	e17ffe15 	stw	r5,-8(fp)
   41d58:	e1bfff15 	stw	r6,-4(fp)
  return len;
   41d5c:	e0bfff17 	ldw	r2,-4(fp)
}
   41d60:	e037883a 	mov	sp,fp
   41d64:	df000017 	ldw	fp,0(sp)
   41d68:	dec00104 	addi	sp,sp,4
   41d6c:	f800283a 	ret

00041d70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   41d70:	defffe04 	addi	sp,sp,-8
   41d74:	dfc00115 	stw	ra,4(sp)
   41d78:	df000015 	stw	fp,0(sp)
   41d7c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   41d80:	d0a00517 	ldw	r2,-32748(gp)
   41d84:	10000326 	beq	r2,zero,41d94 <alt_get_errno+0x24>
   41d88:	d0a00517 	ldw	r2,-32748(gp)
   41d8c:	103ee83a 	callr	r2
   41d90:	00000106 	br	41d98 <alt_get_errno+0x28>
   41d94:	d0a01504 	addi	r2,gp,-32684
}
   41d98:	e037883a 	mov	sp,fp
   41d9c:	dfc00117 	ldw	ra,4(sp)
   41da0:	df000017 	ldw	fp,0(sp)
   41da4:	dec00204 	addi	sp,sp,8
   41da8:	f800283a 	ret

00041dac <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   41dac:	defffa04 	addi	sp,sp,-24
   41db0:	dfc00515 	stw	ra,20(sp)
   41db4:	df000415 	stw	fp,16(sp)
   41db8:	df000404 	addi	fp,sp,16
   41dbc:	e13ffe15 	stw	r4,-8(fp)
   41dc0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   41dc4:	e0bffe17 	ldw	r2,-8(fp)
   41dc8:	10000326 	beq	r2,zero,41dd8 <alt_dev_llist_insert+0x2c>
   41dcc:	e0bffe17 	ldw	r2,-8(fp)
   41dd0:	10800217 	ldw	r2,8(r2)
   41dd4:	1000061e 	bne	r2,zero,41df0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   41dd8:	0041d700 	call	41d70 <alt_get_errno>
   41ddc:	1007883a 	mov	r3,r2
   41de0:	00800584 	movi	r2,22
   41de4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   41de8:	00bffa84 	movi	r2,-22
   41dec:	00001306 	br	41e3c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   41df0:	e0bffe17 	ldw	r2,-8(fp)
   41df4:	e0ffff17 	ldw	r3,-4(fp)
   41df8:	e0fffc15 	stw	r3,-16(fp)
   41dfc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   41e00:	e0bffd17 	ldw	r2,-12(fp)
   41e04:	e0fffc17 	ldw	r3,-16(fp)
   41e08:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   41e0c:	e0bffc17 	ldw	r2,-16(fp)
   41e10:	10c00017 	ldw	r3,0(r2)
   41e14:	e0bffd17 	ldw	r2,-12(fp)
   41e18:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   41e1c:	e0bffc17 	ldw	r2,-16(fp)
   41e20:	10800017 	ldw	r2,0(r2)
   41e24:	e0fffd17 	ldw	r3,-12(fp)
   41e28:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   41e2c:	e0bffc17 	ldw	r2,-16(fp)
   41e30:	e0fffd17 	ldw	r3,-12(fp)
   41e34:	10c00015 	stw	r3,0(r2)

  return 0;  
   41e38:	0005883a 	mov	r2,zero
}
   41e3c:	e037883a 	mov	sp,fp
   41e40:	dfc00117 	ldw	ra,4(sp)
   41e44:	df000017 	ldw	fp,0(sp)
   41e48:	dec00204 	addi	sp,sp,8
   41e4c:	f800283a 	ret

00041e50 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   41e50:	defffd04 	addi	sp,sp,-12
   41e54:	dfc00215 	stw	ra,8(sp)
   41e58:	df000115 	stw	fp,4(sp)
   41e5c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   41e60:	00800134 	movhi	r2,4
   41e64:	1097f804 	addi	r2,r2,24544
   41e68:	e0bfff15 	stw	r2,-4(fp)
   41e6c:	00000606 	br	41e88 <_do_ctors+0x38>
        (*ctor) (); 
   41e70:	e0bfff17 	ldw	r2,-4(fp)
   41e74:	10800017 	ldw	r2,0(r2)
   41e78:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   41e7c:	e0bfff17 	ldw	r2,-4(fp)
   41e80:	10bfff04 	addi	r2,r2,-4
   41e84:	e0bfff15 	stw	r2,-4(fp)
   41e88:	e0ffff17 	ldw	r3,-4(fp)
   41e8c:	00800134 	movhi	r2,4
   41e90:	1097f904 	addi	r2,r2,24548
   41e94:	18bff62e 	bgeu	r3,r2,41e70 <__alt_data_end+0xf4041e70>
        (*ctor) (); 
}
   41e98:	0001883a 	nop
   41e9c:	e037883a 	mov	sp,fp
   41ea0:	dfc00117 	ldw	ra,4(sp)
   41ea4:	df000017 	ldw	fp,0(sp)
   41ea8:	dec00204 	addi	sp,sp,8
   41eac:	f800283a 	ret

00041eb0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   41eb0:	defffd04 	addi	sp,sp,-12
   41eb4:	dfc00215 	stw	ra,8(sp)
   41eb8:	df000115 	stw	fp,4(sp)
   41ebc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   41ec0:	00800134 	movhi	r2,4
   41ec4:	1097f804 	addi	r2,r2,24544
   41ec8:	e0bfff15 	stw	r2,-4(fp)
   41ecc:	00000606 	br	41ee8 <_do_dtors+0x38>
        (*dtor) (); 
   41ed0:	e0bfff17 	ldw	r2,-4(fp)
   41ed4:	10800017 	ldw	r2,0(r2)
   41ed8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   41edc:	e0bfff17 	ldw	r2,-4(fp)
   41ee0:	10bfff04 	addi	r2,r2,-4
   41ee4:	e0bfff15 	stw	r2,-4(fp)
   41ee8:	e0ffff17 	ldw	r3,-4(fp)
   41eec:	00800134 	movhi	r2,4
   41ef0:	1097f904 	addi	r2,r2,24548
   41ef4:	18bff62e 	bgeu	r3,r2,41ed0 <__alt_data_end+0xf4041ed0>
        (*dtor) (); 
}
   41ef8:	0001883a 	nop
   41efc:	e037883a 	mov	sp,fp
   41f00:	dfc00117 	ldw	ra,4(sp)
   41f04:	df000017 	ldw	fp,0(sp)
   41f08:	dec00204 	addi	sp,sp,8
   41f0c:	f800283a 	ret

00041f10 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   41f10:	defffa04 	addi	sp,sp,-24
   41f14:	dfc00515 	stw	ra,20(sp)
   41f18:	df000415 	stw	fp,16(sp)
   41f1c:	df000404 	addi	fp,sp,16
   41f20:	e13ffe15 	stw	r4,-8(fp)
   41f24:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   41f28:	e0bfff17 	ldw	r2,-4(fp)
   41f2c:	10800017 	ldw	r2,0(r2)
   41f30:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   41f34:	e13ffe17 	ldw	r4,-8(fp)
   41f38:	00441680 	call	44168 <strlen>
   41f3c:	10800044 	addi	r2,r2,1
   41f40:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   41f44:	00000d06 	br	41f7c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   41f48:	e0bffc17 	ldw	r2,-16(fp)
   41f4c:	10800217 	ldw	r2,8(r2)
   41f50:	e0fffd17 	ldw	r3,-12(fp)
   41f54:	180d883a 	mov	r6,r3
   41f58:	e17ffe17 	ldw	r5,-8(fp)
   41f5c:	1009883a 	mov	r4,r2
   41f60:	00438900 	call	43890 <memcmp>
   41f64:	1000021e 	bne	r2,zero,41f70 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   41f68:	e0bffc17 	ldw	r2,-16(fp)
   41f6c:	00000706 	br	41f8c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   41f70:	e0bffc17 	ldw	r2,-16(fp)
   41f74:	10800017 	ldw	r2,0(r2)
   41f78:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   41f7c:	e0fffc17 	ldw	r3,-16(fp)
   41f80:	e0bfff17 	ldw	r2,-4(fp)
   41f84:	18bff01e 	bne	r3,r2,41f48 <__alt_data_end+0xf4041f48>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   41f88:	0005883a 	mov	r2,zero
}
   41f8c:	e037883a 	mov	sp,fp
   41f90:	dfc00117 	ldw	ra,4(sp)
   41f94:	df000017 	ldw	fp,0(sp)
   41f98:	dec00204 	addi	sp,sp,8
   41f9c:	f800283a 	ret

00041fa0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   41fa0:	deffff04 	addi	sp,sp,-4
   41fa4:	df000015 	stw	fp,0(sp)
   41fa8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   41fac:	0001883a 	nop
   41fb0:	e037883a 	mov	sp,fp
   41fb4:	df000017 	ldw	fp,0(sp)
   41fb8:	dec00104 	addi	sp,sp,4
   41fbc:	f800283a 	ret

00041fc0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   41fc0:	defff804 	addi	sp,sp,-32
   41fc4:	dfc00715 	stw	ra,28(sp)
   41fc8:	df000615 	stw	fp,24(sp)
   41fcc:	dc000515 	stw	r16,20(sp)
   41fd0:	df000604 	addi	fp,sp,24
   41fd4:	e13ffb15 	stw	r4,-20(fp)
   41fd8:	e17ffc15 	stw	r5,-16(fp)
   41fdc:	e1bffd15 	stw	r6,-12(fp)
   41fe0:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   41fe4:	e1bffe17 	ldw	r6,-8(fp)
   41fe8:	e17ffd17 	ldw	r5,-12(fp)
   41fec:	e13ffc17 	ldw	r4,-16(fp)
   41ff0:	00423c80 	call	423c8 <open>
   41ff4:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   41ff8:	e0bffa17 	ldw	r2,-24(fp)
   41ffc:	10002216 	blt	r2,zero,42088 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   42000:	04020034 	movhi	r16,2048
   42004:	84048b04 	addi	r16,r16,4652
   42008:	e0bffa17 	ldw	r2,-24(fp)
   4200c:	01400304 	movi	r5,12
   42010:	1009883a 	mov	r4,r2
   42014:	00407a00 	call	407a0 <__mulsi3>
   42018:	8085883a 	add	r2,r16,r2
   4201c:	10c00017 	ldw	r3,0(r2)
   42020:	e0bffb17 	ldw	r2,-20(fp)
   42024:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   42028:	04020034 	movhi	r16,2048
   4202c:	84048b04 	addi	r16,r16,4652
   42030:	e0bffa17 	ldw	r2,-24(fp)
   42034:	01400304 	movi	r5,12
   42038:	1009883a 	mov	r4,r2
   4203c:	00407a00 	call	407a0 <__mulsi3>
   42040:	8085883a 	add	r2,r16,r2
   42044:	10800104 	addi	r2,r2,4
   42048:	10c00017 	ldw	r3,0(r2)
   4204c:	e0bffb17 	ldw	r2,-20(fp)
   42050:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   42054:	04020034 	movhi	r16,2048
   42058:	84048b04 	addi	r16,r16,4652
   4205c:	e0bffa17 	ldw	r2,-24(fp)
   42060:	01400304 	movi	r5,12
   42064:	1009883a 	mov	r4,r2
   42068:	00407a00 	call	407a0 <__mulsi3>
   4206c:	8085883a 	add	r2,r16,r2
   42070:	10800204 	addi	r2,r2,8
   42074:	10c00017 	ldw	r3,0(r2)
   42078:	e0bffb17 	ldw	r2,-20(fp)
   4207c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   42080:	e13ffa17 	ldw	r4,-24(fp)
   42084:	00425240 	call	42524 <alt_release_fd>
  }
} 
   42088:	0001883a 	nop
   4208c:	e6ffff04 	addi	sp,fp,-4
   42090:	dfc00217 	ldw	ra,8(sp)
   42094:	df000117 	ldw	fp,4(sp)
   42098:	dc000017 	ldw	r16,0(sp)
   4209c:	dec00304 	addi	sp,sp,12
   420a0:	f800283a 	ret

000420a4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   420a4:	defffb04 	addi	sp,sp,-20
   420a8:	dfc00415 	stw	ra,16(sp)
   420ac:	df000315 	stw	fp,12(sp)
   420b0:	df000304 	addi	fp,sp,12
   420b4:	e13ffd15 	stw	r4,-12(fp)
   420b8:	e17ffe15 	stw	r5,-8(fp)
   420bc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   420c0:	01c07fc4 	movi	r7,511
   420c4:	01800044 	movi	r6,1
   420c8:	e17ffd17 	ldw	r5,-12(fp)
   420cc:	01020034 	movhi	r4,2048
   420d0:	21048e04 	addi	r4,r4,4664
   420d4:	0041fc00 	call	41fc0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   420d8:	01c07fc4 	movi	r7,511
   420dc:	000d883a 	mov	r6,zero
   420e0:	e17ffe17 	ldw	r5,-8(fp)
   420e4:	01020034 	movhi	r4,2048
   420e8:	21048b04 	addi	r4,r4,4652
   420ec:	0041fc00 	call	41fc0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   420f0:	01c07fc4 	movi	r7,511
   420f4:	01800044 	movi	r6,1
   420f8:	e17fff17 	ldw	r5,-4(fp)
   420fc:	01020034 	movhi	r4,2048
   42100:	21049104 	addi	r4,r4,4676
   42104:	0041fc00 	call	41fc0 <alt_open_fd>
}  
   42108:	0001883a 	nop
   4210c:	e037883a 	mov	sp,fp
   42110:	dfc00117 	ldw	ra,4(sp)
   42114:	df000017 	ldw	fp,0(sp)
   42118:	dec00204 	addi	sp,sp,8
   4211c:	f800283a 	ret

00042120 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   42120:	defff004 	addi	sp,sp,-64
   42124:	df000f15 	stw	fp,60(sp)
   42128:	df000f04 	addi	fp,sp,60
   4212c:	e13ffd15 	stw	r4,-12(fp)
   42130:	e17ffe15 	stw	r5,-8(fp)
   42134:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   42138:	00bffa84 	movi	r2,-22
   4213c:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   42140:	e0bffd17 	ldw	r2,-12(fp)
   42144:	10800828 	cmpgeui	r2,r2,32
   42148:	1000501e 	bne	r2,zero,4228c <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4214c:	0005303a 	rdctl	r2,status
   42150:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   42154:	e0fff617 	ldw	r3,-40(fp)
   42158:	00bfff84 	movi	r2,-2
   4215c:	1884703a 	and	r2,r3,r2
   42160:	1001703a 	wrctl	status,r2
  
  return context;
   42164:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   42168:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
   4216c:	00820034 	movhi	r2,2048
   42170:	10871904 	addi	r2,r2,7268
   42174:	e0fffd17 	ldw	r3,-12(fp)
   42178:	180690fa 	slli	r3,r3,3
   4217c:	10c5883a 	add	r2,r2,r3
   42180:	e0ffff17 	ldw	r3,-4(fp)
   42184:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   42188:	00820034 	movhi	r2,2048
   4218c:	10871904 	addi	r2,r2,7268
   42190:	e0fffd17 	ldw	r3,-12(fp)
   42194:	180690fa 	slli	r3,r3,3
   42198:	10c5883a 	add	r2,r2,r3
   4219c:	10800104 	addi	r2,r2,4
   421a0:	e0fffe17 	ldw	r3,-8(fp)
   421a4:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   421a8:	e0bfff17 	ldw	r2,-4(fp)
   421ac:	10001926 	beq	r2,zero,42214 <alt_irq_register+0xf4>
   421b0:	e0bffd17 	ldw	r2,-12(fp)
   421b4:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   421b8:	0005303a 	rdctl	r2,status
   421bc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   421c0:	e0fff717 	ldw	r3,-36(fp)
   421c4:	00bfff84 	movi	r2,-2
   421c8:	1884703a 	and	r2,r3,r2
   421cc:	1001703a 	wrctl	status,r2
  
  return context;
   421d0:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   421d4:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   421d8:	00c00044 	movi	r3,1
   421dc:	e0bff217 	ldw	r2,-56(fp)
   421e0:	1884983a 	sll	r2,r3,r2
   421e4:	1007883a 	mov	r3,r2
   421e8:	d0a01117 	ldw	r2,-32700(gp)
   421ec:	1884b03a 	or	r2,r3,r2
   421f0:	d0a01115 	stw	r2,-32700(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   421f4:	d0a01117 	ldw	r2,-32700(gp)
   421f8:	100170fa 	wrctl	ienable,r2
   421fc:	e0bff817 	ldw	r2,-32(fp)
   42200:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   42204:	e0bff917 	ldw	r2,-28(fp)
   42208:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4220c:	0005883a 	mov	r2,zero
   42210:	00001906 	br	42278 <alt_irq_register+0x158>
   42214:	e0bffd17 	ldw	r2,-12(fp)
   42218:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4221c:	0005303a 	rdctl	r2,status
   42220:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   42224:	e0fffa17 	ldw	r3,-24(fp)
   42228:	00bfff84 	movi	r2,-2
   4222c:	1884703a 	and	r2,r3,r2
   42230:	1001703a 	wrctl	status,r2
  
  return context;
   42234:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   42238:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
   4223c:	00c00044 	movi	r3,1
   42240:	e0bff417 	ldw	r2,-48(fp)
   42244:	1884983a 	sll	r2,r3,r2
   42248:	0084303a 	nor	r2,zero,r2
   4224c:	1007883a 	mov	r3,r2
   42250:	d0a01117 	ldw	r2,-32700(gp)
   42254:	1884703a 	and	r2,r3,r2
   42258:	d0a01115 	stw	r2,-32700(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4225c:	d0a01117 	ldw	r2,-32700(gp)
   42260:	100170fa 	wrctl	ienable,r2
   42264:	e0bffb17 	ldw	r2,-20(fp)
   42268:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4226c:	e0bffc17 	ldw	r2,-16(fp)
   42270:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   42274:	0005883a 	mov	r2,zero
   42278:	e0bff115 	stw	r2,-60(fp)
   4227c:	e0bff317 	ldw	r2,-52(fp)
   42280:	e0bff515 	stw	r2,-44(fp)
   42284:	e0bff517 	ldw	r2,-44(fp)
   42288:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   4228c:	e0bff117 	ldw	r2,-60(fp)
}
   42290:	e037883a 	mov	sp,fp
   42294:	df000017 	ldw	fp,0(sp)
   42298:	dec00104 	addi	sp,sp,4
   4229c:	f800283a 	ret

000422a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   422a0:	defffe04 	addi	sp,sp,-8
   422a4:	dfc00115 	stw	ra,4(sp)
   422a8:	df000015 	stw	fp,0(sp)
   422ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   422b0:	d0a00517 	ldw	r2,-32748(gp)
   422b4:	10000326 	beq	r2,zero,422c4 <alt_get_errno+0x24>
   422b8:	d0a00517 	ldw	r2,-32748(gp)
   422bc:	103ee83a 	callr	r2
   422c0:	00000106 	br	422c8 <alt_get_errno+0x28>
   422c4:	d0a01504 	addi	r2,gp,-32684
}
   422c8:	e037883a 	mov	sp,fp
   422cc:	dfc00117 	ldw	ra,4(sp)
   422d0:	df000017 	ldw	fp,0(sp)
   422d4:	dec00204 	addi	sp,sp,8
   422d8:	f800283a 	ret

000422dc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   422dc:	defffb04 	addi	sp,sp,-20
   422e0:	dfc00415 	stw	ra,16(sp)
   422e4:	df000315 	stw	fp,12(sp)
   422e8:	dc000215 	stw	r16,8(sp)
   422ec:	df000304 	addi	fp,sp,12
   422f0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   422f4:	e0bffe17 	ldw	r2,-8(fp)
   422f8:	10800217 	ldw	r2,8(r2)
   422fc:	10d00034 	orhi	r3,r2,16384
   42300:	e0bffe17 	ldw	r2,-8(fp)
   42304:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   42308:	e03ffd15 	stw	zero,-12(fp)
   4230c:	00002306 	br	4239c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   42310:	04020034 	movhi	r16,2048
   42314:	84048b04 	addi	r16,r16,4652
   42318:	e0bffd17 	ldw	r2,-12(fp)
   4231c:	01400304 	movi	r5,12
   42320:	1009883a 	mov	r4,r2
   42324:	00407a00 	call	407a0 <__mulsi3>
   42328:	8085883a 	add	r2,r16,r2
   4232c:	10c00017 	ldw	r3,0(r2)
   42330:	e0bffe17 	ldw	r2,-8(fp)
   42334:	10800017 	ldw	r2,0(r2)
   42338:	1880151e 	bne	r3,r2,42390 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   4233c:	04020034 	movhi	r16,2048
   42340:	84048b04 	addi	r16,r16,4652
   42344:	e0bffd17 	ldw	r2,-12(fp)
   42348:	01400304 	movi	r5,12
   4234c:	1009883a 	mov	r4,r2
   42350:	00407a00 	call	407a0 <__mulsi3>
   42354:	8085883a 	add	r2,r16,r2
   42358:	10800204 	addi	r2,r2,8
   4235c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   42360:	10000b0e 	bge	r2,zero,42390 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   42364:	01400304 	movi	r5,12
   42368:	e13ffd17 	ldw	r4,-12(fp)
   4236c:	00407a00 	call	407a0 <__mulsi3>
   42370:	1007883a 	mov	r3,r2
   42374:	00820034 	movhi	r2,2048
   42378:	10848b04 	addi	r2,r2,4652
   4237c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   42380:	e0bffe17 	ldw	r2,-8(fp)
   42384:	18800226 	beq	r3,r2,42390 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   42388:	00bffcc4 	movi	r2,-13
   4238c:	00000806 	br	423b0 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   42390:	e0bffd17 	ldw	r2,-12(fp)
   42394:	10800044 	addi	r2,r2,1
   42398:	e0bffd15 	stw	r2,-12(fp)
   4239c:	d0a00417 	ldw	r2,-32752(gp)
   423a0:	1007883a 	mov	r3,r2
   423a4:	e0bffd17 	ldw	r2,-12(fp)
   423a8:	18bfd92e 	bgeu	r3,r2,42310 <__alt_data_end+0xf4042310>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   423ac:	0005883a 	mov	r2,zero
}
   423b0:	e6ffff04 	addi	sp,fp,-4
   423b4:	dfc00217 	ldw	ra,8(sp)
   423b8:	df000117 	ldw	fp,4(sp)
   423bc:	dc000017 	ldw	r16,0(sp)
   423c0:	dec00304 	addi	sp,sp,12
   423c4:	f800283a 	ret

000423c8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   423c8:	defff604 	addi	sp,sp,-40
   423cc:	dfc00915 	stw	ra,36(sp)
   423d0:	df000815 	stw	fp,32(sp)
   423d4:	df000804 	addi	fp,sp,32
   423d8:	e13ffd15 	stw	r4,-12(fp)
   423dc:	e17ffe15 	stw	r5,-8(fp)
   423e0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   423e4:	00bfffc4 	movi	r2,-1
   423e8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   423ec:	00bffb44 	movi	r2,-19
   423f0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   423f4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   423f8:	d1600204 	addi	r5,gp,-32760
   423fc:	e13ffd17 	ldw	r4,-12(fp)
   42400:	0041f100 	call	41f10 <alt_find_dev>
   42404:	e0bff815 	stw	r2,-32(fp)
   42408:	e0bff817 	ldw	r2,-32(fp)
   4240c:	1000051e 	bne	r2,zero,42424 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   42410:	e13ffd17 	ldw	r4,-12(fp)
   42414:	00427700 	call	42770 <alt_find_file>
   42418:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   4241c:	00800044 	movi	r2,1
   42420:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   42424:	e0bff817 	ldw	r2,-32(fp)
   42428:	10002b26 	beq	r2,zero,424d8 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   4242c:	e13ff817 	ldw	r4,-32(fp)
   42430:	00428780 	call	42878 <alt_get_fd>
   42434:	e0bff915 	stw	r2,-28(fp)
   42438:	e0bff917 	ldw	r2,-28(fp)
   4243c:	1000030e 	bge	r2,zero,4244c <open+0x84>
    {
      status = index;
   42440:	e0bff917 	ldw	r2,-28(fp)
   42444:	e0bffa15 	stw	r2,-24(fp)
   42448:	00002506 	br	424e0 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   4244c:	01400304 	movi	r5,12
   42450:	e13ff917 	ldw	r4,-28(fp)
   42454:	00407a00 	call	407a0 <__mulsi3>
   42458:	1007883a 	mov	r3,r2
   4245c:	00820034 	movhi	r2,2048
   42460:	10848b04 	addi	r2,r2,4652
   42464:	1885883a 	add	r2,r3,r2
   42468:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   4246c:	e0fffe17 	ldw	r3,-8(fp)
   42470:	00900034 	movhi	r2,16384
   42474:	10bfffc4 	addi	r2,r2,-1
   42478:	1886703a 	and	r3,r3,r2
   4247c:	e0bffc17 	ldw	r2,-16(fp)
   42480:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   42484:	e0bffb17 	ldw	r2,-20(fp)
   42488:	1000051e 	bne	r2,zero,424a0 <open+0xd8>
   4248c:	e13ffc17 	ldw	r4,-16(fp)
   42490:	00422dc0 	call	422dc <alt_file_locked>
   42494:	e0bffa15 	stw	r2,-24(fp)
   42498:	e0bffa17 	ldw	r2,-24(fp)
   4249c:	10001016 	blt	r2,zero,424e0 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   424a0:	e0bff817 	ldw	r2,-32(fp)
   424a4:	10800317 	ldw	r2,12(r2)
   424a8:	10000826 	beq	r2,zero,424cc <open+0x104>
   424ac:	e0bff817 	ldw	r2,-32(fp)
   424b0:	10800317 	ldw	r2,12(r2)
   424b4:	e1ffff17 	ldw	r7,-4(fp)
   424b8:	e1bffe17 	ldw	r6,-8(fp)
   424bc:	e17ffd17 	ldw	r5,-12(fp)
   424c0:	e13ffc17 	ldw	r4,-16(fp)
   424c4:	103ee83a 	callr	r2
   424c8:	00000106 	br	424d0 <open+0x108>
   424cc:	0005883a 	mov	r2,zero
   424d0:	e0bffa15 	stw	r2,-24(fp)
   424d4:	00000206 	br	424e0 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   424d8:	00bffb44 	movi	r2,-19
   424dc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   424e0:	e0bffa17 	ldw	r2,-24(fp)
   424e4:	1000090e 	bge	r2,zero,4250c <open+0x144>
  {
    alt_release_fd (index);  
   424e8:	e13ff917 	ldw	r4,-28(fp)
   424ec:	00425240 	call	42524 <alt_release_fd>
    ALT_ERRNO = -status;
   424f0:	00422a00 	call	422a0 <alt_get_errno>
   424f4:	1007883a 	mov	r3,r2
   424f8:	e0bffa17 	ldw	r2,-24(fp)
   424fc:	0085c83a 	sub	r2,zero,r2
   42500:	18800015 	stw	r2,0(r3)
    return -1;
   42504:	00bfffc4 	movi	r2,-1
   42508:	00000106 	br	42510 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   4250c:	e0bff917 	ldw	r2,-28(fp)
}
   42510:	e037883a 	mov	sp,fp
   42514:	dfc00117 	ldw	ra,4(sp)
   42518:	df000017 	ldw	fp,0(sp)
   4251c:	dec00204 	addi	sp,sp,8
   42520:	f800283a 	ret

00042524 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   42524:	defffc04 	addi	sp,sp,-16
   42528:	dfc00315 	stw	ra,12(sp)
   4252c:	df000215 	stw	fp,8(sp)
   42530:	dc000115 	stw	r16,4(sp)
   42534:	df000204 	addi	fp,sp,8
   42538:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   4253c:	e0bffe17 	ldw	r2,-8(fp)
   42540:	108000d0 	cmplti	r2,r2,3
   42544:	1000111e 	bne	r2,zero,4258c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   42548:	04020034 	movhi	r16,2048
   4254c:	84048b04 	addi	r16,r16,4652
   42550:	e0bffe17 	ldw	r2,-8(fp)
   42554:	01400304 	movi	r5,12
   42558:	1009883a 	mov	r4,r2
   4255c:	00407a00 	call	407a0 <__mulsi3>
   42560:	8085883a 	add	r2,r16,r2
   42564:	10800204 	addi	r2,r2,8
   42568:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   4256c:	04020034 	movhi	r16,2048
   42570:	84048b04 	addi	r16,r16,4652
   42574:	e0bffe17 	ldw	r2,-8(fp)
   42578:	01400304 	movi	r5,12
   4257c:	1009883a 	mov	r4,r2
   42580:	00407a00 	call	407a0 <__mulsi3>
   42584:	8085883a 	add	r2,r16,r2
   42588:	10000015 	stw	zero,0(r2)
  }
}
   4258c:	0001883a 	nop
   42590:	e6ffff04 	addi	sp,fp,-4
   42594:	dfc00217 	ldw	ra,8(sp)
   42598:	df000117 	ldw	fp,4(sp)
   4259c:	dc000017 	ldw	r16,0(sp)
   425a0:	dec00304 	addi	sp,sp,12
   425a4:	f800283a 	ret

000425a8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   425a8:	defffa04 	addi	sp,sp,-24
   425ac:	df000515 	stw	fp,20(sp)
   425b0:	df000504 	addi	fp,sp,20
   425b4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   425b8:	0005303a 	rdctl	r2,status
   425bc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   425c0:	e0fffc17 	ldw	r3,-16(fp)
   425c4:	00bfff84 	movi	r2,-2
   425c8:	1884703a 	and	r2,r3,r2
   425cc:	1001703a 	wrctl	status,r2
  
  return context;
   425d0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   425d4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   425d8:	e0bfff17 	ldw	r2,-4(fp)
   425dc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   425e0:	e0bffd17 	ldw	r2,-12(fp)
   425e4:	10800017 	ldw	r2,0(r2)
   425e8:	e0fffd17 	ldw	r3,-12(fp)
   425ec:	18c00117 	ldw	r3,4(r3)
   425f0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   425f4:	e0bffd17 	ldw	r2,-12(fp)
   425f8:	10800117 	ldw	r2,4(r2)
   425fc:	e0fffd17 	ldw	r3,-12(fp)
   42600:	18c00017 	ldw	r3,0(r3)
   42604:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   42608:	e0bffd17 	ldw	r2,-12(fp)
   4260c:	e0fffd17 	ldw	r3,-12(fp)
   42610:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   42614:	e0bffd17 	ldw	r2,-12(fp)
   42618:	e0fffd17 	ldw	r3,-12(fp)
   4261c:	10c00015 	stw	r3,0(r2)
   42620:	e0bffb17 	ldw	r2,-20(fp)
   42624:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   42628:	e0bffe17 	ldw	r2,-8(fp)
   4262c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   42630:	0001883a 	nop
   42634:	e037883a 	mov	sp,fp
   42638:	df000017 	ldw	fp,0(sp)
   4263c:	dec00104 	addi	sp,sp,4
   42640:	f800283a 	ret

00042644 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   42644:	defffb04 	addi	sp,sp,-20
   42648:	dfc00415 	stw	ra,16(sp)
   4264c:	df000315 	stw	fp,12(sp)
   42650:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   42654:	d0a00717 	ldw	r2,-32740(gp)
   42658:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   4265c:	d0a01317 	ldw	r2,-32692(gp)
   42660:	10800044 	addi	r2,r2,1
   42664:	d0a01315 	stw	r2,-32692(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   42668:	00002e06 	br	42724 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   4266c:	e0bffd17 	ldw	r2,-12(fp)
   42670:	10800017 	ldw	r2,0(r2)
   42674:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   42678:	e0bffd17 	ldw	r2,-12(fp)
   4267c:	10800403 	ldbu	r2,16(r2)
   42680:	10803fcc 	andi	r2,r2,255
   42684:	10000426 	beq	r2,zero,42698 <alt_tick+0x54>
   42688:	d0a01317 	ldw	r2,-32692(gp)
   4268c:	1000021e 	bne	r2,zero,42698 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   42690:	e0bffd17 	ldw	r2,-12(fp)
   42694:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   42698:	e0bffd17 	ldw	r2,-12(fp)
   4269c:	10800217 	ldw	r2,8(r2)
   426a0:	d0e01317 	ldw	r3,-32692(gp)
   426a4:	18801d36 	bltu	r3,r2,4271c <alt_tick+0xd8>
   426a8:	e0bffd17 	ldw	r2,-12(fp)
   426ac:	10800403 	ldbu	r2,16(r2)
   426b0:	10803fcc 	andi	r2,r2,255
   426b4:	1000191e 	bne	r2,zero,4271c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   426b8:	e0bffd17 	ldw	r2,-12(fp)
   426bc:	10800317 	ldw	r2,12(r2)
   426c0:	e0fffd17 	ldw	r3,-12(fp)
   426c4:	18c00517 	ldw	r3,20(r3)
   426c8:	1809883a 	mov	r4,r3
   426cc:	103ee83a 	callr	r2
   426d0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   426d4:	e0bfff17 	ldw	r2,-4(fp)
   426d8:	1000031e 	bne	r2,zero,426e8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   426dc:	e13ffd17 	ldw	r4,-12(fp)
   426e0:	00425a80 	call	425a8 <alt_alarm_stop>
   426e4:	00000d06 	br	4271c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   426e8:	e0bffd17 	ldw	r2,-12(fp)
   426ec:	10c00217 	ldw	r3,8(r2)
   426f0:	e0bfff17 	ldw	r2,-4(fp)
   426f4:	1887883a 	add	r3,r3,r2
   426f8:	e0bffd17 	ldw	r2,-12(fp)
   426fc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   42700:	e0bffd17 	ldw	r2,-12(fp)
   42704:	10c00217 	ldw	r3,8(r2)
   42708:	d0a01317 	ldw	r2,-32692(gp)
   4270c:	1880032e 	bgeu	r3,r2,4271c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   42710:	e0bffd17 	ldw	r2,-12(fp)
   42714:	00c00044 	movi	r3,1
   42718:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   4271c:	e0bffe17 	ldw	r2,-8(fp)
   42720:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   42724:	e0fffd17 	ldw	r3,-12(fp)
   42728:	d0a00704 	addi	r2,gp,-32740
   4272c:	18bfcf1e 	bne	r3,r2,4266c <__alt_data_end+0xf404266c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   42730:	0001883a 	nop
}
   42734:	0001883a 	nop
   42738:	e037883a 	mov	sp,fp
   4273c:	dfc00117 	ldw	ra,4(sp)
   42740:	df000017 	ldw	fp,0(sp)
   42744:	dec00204 	addi	sp,sp,8
   42748:	f800283a 	ret

0004274c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   4274c:	deffff04 	addi	sp,sp,-4
   42750:	df000015 	stw	fp,0(sp)
   42754:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   42758:	000170fa 	wrctl	ienable,zero
}
   4275c:	0001883a 	nop
   42760:	e037883a 	mov	sp,fp
   42764:	df000017 	ldw	fp,0(sp)
   42768:	dec00104 	addi	sp,sp,4
   4276c:	f800283a 	ret

00042770 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   42770:	defffb04 	addi	sp,sp,-20
   42774:	dfc00415 	stw	ra,16(sp)
   42778:	df000315 	stw	fp,12(sp)
   4277c:	df000304 	addi	fp,sp,12
   42780:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   42784:	d0a00017 	ldw	r2,-32768(gp)
   42788:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   4278c:	00003106 	br	42854 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   42790:	e0bffd17 	ldw	r2,-12(fp)
   42794:	10800217 	ldw	r2,8(r2)
   42798:	1009883a 	mov	r4,r2
   4279c:	00441680 	call	44168 <strlen>
   427a0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   427a4:	e0bffd17 	ldw	r2,-12(fp)
   427a8:	10c00217 	ldw	r3,8(r2)
   427ac:	e0bffe17 	ldw	r2,-8(fp)
   427b0:	10bfffc4 	addi	r2,r2,-1
   427b4:	1885883a 	add	r2,r3,r2
   427b8:	10800003 	ldbu	r2,0(r2)
   427bc:	10803fcc 	andi	r2,r2,255
   427c0:	1080201c 	xori	r2,r2,128
   427c4:	10bfe004 	addi	r2,r2,-128
   427c8:	10800bd8 	cmpnei	r2,r2,47
   427cc:	1000031e 	bne	r2,zero,427dc <alt_find_file+0x6c>
    {
      len -= 1;
   427d0:	e0bffe17 	ldw	r2,-8(fp)
   427d4:	10bfffc4 	addi	r2,r2,-1
   427d8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   427dc:	e0bffe17 	ldw	r2,-8(fp)
   427e0:	e0ffff17 	ldw	r3,-4(fp)
   427e4:	1885883a 	add	r2,r3,r2
   427e8:	10800003 	ldbu	r2,0(r2)
   427ec:	10803fcc 	andi	r2,r2,255
   427f0:	1080201c 	xori	r2,r2,128
   427f4:	10bfe004 	addi	r2,r2,-128
   427f8:	10800be0 	cmpeqi	r2,r2,47
   427fc:	1000081e 	bne	r2,zero,42820 <alt_find_file+0xb0>
   42800:	e0bffe17 	ldw	r2,-8(fp)
   42804:	e0ffff17 	ldw	r3,-4(fp)
   42808:	1885883a 	add	r2,r3,r2
   4280c:	10800003 	ldbu	r2,0(r2)
   42810:	10803fcc 	andi	r2,r2,255
   42814:	1080201c 	xori	r2,r2,128
   42818:	10bfe004 	addi	r2,r2,-128
   4281c:	10000a1e 	bne	r2,zero,42848 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   42820:	e0bffd17 	ldw	r2,-12(fp)
   42824:	10800217 	ldw	r2,8(r2)
   42828:	e0fffe17 	ldw	r3,-8(fp)
   4282c:	180d883a 	mov	r6,r3
   42830:	e17fff17 	ldw	r5,-4(fp)
   42834:	1009883a 	mov	r4,r2
   42838:	00438900 	call	43890 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   4283c:	1000021e 	bne	r2,zero,42848 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   42840:	e0bffd17 	ldw	r2,-12(fp)
   42844:	00000706 	br	42864 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   42848:	e0bffd17 	ldw	r2,-12(fp)
   4284c:	10800017 	ldw	r2,0(r2)
   42850:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   42854:	e0fffd17 	ldw	r3,-12(fp)
   42858:	d0a00004 	addi	r2,gp,-32768
   4285c:	18bfcc1e 	bne	r3,r2,42790 <__alt_data_end+0xf4042790>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   42860:	0005883a 	mov	r2,zero
}
   42864:	e037883a 	mov	sp,fp
   42868:	dfc00117 	ldw	ra,4(sp)
   4286c:	df000017 	ldw	fp,0(sp)
   42870:	dec00204 	addi	sp,sp,8
   42874:	f800283a 	ret

00042878 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   42878:	defffa04 	addi	sp,sp,-24
   4287c:	dfc00515 	stw	ra,20(sp)
   42880:	df000415 	stw	fp,16(sp)
   42884:	dc000315 	stw	r16,12(sp)
   42888:	df000404 	addi	fp,sp,16
   4288c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   42890:	00bffa04 	movi	r2,-24
   42894:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   42898:	e03ffc15 	stw	zero,-16(fp)
   4289c:	00001d06 	br	42914 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   428a0:	04020034 	movhi	r16,2048
   428a4:	84048b04 	addi	r16,r16,4652
   428a8:	e0bffc17 	ldw	r2,-16(fp)
   428ac:	01400304 	movi	r5,12
   428b0:	1009883a 	mov	r4,r2
   428b4:	00407a00 	call	407a0 <__mulsi3>
   428b8:	8085883a 	add	r2,r16,r2
   428bc:	10800017 	ldw	r2,0(r2)
   428c0:	1000111e 	bne	r2,zero,42908 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   428c4:	04020034 	movhi	r16,2048
   428c8:	84048b04 	addi	r16,r16,4652
   428cc:	e0bffc17 	ldw	r2,-16(fp)
   428d0:	01400304 	movi	r5,12
   428d4:	1009883a 	mov	r4,r2
   428d8:	00407a00 	call	407a0 <__mulsi3>
   428dc:	8085883a 	add	r2,r16,r2
   428e0:	e0fffe17 	ldw	r3,-8(fp)
   428e4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   428e8:	d0e00417 	ldw	r3,-32752(gp)
   428ec:	e0bffc17 	ldw	r2,-16(fp)
   428f0:	1880020e 	bge	r3,r2,428fc <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   428f4:	e0bffc17 	ldw	r2,-16(fp)
   428f8:	d0a00415 	stw	r2,-32752(gp)
      }
      rc = i;
   428fc:	e0bffc17 	ldw	r2,-16(fp)
   42900:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   42904:	00000606 	br	42920 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   42908:	e0bffc17 	ldw	r2,-16(fp)
   4290c:	10800044 	addi	r2,r2,1
   42910:	e0bffc15 	stw	r2,-16(fp)
   42914:	e0bffc17 	ldw	r2,-16(fp)
   42918:	10800810 	cmplti	r2,r2,32
   4291c:	103fe01e 	bne	r2,zero,428a0 <__alt_data_end+0xf40428a0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   42920:	e0bffd17 	ldw	r2,-12(fp)
}
   42924:	e6ffff04 	addi	sp,fp,-4
   42928:	dfc00217 	ldw	ra,8(sp)
   4292c:	df000117 	ldw	fp,4(sp)
   42930:	dc000017 	ldw	r16,0(sp)
   42934:	dec00304 	addi	sp,sp,12
   42938:	f800283a 	ret

0004293c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   4293c:	defffe04 	addi	sp,sp,-8
   42940:	df000115 	stw	fp,4(sp)
   42944:	df000104 	addi	fp,sp,4
   42948:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   4294c:	e0bfff17 	ldw	r2,-4(fp)
   42950:	10bffe84 	addi	r2,r2,-6
   42954:	10c00428 	cmpgeui	r3,r2,16
   42958:	18001a1e 	bne	r3,zero,429c4 <alt_exception_cause_generated_bad_addr+0x88>
   4295c:	100690ba 	slli	r3,r2,2
   42960:	00800134 	movhi	r2,4
   42964:	108a5d04 	addi	r2,r2,10612
   42968:	1885883a 	add	r2,r3,r2
   4296c:	10800017 	ldw	r2,0(r2)
   42970:	1000683a 	jmp	r2
   42974:	000429b4 	movhi	zero,4262
   42978:	000429b4 	movhi	zero,4262
   4297c:	000429c4 	movi	zero,4263
   42980:	000429c4 	movi	zero,4263
   42984:	000429c4 	movi	zero,4263
   42988:	000429b4 	movhi	zero,4262
   4298c:	000429bc 	xorhi	zero,zero,4262
   42990:	000429c4 	movi	zero,4263
   42994:	000429b4 	movhi	zero,4262
   42998:	000429b4 	movhi	zero,4262
   4299c:	000429c4 	movi	zero,4263
   429a0:	000429b4 	movhi	zero,4262
   429a4:	000429bc 	xorhi	zero,zero,4262
   429a8:	000429c4 	movi	zero,4263
   429ac:	000429c4 	movi	zero,4263
   429b0:	000429b4 	movhi	zero,4262
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   429b4:	00800044 	movi	r2,1
   429b8:	00000306 	br	429c8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   429bc:	0005883a 	mov	r2,zero
   429c0:	00000106 	br	429c8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   429c4:	0005883a 	mov	r2,zero
  }
}
   429c8:	e037883a 	mov	sp,fp
   429cc:	df000017 	ldw	fp,0(sp)
   429d0:	dec00104 	addi	sp,sp,4
   429d4:	f800283a 	ret

000429d8 <atexit>:
   429d8:	200b883a 	mov	r5,r4
   429dc:	000f883a 	mov	r7,zero
   429e0:	000d883a 	mov	r6,zero
   429e4:	0009883a 	mov	r4,zero
   429e8:	00443541 	jmpi	44354 <__register_exitproc>

000429ec <exit>:
   429ec:	defffe04 	addi	sp,sp,-8
   429f0:	000b883a 	mov	r5,zero
   429f4:	dc000015 	stw	r16,0(sp)
   429f8:	dfc00115 	stw	ra,4(sp)
   429fc:	2021883a 	mov	r16,r4
   42a00:	004446c0 	call	4446c <__call_exitprocs>
   42a04:	00820034 	movhi	r2,2048
   42a08:	1086ff04 	addi	r2,r2,7164
   42a0c:	11000017 	ldw	r4,0(r2)
   42a10:	20800f17 	ldw	r2,60(r4)
   42a14:	10000126 	beq	r2,zero,42a1c <exit+0x30>
   42a18:	103ee83a 	callr	r2
   42a1c:	8009883a 	mov	r4,r16
   42a20:	00459480 	call	45948 <_exit>

00042a24 <_fputs_r>:
   42a24:	defff804 	addi	sp,sp,-32
   42a28:	dc400615 	stw	r17,24(sp)
   42a2c:	2023883a 	mov	r17,r4
   42a30:	2809883a 	mov	r4,r5
   42a34:	dc000515 	stw	r16,20(sp)
   42a38:	dfc00715 	stw	ra,28(sp)
   42a3c:	3021883a 	mov	r16,r6
   42a40:	d9400315 	stw	r5,12(sp)
   42a44:	00441680 	call	44168 <strlen>
   42a48:	d8800215 	stw	r2,8(sp)
   42a4c:	d8800415 	stw	r2,16(sp)
   42a50:	d8800304 	addi	r2,sp,12
   42a54:	d8800015 	stw	r2,0(sp)
   42a58:	00800044 	movi	r2,1
   42a5c:	d8800115 	stw	r2,4(sp)
   42a60:	88000226 	beq	r17,zero,42a6c <_fputs_r+0x48>
   42a64:	88800e17 	ldw	r2,56(r17)
   42a68:	10001226 	beq	r2,zero,42ab4 <_fputs_r+0x90>
   42a6c:	8080030b 	ldhu	r2,12(r16)
   42a70:	10c8000c 	andi	r3,r2,8192
   42a74:	1800061e 	bne	r3,zero,42a90 <_fputs_r+0x6c>
   42a78:	81001917 	ldw	r4,100(r16)
   42a7c:	00f7ffc4 	movi	r3,-8193
   42a80:	10880014 	ori	r2,r2,8192
   42a84:	20c6703a 	and	r3,r4,r3
   42a88:	8080030d 	sth	r2,12(r16)
   42a8c:	80c01915 	stw	r3,100(r16)
   42a90:	d80d883a 	mov	r6,sp
   42a94:	800b883a 	mov	r5,r16
   42a98:	8809883a 	mov	r4,r17
   42a9c:	0042ad80 	call	42ad8 <__sfvwrite_r>
   42aa0:	dfc00717 	ldw	ra,28(sp)
   42aa4:	dc400617 	ldw	r17,24(sp)
   42aa8:	dc000517 	ldw	r16,20(sp)
   42aac:	dec00804 	addi	sp,sp,32
   42ab0:	f800283a 	ret
   42ab4:	8809883a 	mov	r4,r17
   42ab8:	0044bf40 	call	44bf4 <__sinit>
   42abc:	003feb06 	br	42a6c <__alt_data_end+0xf4042a6c>

00042ac0 <fputs>:
   42ac0:	00820034 	movhi	r2,2048
   42ac4:	10870004 	addi	r2,r2,7168
   42ac8:	280d883a 	mov	r6,r5
   42acc:	200b883a 	mov	r5,r4
   42ad0:	11000017 	ldw	r4,0(r2)
   42ad4:	0042a241 	jmpi	42a24 <_fputs_r>

00042ad8 <__sfvwrite_r>:
   42ad8:	30800217 	ldw	r2,8(r6)
   42adc:	10006726 	beq	r2,zero,42c7c <__sfvwrite_r+0x1a4>
   42ae0:	28c0030b 	ldhu	r3,12(r5)
   42ae4:	defff404 	addi	sp,sp,-48
   42ae8:	dd400715 	stw	r21,28(sp)
   42aec:	dd000615 	stw	r20,24(sp)
   42af0:	dc000215 	stw	r16,8(sp)
   42af4:	dfc00b15 	stw	ra,44(sp)
   42af8:	df000a15 	stw	fp,40(sp)
   42afc:	ddc00915 	stw	r23,36(sp)
   42b00:	dd800815 	stw	r22,32(sp)
   42b04:	dcc00515 	stw	r19,20(sp)
   42b08:	dc800415 	stw	r18,16(sp)
   42b0c:	dc400315 	stw	r17,12(sp)
   42b10:	1880020c 	andi	r2,r3,8
   42b14:	2821883a 	mov	r16,r5
   42b18:	202b883a 	mov	r21,r4
   42b1c:	3029883a 	mov	r20,r6
   42b20:	10002726 	beq	r2,zero,42bc0 <__sfvwrite_r+0xe8>
   42b24:	28800417 	ldw	r2,16(r5)
   42b28:	10002526 	beq	r2,zero,42bc0 <__sfvwrite_r+0xe8>
   42b2c:	1880008c 	andi	r2,r3,2
   42b30:	a4400017 	ldw	r17,0(r20)
   42b34:	10002a26 	beq	r2,zero,42be0 <__sfvwrite_r+0x108>
   42b38:	05a00034 	movhi	r22,32768
   42b3c:	0027883a 	mov	r19,zero
   42b40:	0025883a 	mov	r18,zero
   42b44:	b5bf0004 	addi	r22,r22,-1024
   42b48:	980d883a 	mov	r6,r19
   42b4c:	a809883a 	mov	r4,r21
   42b50:	90004626 	beq	r18,zero,42c6c <__sfvwrite_r+0x194>
   42b54:	900f883a 	mov	r7,r18
   42b58:	b480022e 	bgeu	r22,r18,42b64 <__sfvwrite_r+0x8c>
   42b5c:	01e00034 	movhi	r7,32768
   42b60:	39ff0004 	addi	r7,r7,-1024
   42b64:	80800917 	ldw	r2,36(r16)
   42b68:	81400717 	ldw	r5,28(r16)
   42b6c:	103ee83a 	callr	r2
   42b70:	00805a0e 	bge	zero,r2,42cdc <__sfvwrite_r+0x204>
   42b74:	a0c00217 	ldw	r3,8(r20)
   42b78:	98a7883a 	add	r19,r19,r2
   42b7c:	90a5c83a 	sub	r18,r18,r2
   42b80:	1885c83a 	sub	r2,r3,r2
   42b84:	a0800215 	stw	r2,8(r20)
   42b88:	103fef1e 	bne	r2,zero,42b48 <__alt_data_end+0xf4042b48>
   42b8c:	0005883a 	mov	r2,zero
   42b90:	dfc00b17 	ldw	ra,44(sp)
   42b94:	df000a17 	ldw	fp,40(sp)
   42b98:	ddc00917 	ldw	r23,36(sp)
   42b9c:	dd800817 	ldw	r22,32(sp)
   42ba0:	dd400717 	ldw	r21,28(sp)
   42ba4:	dd000617 	ldw	r20,24(sp)
   42ba8:	dcc00517 	ldw	r19,20(sp)
   42bac:	dc800417 	ldw	r18,16(sp)
   42bb0:	dc400317 	ldw	r17,12(sp)
   42bb4:	dc000217 	ldw	r16,8(sp)
   42bb8:	dec00c04 	addi	sp,sp,48
   42bbc:	f800283a 	ret
   42bc0:	800b883a 	mov	r5,r16
   42bc4:	a809883a 	mov	r4,r21
   42bc8:	00442000 	call	44200 <__swsetup_r>
   42bcc:	1000ee1e 	bne	r2,zero,42f88 <__sfvwrite_r+0x4b0>
   42bd0:	80c0030b 	ldhu	r3,12(r16)
   42bd4:	a4400017 	ldw	r17,0(r20)
   42bd8:	1880008c 	andi	r2,r3,2
   42bdc:	103fd61e 	bne	r2,zero,42b38 <__alt_data_end+0xf4042b38>
   42be0:	1880004c 	andi	r2,r3,1
   42be4:	1000421e 	bne	r2,zero,42cf0 <__sfvwrite_r+0x218>
   42be8:	0039883a 	mov	fp,zero
   42bec:	0025883a 	mov	r18,zero
   42bf0:	90001a26 	beq	r18,zero,42c5c <__sfvwrite_r+0x184>
   42bf4:	1880800c 	andi	r2,r3,512
   42bf8:	84c00217 	ldw	r19,8(r16)
   42bfc:	10002126 	beq	r2,zero,42c84 <__sfvwrite_r+0x1ac>
   42c00:	982f883a 	mov	r23,r19
   42c04:	94c09636 	bltu	r18,r19,42e60 <__sfvwrite_r+0x388>
   42c08:	1881200c 	andi	r2,r3,1152
   42c0c:	1000a11e 	bne	r2,zero,42e94 <__sfvwrite_r+0x3bc>
   42c10:	81000017 	ldw	r4,0(r16)
   42c14:	b80d883a 	mov	r6,r23
   42c18:	e00b883a 	mov	r5,fp
   42c1c:	0043a540 	call	43a54 <memmove>
   42c20:	80c00217 	ldw	r3,8(r16)
   42c24:	81000017 	ldw	r4,0(r16)
   42c28:	9005883a 	mov	r2,r18
   42c2c:	1ce7c83a 	sub	r19,r3,r19
   42c30:	25cf883a 	add	r7,r4,r23
   42c34:	84c00215 	stw	r19,8(r16)
   42c38:	81c00015 	stw	r7,0(r16)
   42c3c:	a0c00217 	ldw	r3,8(r20)
   42c40:	e0b9883a 	add	fp,fp,r2
   42c44:	90a5c83a 	sub	r18,r18,r2
   42c48:	18a7c83a 	sub	r19,r3,r2
   42c4c:	a4c00215 	stw	r19,8(r20)
   42c50:	983fce26 	beq	r19,zero,42b8c <__alt_data_end+0xf4042b8c>
   42c54:	80c0030b 	ldhu	r3,12(r16)
   42c58:	903fe61e 	bne	r18,zero,42bf4 <__alt_data_end+0xf4042bf4>
   42c5c:	8f000017 	ldw	fp,0(r17)
   42c60:	8c800117 	ldw	r18,4(r17)
   42c64:	8c400204 	addi	r17,r17,8
   42c68:	003fe106 	br	42bf0 <__alt_data_end+0xf4042bf0>
   42c6c:	8cc00017 	ldw	r19,0(r17)
   42c70:	8c800117 	ldw	r18,4(r17)
   42c74:	8c400204 	addi	r17,r17,8
   42c78:	003fb306 	br	42b48 <__alt_data_end+0xf4042b48>
   42c7c:	0005883a 	mov	r2,zero
   42c80:	f800283a 	ret
   42c84:	81000017 	ldw	r4,0(r16)
   42c88:	80800417 	ldw	r2,16(r16)
   42c8c:	11005a36 	bltu	r2,r4,42df8 <__sfvwrite_r+0x320>
   42c90:	85c00517 	ldw	r23,20(r16)
   42c94:	95c05836 	bltu	r18,r23,42df8 <__sfvwrite_r+0x320>
   42c98:	00a00034 	movhi	r2,32768
   42c9c:	10bfffc4 	addi	r2,r2,-1
   42ca0:	9009883a 	mov	r4,r18
   42ca4:	1480012e 	bgeu	r2,r18,42cac <__sfvwrite_r+0x1d4>
   42ca8:	1009883a 	mov	r4,r2
   42cac:	b80b883a 	mov	r5,r23
   42cb0:	00405ec0 	call	405ec <__divsi3>
   42cb4:	b80b883a 	mov	r5,r23
   42cb8:	1009883a 	mov	r4,r2
   42cbc:	00407a00 	call	407a0 <__mulsi3>
   42cc0:	81400717 	ldw	r5,28(r16)
   42cc4:	80c00917 	ldw	r3,36(r16)
   42cc8:	100f883a 	mov	r7,r2
   42ccc:	e00d883a 	mov	r6,fp
   42cd0:	a809883a 	mov	r4,r21
   42cd4:	183ee83a 	callr	r3
   42cd8:	00bfd816 	blt	zero,r2,42c3c <__alt_data_end+0xf4042c3c>
   42cdc:	8080030b 	ldhu	r2,12(r16)
   42ce0:	10801014 	ori	r2,r2,64
   42ce4:	8080030d 	sth	r2,12(r16)
   42ce8:	00bfffc4 	movi	r2,-1
   42cec:	003fa806 	br	42b90 <__alt_data_end+0xf4042b90>
   42cf0:	0027883a 	mov	r19,zero
   42cf4:	0011883a 	mov	r8,zero
   42cf8:	0039883a 	mov	fp,zero
   42cfc:	0025883a 	mov	r18,zero
   42d00:	90001f26 	beq	r18,zero,42d80 <__sfvwrite_r+0x2a8>
   42d04:	40005a26 	beq	r8,zero,42e70 <__sfvwrite_r+0x398>
   42d08:	982d883a 	mov	r22,r19
   42d0c:	94c0012e 	bgeu	r18,r19,42d14 <__sfvwrite_r+0x23c>
   42d10:	902d883a 	mov	r22,r18
   42d14:	81000017 	ldw	r4,0(r16)
   42d18:	80800417 	ldw	r2,16(r16)
   42d1c:	b02f883a 	mov	r23,r22
   42d20:	81c00517 	ldw	r7,20(r16)
   42d24:	1100032e 	bgeu	r2,r4,42d34 <__sfvwrite_r+0x25c>
   42d28:	80c00217 	ldw	r3,8(r16)
   42d2c:	38c7883a 	add	r3,r7,r3
   42d30:	1d801816 	blt	r3,r22,42d94 <__sfvwrite_r+0x2bc>
   42d34:	b1c03e16 	blt	r22,r7,42e30 <__sfvwrite_r+0x358>
   42d38:	80800917 	ldw	r2,36(r16)
   42d3c:	81400717 	ldw	r5,28(r16)
   42d40:	e00d883a 	mov	r6,fp
   42d44:	da000115 	stw	r8,4(sp)
   42d48:	a809883a 	mov	r4,r21
   42d4c:	103ee83a 	callr	r2
   42d50:	102f883a 	mov	r23,r2
   42d54:	da000117 	ldw	r8,4(sp)
   42d58:	00bfe00e 	bge	zero,r2,42cdc <__alt_data_end+0xf4042cdc>
   42d5c:	9de7c83a 	sub	r19,r19,r23
   42d60:	98001f26 	beq	r19,zero,42de0 <__sfvwrite_r+0x308>
   42d64:	a0800217 	ldw	r2,8(r20)
   42d68:	e5f9883a 	add	fp,fp,r23
   42d6c:	95e5c83a 	sub	r18,r18,r23
   42d70:	15efc83a 	sub	r23,r2,r23
   42d74:	a5c00215 	stw	r23,8(r20)
   42d78:	b83f8426 	beq	r23,zero,42b8c <__alt_data_end+0xf4042b8c>
   42d7c:	903fe11e 	bne	r18,zero,42d04 <__alt_data_end+0xf4042d04>
   42d80:	8f000017 	ldw	fp,0(r17)
   42d84:	8c800117 	ldw	r18,4(r17)
   42d88:	0011883a 	mov	r8,zero
   42d8c:	8c400204 	addi	r17,r17,8
   42d90:	003fdb06 	br	42d00 <__alt_data_end+0xf4042d00>
   42d94:	180d883a 	mov	r6,r3
   42d98:	e00b883a 	mov	r5,fp
   42d9c:	da000115 	stw	r8,4(sp)
   42da0:	d8c00015 	stw	r3,0(sp)
   42da4:	0043a540 	call	43a54 <memmove>
   42da8:	d8c00017 	ldw	r3,0(sp)
   42dac:	80800017 	ldw	r2,0(r16)
   42db0:	800b883a 	mov	r5,r16
   42db4:	a809883a 	mov	r4,r21
   42db8:	10c5883a 	add	r2,r2,r3
   42dbc:	80800015 	stw	r2,0(r16)
   42dc0:	d8c00015 	stw	r3,0(sp)
   42dc4:	00448080 	call	44808 <_fflush_r>
   42dc8:	d8c00017 	ldw	r3,0(sp)
   42dcc:	da000117 	ldw	r8,4(sp)
   42dd0:	103fc21e 	bne	r2,zero,42cdc <__alt_data_end+0xf4042cdc>
   42dd4:	182f883a 	mov	r23,r3
   42dd8:	9de7c83a 	sub	r19,r19,r23
   42ddc:	983fe11e 	bne	r19,zero,42d64 <__alt_data_end+0xf4042d64>
   42de0:	800b883a 	mov	r5,r16
   42de4:	a809883a 	mov	r4,r21
   42de8:	00448080 	call	44808 <_fflush_r>
   42dec:	103fbb1e 	bne	r2,zero,42cdc <__alt_data_end+0xf4042cdc>
   42df0:	0011883a 	mov	r8,zero
   42df4:	003fdb06 	br	42d64 <__alt_data_end+0xf4042d64>
   42df8:	94c0012e 	bgeu	r18,r19,42e00 <__sfvwrite_r+0x328>
   42dfc:	9027883a 	mov	r19,r18
   42e00:	980d883a 	mov	r6,r19
   42e04:	e00b883a 	mov	r5,fp
   42e08:	0043a540 	call	43a54 <memmove>
   42e0c:	80800217 	ldw	r2,8(r16)
   42e10:	80c00017 	ldw	r3,0(r16)
   42e14:	14c5c83a 	sub	r2,r2,r19
   42e18:	1cc7883a 	add	r3,r3,r19
   42e1c:	80800215 	stw	r2,8(r16)
   42e20:	80c00015 	stw	r3,0(r16)
   42e24:	10004326 	beq	r2,zero,42f34 <__sfvwrite_r+0x45c>
   42e28:	9805883a 	mov	r2,r19
   42e2c:	003f8306 	br	42c3c <__alt_data_end+0xf4042c3c>
   42e30:	b00d883a 	mov	r6,r22
   42e34:	e00b883a 	mov	r5,fp
   42e38:	da000115 	stw	r8,4(sp)
   42e3c:	0043a540 	call	43a54 <memmove>
   42e40:	80800217 	ldw	r2,8(r16)
   42e44:	80c00017 	ldw	r3,0(r16)
   42e48:	da000117 	ldw	r8,4(sp)
   42e4c:	1585c83a 	sub	r2,r2,r22
   42e50:	1dad883a 	add	r22,r3,r22
   42e54:	80800215 	stw	r2,8(r16)
   42e58:	85800015 	stw	r22,0(r16)
   42e5c:	003fbf06 	br	42d5c <__alt_data_end+0xf4042d5c>
   42e60:	81000017 	ldw	r4,0(r16)
   42e64:	9027883a 	mov	r19,r18
   42e68:	902f883a 	mov	r23,r18
   42e6c:	003f6906 	br	42c14 <__alt_data_end+0xf4042c14>
   42e70:	900d883a 	mov	r6,r18
   42e74:	01400284 	movi	r5,10
   42e78:	e009883a 	mov	r4,fp
   42e7c:	00437ac0 	call	437ac <memchr>
   42e80:	10003e26 	beq	r2,zero,42f7c <__sfvwrite_r+0x4a4>
   42e84:	10800044 	addi	r2,r2,1
   42e88:	1727c83a 	sub	r19,r2,fp
   42e8c:	02000044 	movi	r8,1
   42e90:	003f9d06 	br	42d08 <__alt_data_end+0xf4042d08>
   42e94:	80800517 	ldw	r2,20(r16)
   42e98:	81400417 	ldw	r5,16(r16)
   42e9c:	81c00017 	ldw	r7,0(r16)
   42ea0:	10a7883a 	add	r19,r2,r2
   42ea4:	9885883a 	add	r2,r19,r2
   42ea8:	1026d7fa 	srli	r19,r2,31
   42eac:	396dc83a 	sub	r22,r7,r5
   42eb0:	b1000044 	addi	r4,r22,1
   42eb4:	9885883a 	add	r2,r19,r2
   42eb8:	1027d07a 	srai	r19,r2,1
   42ebc:	2485883a 	add	r2,r4,r18
   42ec0:	980d883a 	mov	r6,r19
   42ec4:	9880022e 	bgeu	r19,r2,42ed0 <__sfvwrite_r+0x3f8>
   42ec8:	1027883a 	mov	r19,r2
   42ecc:	100d883a 	mov	r6,r2
   42ed0:	18c1000c 	andi	r3,r3,1024
   42ed4:	18001c26 	beq	r3,zero,42f48 <__sfvwrite_r+0x470>
   42ed8:	300b883a 	mov	r5,r6
   42edc:	a809883a 	mov	r4,r21
   42ee0:	0042fa00 	call	42fa0 <_malloc_r>
   42ee4:	102f883a 	mov	r23,r2
   42ee8:	10002926 	beq	r2,zero,42f90 <__sfvwrite_r+0x4b8>
   42eec:	81400417 	ldw	r5,16(r16)
   42ef0:	b00d883a 	mov	r6,r22
   42ef4:	1009883a 	mov	r4,r2
   42ef8:	004390c0 	call	4390c <memcpy>
   42efc:	8080030b 	ldhu	r2,12(r16)
   42f00:	00fedfc4 	movi	r3,-1153
   42f04:	10c4703a 	and	r2,r2,r3
   42f08:	10802014 	ori	r2,r2,128
   42f0c:	8080030d 	sth	r2,12(r16)
   42f10:	bd89883a 	add	r4,r23,r22
   42f14:	9d8fc83a 	sub	r7,r19,r22
   42f18:	85c00415 	stw	r23,16(r16)
   42f1c:	84c00515 	stw	r19,20(r16)
   42f20:	81000015 	stw	r4,0(r16)
   42f24:	9027883a 	mov	r19,r18
   42f28:	81c00215 	stw	r7,8(r16)
   42f2c:	902f883a 	mov	r23,r18
   42f30:	003f3806 	br	42c14 <__alt_data_end+0xf4042c14>
   42f34:	800b883a 	mov	r5,r16
   42f38:	a809883a 	mov	r4,r21
   42f3c:	00448080 	call	44808 <_fflush_r>
   42f40:	103fb926 	beq	r2,zero,42e28 <__alt_data_end+0xf4042e28>
   42f44:	003f6506 	br	42cdc <__alt_data_end+0xf4042cdc>
   42f48:	a809883a 	mov	r4,r21
   42f4c:	0043bb00 	call	43bb0 <_realloc_r>
   42f50:	102f883a 	mov	r23,r2
   42f54:	103fee1e 	bne	r2,zero,42f10 <__alt_data_end+0xf4042f10>
   42f58:	81400417 	ldw	r5,16(r16)
   42f5c:	a809883a 	mov	r4,r21
   42f60:	0044d680 	call	44d68 <_free_r>
   42f64:	8080030b 	ldhu	r2,12(r16)
   42f68:	00ffdfc4 	movi	r3,-129
   42f6c:	1884703a 	and	r2,r3,r2
   42f70:	00c00304 	movi	r3,12
   42f74:	a8c00015 	stw	r3,0(r21)
   42f78:	003f5906 	br	42ce0 <__alt_data_end+0xf4042ce0>
   42f7c:	94c00044 	addi	r19,r18,1
   42f80:	02000044 	movi	r8,1
   42f84:	003f6006 	br	42d08 <__alt_data_end+0xf4042d08>
   42f88:	00bfffc4 	movi	r2,-1
   42f8c:	003f0006 	br	42b90 <__alt_data_end+0xf4042b90>
   42f90:	00800304 	movi	r2,12
   42f94:	a8800015 	stw	r2,0(r21)
   42f98:	8080030b 	ldhu	r2,12(r16)
   42f9c:	003f5006 	br	42ce0 <__alt_data_end+0xf4042ce0>

00042fa0 <_malloc_r>:
   42fa0:	defff504 	addi	sp,sp,-44
   42fa4:	dc800315 	stw	r18,12(sp)
   42fa8:	dfc00a15 	stw	ra,40(sp)
   42fac:	df000915 	stw	fp,36(sp)
   42fb0:	ddc00815 	stw	r23,32(sp)
   42fb4:	dd800715 	stw	r22,28(sp)
   42fb8:	dd400615 	stw	r21,24(sp)
   42fbc:	dd000515 	stw	r20,20(sp)
   42fc0:	dcc00415 	stw	r19,16(sp)
   42fc4:	dc400215 	stw	r17,8(sp)
   42fc8:	dc000115 	stw	r16,4(sp)
   42fcc:	288002c4 	addi	r2,r5,11
   42fd0:	00c00584 	movi	r3,22
   42fd4:	2025883a 	mov	r18,r4
   42fd8:	18807f2e 	bgeu	r3,r2,431d8 <_malloc_r+0x238>
   42fdc:	047ffe04 	movi	r17,-8
   42fe0:	1462703a 	and	r17,r2,r17
   42fe4:	8800a316 	blt	r17,zero,43274 <_malloc_r+0x2d4>
   42fe8:	8940a236 	bltu	r17,r5,43274 <_malloc_r+0x2d4>
   42fec:	0045c700 	call	45c70 <__malloc_lock>
   42ff0:	00807dc4 	movi	r2,503
   42ff4:	1441e92e 	bgeu	r2,r17,4379c <_malloc_r+0x7fc>
   42ff8:	8804d27a 	srli	r2,r17,9
   42ffc:	1000a126 	beq	r2,zero,43284 <_malloc_r+0x2e4>
   43000:	00c00104 	movi	r3,4
   43004:	18811e36 	bltu	r3,r2,43480 <_malloc_r+0x4e0>
   43008:	8804d1ba 	srli	r2,r17,6
   4300c:	12000e44 	addi	r8,r2,57
   43010:	11c00e04 	addi	r7,r2,56
   43014:	4209883a 	add	r4,r8,r8
   43018:	04c20034 	movhi	r19,2048
   4301c:	2109883a 	add	r4,r4,r4
   43020:	9cc5f404 	addi	r19,r19,6096
   43024:	2109883a 	add	r4,r4,r4
   43028:	9909883a 	add	r4,r19,r4
   4302c:	24000117 	ldw	r16,4(r4)
   43030:	213ffe04 	addi	r4,r4,-8
   43034:	24009726 	beq	r4,r16,43294 <_malloc_r+0x2f4>
   43038:	80800117 	ldw	r2,4(r16)
   4303c:	01bfff04 	movi	r6,-4
   43040:	014003c4 	movi	r5,15
   43044:	1184703a 	and	r2,r2,r6
   43048:	1447c83a 	sub	r3,r2,r17
   4304c:	28c00716 	blt	r5,r3,4306c <_malloc_r+0xcc>
   43050:	1800920e 	bge	r3,zero,4329c <_malloc_r+0x2fc>
   43054:	84000317 	ldw	r16,12(r16)
   43058:	24008e26 	beq	r4,r16,43294 <_malloc_r+0x2f4>
   4305c:	80800117 	ldw	r2,4(r16)
   43060:	1184703a 	and	r2,r2,r6
   43064:	1447c83a 	sub	r3,r2,r17
   43068:	28fff90e 	bge	r5,r3,43050 <__alt_data_end+0xf4043050>
   4306c:	3809883a 	mov	r4,r7
   43070:	01820034 	movhi	r6,2048
   43074:	9c000417 	ldw	r16,16(r19)
   43078:	3185f404 	addi	r6,r6,6096
   4307c:	32000204 	addi	r8,r6,8
   43080:	82013426 	beq	r16,r8,43554 <_malloc_r+0x5b4>
   43084:	80c00117 	ldw	r3,4(r16)
   43088:	00bfff04 	movi	r2,-4
   4308c:	188e703a 	and	r7,r3,r2
   43090:	3c45c83a 	sub	r2,r7,r17
   43094:	00c003c4 	movi	r3,15
   43098:	18811f16 	blt	r3,r2,43518 <_malloc_r+0x578>
   4309c:	32000515 	stw	r8,20(r6)
   430a0:	32000415 	stw	r8,16(r6)
   430a4:	10007f0e 	bge	r2,zero,432a4 <_malloc_r+0x304>
   430a8:	00807fc4 	movi	r2,511
   430ac:	11c0fd36 	bltu	r2,r7,434a4 <_malloc_r+0x504>
   430b0:	3806d0fa 	srli	r3,r7,3
   430b4:	01c00044 	movi	r7,1
   430b8:	30800117 	ldw	r2,4(r6)
   430bc:	19400044 	addi	r5,r3,1
   430c0:	294b883a 	add	r5,r5,r5
   430c4:	1807d0ba 	srai	r3,r3,2
   430c8:	294b883a 	add	r5,r5,r5
   430cc:	294b883a 	add	r5,r5,r5
   430d0:	298b883a 	add	r5,r5,r6
   430d4:	38c6983a 	sll	r3,r7,r3
   430d8:	29c00017 	ldw	r7,0(r5)
   430dc:	2a7ffe04 	addi	r9,r5,-8
   430e0:	1886b03a 	or	r3,r3,r2
   430e4:	82400315 	stw	r9,12(r16)
   430e8:	81c00215 	stw	r7,8(r16)
   430ec:	30c00115 	stw	r3,4(r6)
   430f0:	2c000015 	stw	r16,0(r5)
   430f4:	3c000315 	stw	r16,12(r7)
   430f8:	2005d0ba 	srai	r2,r4,2
   430fc:	01400044 	movi	r5,1
   43100:	288a983a 	sll	r5,r5,r2
   43104:	19406f36 	bltu	r3,r5,432c4 <_malloc_r+0x324>
   43108:	28c4703a 	and	r2,r5,r3
   4310c:	10000a1e 	bne	r2,zero,43138 <_malloc_r+0x198>
   43110:	00bfff04 	movi	r2,-4
   43114:	294b883a 	add	r5,r5,r5
   43118:	2088703a 	and	r4,r4,r2
   4311c:	28c4703a 	and	r2,r5,r3
   43120:	21000104 	addi	r4,r4,4
   43124:	1000041e 	bne	r2,zero,43138 <_malloc_r+0x198>
   43128:	294b883a 	add	r5,r5,r5
   4312c:	28c4703a 	and	r2,r5,r3
   43130:	21000104 	addi	r4,r4,4
   43134:	103ffc26 	beq	r2,zero,43128 <__alt_data_end+0xf4043128>
   43138:	02bfff04 	movi	r10,-4
   4313c:	024003c4 	movi	r9,15
   43140:	21800044 	addi	r6,r4,1
   43144:	318d883a 	add	r6,r6,r6
   43148:	318d883a 	add	r6,r6,r6
   4314c:	318d883a 	add	r6,r6,r6
   43150:	998d883a 	add	r6,r19,r6
   43154:	333ffe04 	addi	r12,r6,-8
   43158:	2017883a 	mov	r11,r4
   4315c:	31800104 	addi	r6,r6,4
   43160:	34000017 	ldw	r16,0(r6)
   43164:	31fffd04 	addi	r7,r6,-12
   43168:	81c0041e 	bne	r16,r7,4317c <_malloc_r+0x1dc>
   4316c:	0000fb06 	br	4355c <_malloc_r+0x5bc>
   43170:	1801030e 	bge	r3,zero,43580 <_malloc_r+0x5e0>
   43174:	84000317 	ldw	r16,12(r16)
   43178:	81c0f826 	beq	r16,r7,4355c <_malloc_r+0x5bc>
   4317c:	80800117 	ldw	r2,4(r16)
   43180:	1284703a 	and	r2,r2,r10
   43184:	1447c83a 	sub	r3,r2,r17
   43188:	48fff90e 	bge	r9,r3,43170 <__alt_data_end+0xf4043170>
   4318c:	80800317 	ldw	r2,12(r16)
   43190:	81000217 	ldw	r4,8(r16)
   43194:	89400054 	ori	r5,r17,1
   43198:	81400115 	stw	r5,4(r16)
   4319c:	20800315 	stw	r2,12(r4)
   431a0:	11000215 	stw	r4,8(r2)
   431a4:	8463883a 	add	r17,r16,r17
   431a8:	9c400515 	stw	r17,20(r19)
   431ac:	9c400415 	stw	r17,16(r19)
   431b0:	18800054 	ori	r2,r3,1
   431b4:	88800115 	stw	r2,4(r17)
   431b8:	8a000315 	stw	r8,12(r17)
   431bc:	8a000215 	stw	r8,8(r17)
   431c0:	88e3883a 	add	r17,r17,r3
   431c4:	88c00015 	stw	r3,0(r17)
   431c8:	9009883a 	mov	r4,r18
   431cc:	0045c940 	call	45c94 <__malloc_unlock>
   431d0:	80800204 	addi	r2,r16,8
   431d4:	00001b06 	br	43244 <_malloc_r+0x2a4>
   431d8:	04400404 	movi	r17,16
   431dc:	89402536 	bltu	r17,r5,43274 <_malloc_r+0x2d4>
   431e0:	0045c700 	call	45c70 <__malloc_lock>
   431e4:	00800184 	movi	r2,6
   431e8:	01000084 	movi	r4,2
   431ec:	04c20034 	movhi	r19,2048
   431f0:	1085883a 	add	r2,r2,r2
   431f4:	9cc5f404 	addi	r19,r19,6096
   431f8:	1085883a 	add	r2,r2,r2
   431fc:	9885883a 	add	r2,r19,r2
   43200:	14000117 	ldw	r16,4(r2)
   43204:	10fffe04 	addi	r3,r2,-8
   43208:	80c0d926 	beq	r16,r3,43570 <_malloc_r+0x5d0>
   4320c:	80c00117 	ldw	r3,4(r16)
   43210:	81000317 	ldw	r4,12(r16)
   43214:	00bfff04 	movi	r2,-4
   43218:	1884703a 	and	r2,r3,r2
   4321c:	81400217 	ldw	r5,8(r16)
   43220:	8085883a 	add	r2,r16,r2
   43224:	10c00117 	ldw	r3,4(r2)
   43228:	29000315 	stw	r4,12(r5)
   4322c:	21400215 	stw	r5,8(r4)
   43230:	18c00054 	ori	r3,r3,1
   43234:	10c00115 	stw	r3,4(r2)
   43238:	9009883a 	mov	r4,r18
   4323c:	0045c940 	call	45c94 <__malloc_unlock>
   43240:	80800204 	addi	r2,r16,8
   43244:	dfc00a17 	ldw	ra,40(sp)
   43248:	df000917 	ldw	fp,36(sp)
   4324c:	ddc00817 	ldw	r23,32(sp)
   43250:	dd800717 	ldw	r22,28(sp)
   43254:	dd400617 	ldw	r21,24(sp)
   43258:	dd000517 	ldw	r20,20(sp)
   4325c:	dcc00417 	ldw	r19,16(sp)
   43260:	dc800317 	ldw	r18,12(sp)
   43264:	dc400217 	ldw	r17,8(sp)
   43268:	dc000117 	ldw	r16,4(sp)
   4326c:	dec00b04 	addi	sp,sp,44
   43270:	f800283a 	ret
   43274:	00800304 	movi	r2,12
   43278:	90800015 	stw	r2,0(r18)
   4327c:	0005883a 	mov	r2,zero
   43280:	003ff006 	br	43244 <__alt_data_end+0xf4043244>
   43284:	01002004 	movi	r4,128
   43288:	02001004 	movi	r8,64
   4328c:	01c00fc4 	movi	r7,63
   43290:	003f6106 	br	43018 <__alt_data_end+0xf4043018>
   43294:	4009883a 	mov	r4,r8
   43298:	003f7506 	br	43070 <__alt_data_end+0xf4043070>
   4329c:	81000317 	ldw	r4,12(r16)
   432a0:	003fde06 	br	4321c <__alt_data_end+0xf404321c>
   432a4:	81c5883a 	add	r2,r16,r7
   432a8:	11400117 	ldw	r5,4(r2)
   432ac:	9009883a 	mov	r4,r18
   432b0:	29400054 	ori	r5,r5,1
   432b4:	11400115 	stw	r5,4(r2)
   432b8:	0045c940 	call	45c94 <__malloc_unlock>
   432bc:	80800204 	addi	r2,r16,8
   432c0:	003fe006 	br	43244 <__alt_data_end+0xf4043244>
   432c4:	9c000217 	ldw	r16,8(r19)
   432c8:	00bfff04 	movi	r2,-4
   432cc:	85800117 	ldw	r22,4(r16)
   432d0:	b0ac703a 	and	r22,r22,r2
   432d4:	b4400336 	bltu	r22,r17,432e4 <_malloc_r+0x344>
   432d8:	b445c83a 	sub	r2,r22,r17
   432dc:	00c003c4 	movi	r3,15
   432e0:	18805d16 	blt	r3,r2,43458 <_malloc_r+0x4b8>
   432e4:	05c20034 	movhi	r23,2048
   432e8:	00820034 	movhi	r2,2048
   432ec:	10870e04 	addi	r2,r2,7224
   432f0:	bdc70104 	addi	r23,r23,7172
   432f4:	15400017 	ldw	r21,0(r2)
   432f8:	b8c00017 	ldw	r3,0(r23)
   432fc:	00bfffc4 	movi	r2,-1
   43300:	858d883a 	add	r6,r16,r22
   43304:	8d6b883a 	add	r21,r17,r21
   43308:	1880ea26 	beq	r3,r2,436b4 <_malloc_r+0x714>
   4330c:	ad4403c4 	addi	r21,r21,4111
   43310:	00bc0004 	movi	r2,-4096
   43314:	a8aa703a 	and	r21,r21,r2
   43318:	a80b883a 	mov	r5,r21
   4331c:	9009883a 	mov	r4,r18
   43320:	d9800015 	stw	r6,0(sp)
   43324:	00441140 	call	44114 <_sbrk_r>
   43328:	1029883a 	mov	r20,r2
   4332c:	00bfffc4 	movi	r2,-1
   43330:	d9800017 	ldw	r6,0(sp)
   43334:	a080e826 	beq	r20,r2,436d8 <_malloc_r+0x738>
   43338:	a180a636 	bltu	r20,r6,435d4 <_malloc_r+0x634>
   4333c:	07020034 	movhi	fp,2048
   43340:	e7070f04 	addi	fp,fp,7228
   43344:	e0800017 	ldw	r2,0(fp)
   43348:	a887883a 	add	r3,r21,r2
   4334c:	e0c00015 	stw	r3,0(fp)
   43350:	3500e626 	beq	r6,r20,436ec <_malloc_r+0x74c>
   43354:	b9000017 	ldw	r4,0(r23)
   43358:	00bfffc4 	movi	r2,-1
   4335c:	2080ee26 	beq	r4,r2,43718 <_malloc_r+0x778>
   43360:	a185c83a 	sub	r2,r20,r6
   43364:	10c5883a 	add	r2,r2,r3
   43368:	e0800015 	stw	r2,0(fp)
   4336c:	a0c001cc 	andi	r3,r20,7
   43370:	1800bc26 	beq	r3,zero,43664 <_malloc_r+0x6c4>
   43374:	a0e9c83a 	sub	r20,r20,r3
   43378:	00840204 	movi	r2,4104
   4337c:	a5000204 	addi	r20,r20,8
   43380:	10c7c83a 	sub	r3,r2,r3
   43384:	a545883a 	add	r2,r20,r21
   43388:	1083ffcc 	andi	r2,r2,4095
   4338c:	18abc83a 	sub	r21,r3,r2
   43390:	a80b883a 	mov	r5,r21
   43394:	9009883a 	mov	r4,r18
   43398:	00441140 	call	44114 <_sbrk_r>
   4339c:	00ffffc4 	movi	r3,-1
   433a0:	10c0e126 	beq	r2,r3,43728 <_malloc_r+0x788>
   433a4:	1505c83a 	sub	r2,r2,r20
   433a8:	1545883a 	add	r2,r2,r21
   433ac:	10800054 	ori	r2,r2,1
   433b0:	e0c00017 	ldw	r3,0(fp)
   433b4:	9d000215 	stw	r20,8(r19)
   433b8:	a0800115 	stw	r2,4(r20)
   433bc:	a8c7883a 	add	r3,r21,r3
   433c0:	e0c00015 	stw	r3,0(fp)
   433c4:	84c00e26 	beq	r16,r19,43400 <_malloc_r+0x460>
   433c8:	018003c4 	movi	r6,15
   433cc:	3580a72e 	bgeu	r6,r22,4366c <_malloc_r+0x6cc>
   433d0:	81400117 	ldw	r5,4(r16)
   433d4:	013ffe04 	movi	r4,-8
   433d8:	b0bffd04 	addi	r2,r22,-12
   433dc:	1104703a 	and	r2,r2,r4
   433e0:	2900004c 	andi	r4,r5,1
   433e4:	2088b03a 	or	r4,r4,r2
   433e8:	81000115 	stw	r4,4(r16)
   433ec:	01400144 	movi	r5,5
   433f0:	8089883a 	add	r4,r16,r2
   433f4:	21400115 	stw	r5,4(r4)
   433f8:	21400215 	stw	r5,8(r4)
   433fc:	3080cd36 	bltu	r6,r2,43734 <_malloc_r+0x794>
   43400:	00820034 	movhi	r2,2048
   43404:	10870d04 	addi	r2,r2,7220
   43408:	11000017 	ldw	r4,0(r2)
   4340c:	20c0012e 	bgeu	r4,r3,43414 <_malloc_r+0x474>
   43410:	10c00015 	stw	r3,0(r2)
   43414:	00820034 	movhi	r2,2048
   43418:	10870c04 	addi	r2,r2,7216
   4341c:	11000017 	ldw	r4,0(r2)
   43420:	9c000217 	ldw	r16,8(r19)
   43424:	20c0012e 	bgeu	r4,r3,4342c <_malloc_r+0x48c>
   43428:	10c00015 	stw	r3,0(r2)
   4342c:	80c00117 	ldw	r3,4(r16)
   43430:	00bfff04 	movi	r2,-4
   43434:	1886703a 	and	r3,r3,r2
   43438:	1c45c83a 	sub	r2,r3,r17
   4343c:	1c400236 	bltu	r3,r17,43448 <_malloc_r+0x4a8>
   43440:	00c003c4 	movi	r3,15
   43444:	18800416 	blt	r3,r2,43458 <_malloc_r+0x4b8>
   43448:	9009883a 	mov	r4,r18
   4344c:	0045c940 	call	45c94 <__malloc_unlock>
   43450:	0005883a 	mov	r2,zero
   43454:	003f7b06 	br	43244 <__alt_data_end+0xf4043244>
   43458:	88c00054 	ori	r3,r17,1
   4345c:	80c00115 	stw	r3,4(r16)
   43460:	8463883a 	add	r17,r16,r17
   43464:	10800054 	ori	r2,r2,1
   43468:	9c400215 	stw	r17,8(r19)
   4346c:	88800115 	stw	r2,4(r17)
   43470:	9009883a 	mov	r4,r18
   43474:	0045c940 	call	45c94 <__malloc_unlock>
   43478:	80800204 	addi	r2,r16,8
   4347c:	003f7106 	br	43244 <__alt_data_end+0xf4043244>
   43480:	00c00504 	movi	r3,20
   43484:	18804a2e 	bgeu	r3,r2,435b0 <_malloc_r+0x610>
   43488:	00c01504 	movi	r3,84
   4348c:	18806e36 	bltu	r3,r2,43648 <_malloc_r+0x6a8>
   43490:	8804d33a 	srli	r2,r17,12
   43494:	12001bc4 	addi	r8,r2,111
   43498:	11c01b84 	addi	r7,r2,110
   4349c:	4209883a 	add	r4,r8,r8
   434a0:	003edd06 	br	43018 <__alt_data_end+0xf4043018>
   434a4:	3804d27a 	srli	r2,r7,9
   434a8:	00c00104 	movi	r3,4
   434ac:	1880442e 	bgeu	r3,r2,435c0 <_malloc_r+0x620>
   434b0:	00c00504 	movi	r3,20
   434b4:	18808136 	bltu	r3,r2,436bc <_malloc_r+0x71c>
   434b8:	11401704 	addi	r5,r2,92
   434bc:	10c016c4 	addi	r3,r2,91
   434c0:	294b883a 	add	r5,r5,r5
   434c4:	294b883a 	add	r5,r5,r5
   434c8:	294b883a 	add	r5,r5,r5
   434cc:	994b883a 	add	r5,r19,r5
   434d0:	28800017 	ldw	r2,0(r5)
   434d4:	01820034 	movhi	r6,2048
   434d8:	297ffe04 	addi	r5,r5,-8
   434dc:	3185f404 	addi	r6,r6,6096
   434e0:	28806526 	beq	r5,r2,43678 <_malloc_r+0x6d8>
   434e4:	01bfff04 	movi	r6,-4
   434e8:	10c00117 	ldw	r3,4(r2)
   434ec:	1986703a 	and	r3,r3,r6
   434f0:	38c0022e 	bgeu	r7,r3,434fc <_malloc_r+0x55c>
   434f4:	10800217 	ldw	r2,8(r2)
   434f8:	28bffb1e 	bne	r5,r2,434e8 <__alt_data_end+0xf40434e8>
   434fc:	11400317 	ldw	r5,12(r2)
   43500:	98c00117 	ldw	r3,4(r19)
   43504:	81400315 	stw	r5,12(r16)
   43508:	80800215 	stw	r2,8(r16)
   4350c:	2c000215 	stw	r16,8(r5)
   43510:	14000315 	stw	r16,12(r2)
   43514:	003ef806 	br	430f8 <__alt_data_end+0xf40430f8>
   43518:	88c00054 	ori	r3,r17,1
   4351c:	80c00115 	stw	r3,4(r16)
   43520:	8463883a 	add	r17,r16,r17
   43524:	34400515 	stw	r17,20(r6)
   43528:	34400415 	stw	r17,16(r6)
   4352c:	10c00054 	ori	r3,r2,1
   43530:	8a000315 	stw	r8,12(r17)
   43534:	8a000215 	stw	r8,8(r17)
   43538:	88c00115 	stw	r3,4(r17)
   4353c:	88a3883a 	add	r17,r17,r2
   43540:	88800015 	stw	r2,0(r17)
   43544:	9009883a 	mov	r4,r18
   43548:	0045c940 	call	45c94 <__malloc_unlock>
   4354c:	80800204 	addi	r2,r16,8
   43550:	003f3c06 	br	43244 <__alt_data_end+0xf4043244>
   43554:	30c00117 	ldw	r3,4(r6)
   43558:	003ee706 	br	430f8 <__alt_data_end+0xf40430f8>
   4355c:	5ac00044 	addi	r11,r11,1
   43560:	588000cc 	andi	r2,r11,3
   43564:	31800204 	addi	r6,r6,8
   43568:	103efd1e 	bne	r2,zero,43160 <__alt_data_end+0xf4043160>
   4356c:	00002406 	br	43600 <_malloc_r+0x660>
   43570:	14000317 	ldw	r16,12(r2)
   43574:	143f251e 	bne	r2,r16,4320c <__alt_data_end+0xf404320c>
   43578:	21000084 	addi	r4,r4,2
   4357c:	003ebc06 	br	43070 <__alt_data_end+0xf4043070>
   43580:	8085883a 	add	r2,r16,r2
   43584:	10c00117 	ldw	r3,4(r2)
   43588:	81000317 	ldw	r4,12(r16)
   4358c:	81400217 	ldw	r5,8(r16)
   43590:	18c00054 	ori	r3,r3,1
   43594:	10c00115 	stw	r3,4(r2)
   43598:	29000315 	stw	r4,12(r5)
   4359c:	21400215 	stw	r5,8(r4)
   435a0:	9009883a 	mov	r4,r18
   435a4:	0045c940 	call	45c94 <__malloc_unlock>
   435a8:	80800204 	addi	r2,r16,8
   435ac:	003f2506 	br	43244 <__alt_data_end+0xf4043244>
   435b0:	12001704 	addi	r8,r2,92
   435b4:	11c016c4 	addi	r7,r2,91
   435b8:	4209883a 	add	r4,r8,r8
   435bc:	003e9606 	br	43018 <__alt_data_end+0xf4043018>
   435c0:	3804d1ba 	srli	r2,r7,6
   435c4:	11400e44 	addi	r5,r2,57
   435c8:	10c00e04 	addi	r3,r2,56
   435cc:	294b883a 	add	r5,r5,r5
   435d0:	003fbc06 	br	434c4 <__alt_data_end+0xf40434c4>
   435d4:	84ff5926 	beq	r16,r19,4333c <__alt_data_end+0xf404333c>
   435d8:	00820034 	movhi	r2,2048
   435dc:	1085f404 	addi	r2,r2,6096
   435e0:	14000217 	ldw	r16,8(r2)
   435e4:	00bfff04 	movi	r2,-4
   435e8:	80c00117 	ldw	r3,4(r16)
   435ec:	1886703a 	and	r3,r3,r2
   435f0:	003f9106 	br	43438 <__alt_data_end+0xf4043438>
   435f4:	60800217 	ldw	r2,8(r12)
   435f8:	213fffc4 	addi	r4,r4,-1
   435fc:	1300651e 	bne	r2,r12,43794 <_malloc_r+0x7f4>
   43600:	208000cc 	andi	r2,r4,3
   43604:	633ffe04 	addi	r12,r12,-8
   43608:	103ffa1e 	bne	r2,zero,435f4 <__alt_data_end+0xf40435f4>
   4360c:	98800117 	ldw	r2,4(r19)
   43610:	0146303a 	nor	r3,zero,r5
   43614:	1884703a 	and	r2,r3,r2
   43618:	98800115 	stw	r2,4(r19)
   4361c:	294b883a 	add	r5,r5,r5
   43620:	117f2836 	bltu	r2,r5,432c4 <__alt_data_end+0xf40432c4>
   43624:	283f2726 	beq	r5,zero,432c4 <__alt_data_end+0xf40432c4>
   43628:	2886703a 	and	r3,r5,r2
   4362c:	5809883a 	mov	r4,r11
   43630:	183ec31e 	bne	r3,zero,43140 <__alt_data_end+0xf4043140>
   43634:	294b883a 	add	r5,r5,r5
   43638:	2886703a 	and	r3,r5,r2
   4363c:	21000104 	addi	r4,r4,4
   43640:	183ffc26 	beq	r3,zero,43634 <__alt_data_end+0xf4043634>
   43644:	003ebe06 	br	43140 <__alt_data_end+0xf4043140>
   43648:	00c05504 	movi	r3,340
   4364c:	18801236 	bltu	r3,r2,43698 <_malloc_r+0x6f8>
   43650:	8804d3fa 	srli	r2,r17,15
   43654:	12001e04 	addi	r8,r2,120
   43658:	11c01dc4 	addi	r7,r2,119
   4365c:	4209883a 	add	r4,r8,r8
   43660:	003e6d06 	br	43018 <__alt_data_end+0xf4043018>
   43664:	00c40004 	movi	r3,4096
   43668:	003f4606 	br	43384 <__alt_data_end+0xf4043384>
   4366c:	00800044 	movi	r2,1
   43670:	a0800115 	stw	r2,4(r20)
   43674:	003f7406 	br	43448 <__alt_data_end+0xf4043448>
   43678:	1805d0ba 	srai	r2,r3,2
   4367c:	01c00044 	movi	r7,1
   43680:	30c00117 	ldw	r3,4(r6)
   43684:	388e983a 	sll	r7,r7,r2
   43688:	2805883a 	mov	r2,r5
   4368c:	38c6b03a 	or	r3,r7,r3
   43690:	30c00115 	stw	r3,4(r6)
   43694:	003f9b06 	br	43504 <__alt_data_end+0xf4043504>
   43698:	00c15504 	movi	r3,1364
   4369c:	18801a36 	bltu	r3,r2,43708 <_malloc_r+0x768>
   436a0:	8804d4ba 	srli	r2,r17,18
   436a4:	12001f44 	addi	r8,r2,125
   436a8:	11c01f04 	addi	r7,r2,124
   436ac:	4209883a 	add	r4,r8,r8
   436b0:	003e5906 	br	43018 <__alt_data_end+0xf4043018>
   436b4:	ad400404 	addi	r21,r21,16
   436b8:	003f1706 	br	43318 <__alt_data_end+0xf4043318>
   436bc:	00c01504 	movi	r3,84
   436c0:	18802336 	bltu	r3,r2,43750 <_malloc_r+0x7b0>
   436c4:	3804d33a 	srli	r2,r7,12
   436c8:	11401bc4 	addi	r5,r2,111
   436cc:	10c01b84 	addi	r3,r2,110
   436d0:	294b883a 	add	r5,r5,r5
   436d4:	003f7b06 	br	434c4 <__alt_data_end+0xf40434c4>
   436d8:	9c000217 	ldw	r16,8(r19)
   436dc:	00bfff04 	movi	r2,-4
   436e0:	80c00117 	ldw	r3,4(r16)
   436e4:	1886703a 	and	r3,r3,r2
   436e8:	003f5306 	br	43438 <__alt_data_end+0xf4043438>
   436ec:	3083ffcc 	andi	r2,r6,4095
   436f0:	103f181e 	bne	r2,zero,43354 <__alt_data_end+0xf4043354>
   436f4:	99000217 	ldw	r4,8(r19)
   436f8:	b545883a 	add	r2,r22,r21
   436fc:	10800054 	ori	r2,r2,1
   43700:	20800115 	stw	r2,4(r4)
   43704:	003f3e06 	br	43400 <__alt_data_end+0xf4043400>
   43708:	01003f84 	movi	r4,254
   4370c:	02001fc4 	movi	r8,127
   43710:	01c01f84 	movi	r7,126
   43714:	003e4006 	br	43018 <__alt_data_end+0xf4043018>
   43718:	00820034 	movhi	r2,2048
   4371c:	10870104 	addi	r2,r2,7172
   43720:	15000015 	stw	r20,0(r2)
   43724:	003f1106 	br	4336c <__alt_data_end+0xf404336c>
   43728:	00800044 	movi	r2,1
   4372c:	002b883a 	mov	r21,zero
   43730:	003f1f06 	br	433b0 <__alt_data_end+0xf40433b0>
   43734:	81400204 	addi	r5,r16,8
   43738:	9009883a 	mov	r4,r18
   4373c:	0044d680 	call	44d68 <_free_r>
   43740:	00820034 	movhi	r2,2048
   43744:	10870f04 	addi	r2,r2,7228
   43748:	10c00017 	ldw	r3,0(r2)
   4374c:	003f2c06 	br	43400 <__alt_data_end+0xf4043400>
   43750:	00c05504 	movi	r3,340
   43754:	18800536 	bltu	r3,r2,4376c <_malloc_r+0x7cc>
   43758:	3804d3fa 	srli	r2,r7,15
   4375c:	11401e04 	addi	r5,r2,120
   43760:	10c01dc4 	addi	r3,r2,119
   43764:	294b883a 	add	r5,r5,r5
   43768:	003f5606 	br	434c4 <__alt_data_end+0xf40434c4>
   4376c:	00c15504 	movi	r3,1364
   43770:	18800536 	bltu	r3,r2,43788 <_malloc_r+0x7e8>
   43774:	3804d4ba 	srli	r2,r7,18
   43778:	11401f44 	addi	r5,r2,125
   4377c:	10c01f04 	addi	r3,r2,124
   43780:	294b883a 	add	r5,r5,r5
   43784:	003f4f06 	br	434c4 <__alt_data_end+0xf40434c4>
   43788:	01403f84 	movi	r5,254
   4378c:	00c01f84 	movi	r3,126
   43790:	003f4c06 	br	434c4 <__alt_data_end+0xf40434c4>
   43794:	98800117 	ldw	r2,4(r19)
   43798:	003fa006 	br	4361c <__alt_data_end+0xf404361c>
   4379c:	8808d0fa 	srli	r4,r17,3
   437a0:	20800044 	addi	r2,r4,1
   437a4:	1085883a 	add	r2,r2,r2
   437a8:	003e9006 	br	431ec <__alt_data_end+0xf40431ec>

000437ac <memchr>:
   437ac:	208000cc 	andi	r2,r4,3
   437b0:	280f883a 	mov	r7,r5
   437b4:	10003426 	beq	r2,zero,43888 <memchr+0xdc>
   437b8:	30bfffc4 	addi	r2,r6,-1
   437bc:	30001a26 	beq	r6,zero,43828 <memchr+0x7c>
   437c0:	20c00003 	ldbu	r3,0(r4)
   437c4:	29803fcc 	andi	r6,r5,255
   437c8:	30c0051e 	bne	r6,r3,437e0 <memchr+0x34>
   437cc:	00001806 	br	43830 <memchr+0x84>
   437d0:	10001526 	beq	r2,zero,43828 <memchr+0x7c>
   437d4:	20c00003 	ldbu	r3,0(r4)
   437d8:	10bfffc4 	addi	r2,r2,-1
   437dc:	30c01426 	beq	r6,r3,43830 <memchr+0x84>
   437e0:	21000044 	addi	r4,r4,1
   437e4:	20c000cc 	andi	r3,r4,3
   437e8:	183ff91e 	bne	r3,zero,437d0 <__alt_data_end+0xf40437d0>
   437ec:	020000c4 	movi	r8,3
   437f0:	40801136 	bltu	r8,r2,43838 <memchr+0x8c>
   437f4:	10000c26 	beq	r2,zero,43828 <memchr+0x7c>
   437f8:	20c00003 	ldbu	r3,0(r4)
   437fc:	29403fcc 	andi	r5,r5,255
   43800:	28c00b26 	beq	r5,r3,43830 <memchr+0x84>
   43804:	20c00044 	addi	r3,r4,1
   43808:	39803fcc 	andi	r6,r7,255
   4380c:	2089883a 	add	r4,r4,r2
   43810:	00000306 	br	43820 <memchr+0x74>
   43814:	18c00044 	addi	r3,r3,1
   43818:	197fffc3 	ldbu	r5,-1(r3)
   4381c:	31400526 	beq	r6,r5,43834 <memchr+0x88>
   43820:	1805883a 	mov	r2,r3
   43824:	20fffb1e 	bne	r4,r3,43814 <__alt_data_end+0xf4043814>
   43828:	0005883a 	mov	r2,zero
   4382c:	f800283a 	ret
   43830:	2005883a 	mov	r2,r4
   43834:	f800283a 	ret
   43838:	28c03fcc 	andi	r3,r5,255
   4383c:	1812923a 	slli	r9,r3,8
   43840:	02ffbff4 	movhi	r11,65279
   43844:	02a02074 	movhi	r10,32897
   43848:	48d2b03a 	or	r9,r9,r3
   4384c:	4806943a 	slli	r3,r9,16
   43850:	5affbfc4 	addi	r11,r11,-257
   43854:	52a02004 	addi	r10,r10,-32640
   43858:	48d2b03a 	or	r9,r9,r3
   4385c:	20c00017 	ldw	r3,0(r4)
   43860:	48c6f03a 	xor	r3,r9,r3
   43864:	1acd883a 	add	r6,r3,r11
   43868:	00c6303a 	nor	r3,zero,r3
   4386c:	30c6703a 	and	r3,r6,r3
   43870:	1a86703a 	and	r3,r3,r10
   43874:	183fe01e 	bne	r3,zero,437f8 <__alt_data_end+0xf40437f8>
   43878:	10bfff04 	addi	r2,r2,-4
   4387c:	21000104 	addi	r4,r4,4
   43880:	40bff636 	bltu	r8,r2,4385c <__alt_data_end+0xf404385c>
   43884:	003fdb06 	br	437f4 <__alt_data_end+0xf40437f4>
   43888:	3005883a 	mov	r2,r6
   4388c:	003fd706 	br	437ec <__alt_data_end+0xf40437ec>

00043890 <memcmp>:
   43890:	01c000c4 	movi	r7,3
   43894:	3980192e 	bgeu	r7,r6,438fc <memcmp+0x6c>
   43898:	2144b03a 	or	r2,r4,r5
   4389c:	11c4703a 	and	r2,r2,r7
   438a0:	10000f26 	beq	r2,zero,438e0 <memcmp+0x50>
   438a4:	20800003 	ldbu	r2,0(r4)
   438a8:	28c00003 	ldbu	r3,0(r5)
   438ac:	10c0151e 	bne	r2,r3,43904 <memcmp+0x74>
   438b0:	31bfff84 	addi	r6,r6,-2
   438b4:	01ffffc4 	movi	r7,-1
   438b8:	00000406 	br	438cc <memcmp+0x3c>
   438bc:	20800003 	ldbu	r2,0(r4)
   438c0:	28c00003 	ldbu	r3,0(r5)
   438c4:	31bfffc4 	addi	r6,r6,-1
   438c8:	10c00e1e 	bne	r2,r3,43904 <memcmp+0x74>
   438cc:	21000044 	addi	r4,r4,1
   438d0:	29400044 	addi	r5,r5,1
   438d4:	31fff91e 	bne	r6,r7,438bc <__alt_data_end+0xf40438bc>
   438d8:	0005883a 	mov	r2,zero
   438dc:	f800283a 	ret
   438e0:	20c00017 	ldw	r3,0(r4)
   438e4:	28800017 	ldw	r2,0(r5)
   438e8:	18bfee1e 	bne	r3,r2,438a4 <__alt_data_end+0xf40438a4>
   438ec:	31bfff04 	addi	r6,r6,-4
   438f0:	21000104 	addi	r4,r4,4
   438f4:	29400104 	addi	r5,r5,4
   438f8:	39bff936 	bltu	r7,r6,438e0 <__alt_data_end+0xf40438e0>
   438fc:	303fe91e 	bne	r6,zero,438a4 <__alt_data_end+0xf40438a4>
   43900:	003ff506 	br	438d8 <__alt_data_end+0xf40438d8>
   43904:	10c5c83a 	sub	r2,r2,r3
   43908:	f800283a 	ret

0004390c <memcpy>:
   4390c:	defffd04 	addi	sp,sp,-12
   43910:	dfc00215 	stw	ra,8(sp)
   43914:	dc400115 	stw	r17,4(sp)
   43918:	dc000015 	stw	r16,0(sp)
   4391c:	00c003c4 	movi	r3,15
   43920:	2005883a 	mov	r2,r4
   43924:	1980452e 	bgeu	r3,r6,43a3c <memcpy+0x130>
   43928:	2906b03a 	or	r3,r5,r4
   4392c:	18c000cc 	andi	r3,r3,3
   43930:	1800441e 	bne	r3,zero,43a44 <memcpy+0x138>
   43934:	347ffc04 	addi	r17,r6,-16
   43938:	8822d13a 	srli	r17,r17,4
   4393c:	28c00104 	addi	r3,r5,4
   43940:	23400104 	addi	r13,r4,4
   43944:	8820913a 	slli	r16,r17,4
   43948:	2b000204 	addi	r12,r5,8
   4394c:	22c00204 	addi	r11,r4,8
   43950:	84000504 	addi	r16,r16,20
   43954:	2a800304 	addi	r10,r5,12
   43958:	22400304 	addi	r9,r4,12
   4395c:	2c21883a 	add	r16,r5,r16
   43960:	2811883a 	mov	r8,r5
   43964:	200f883a 	mov	r7,r4
   43968:	41000017 	ldw	r4,0(r8)
   4396c:	1fc00017 	ldw	ra,0(r3)
   43970:	63c00017 	ldw	r15,0(r12)
   43974:	39000015 	stw	r4,0(r7)
   43978:	53800017 	ldw	r14,0(r10)
   4397c:	6fc00015 	stw	ra,0(r13)
   43980:	5bc00015 	stw	r15,0(r11)
   43984:	4b800015 	stw	r14,0(r9)
   43988:	18c00404 	addi	r3,r3,16
   4398c:	39c00404 	addi	r7,r7,16
   43990:	42000404 	addi	r8,r8,16
   43994:	6b400404 	addi	r13,r13,16
   43998:	63000404 	addi	r12,r12,16
   4399c:	5ac00404 	addi	r11,r11,16
   439a0:	52800404 	addi	r10,r10,16
   439a4:	4a400404 	addi	r9,r9,16
   439a8:	1c3fef1e 	bne	r3,r16,43968 <__alt_data_end+0xf4043968>
   439ac:	89c00044 	addi	r7,r17,1
   439b0:	380e913a 	slli	r7,r7,4
   439b4:	310003cc 	andi	r4,r6,15
   439b8:	02c000c4 	movi	r11,3
   439bc:	11c7883a 	add	r3,r2,r7
   439c0:	29cb883a 	add	r5,r5,r7
   439c4:	5900212e 	bgeu	r11,r4,43a4c <memcpy+0x140>
   439c8:	1813883a 	mov	r9,r3
   439cc:	2811883a 	mov	r8,r5
   439d0:	200f883a 	mov	r7,r4
   439d4:	42800017 	ldw	r10,0(r8)
   439d8:	4a400104 	addi	r9,r9,4
   439dc:	39ffff04 	addi	r7,r7,-4
   439e0:	4abfff15 	stw	r10,-4(r9)
   439e4:	42000104 	addi	r8,r8,4
   439e8:	59fffa36 	bltu	r11,r7,439d4 <__alt_data_end+0xf40439d4>
   439ec:	213fff04 	addi	r4,r4,-4
   439f0:	2008d0ba 	srli	r4,r4,2
   439f4:	318000cc 	andi	r6,r6,3
   439f8:	21000044 	addi	r4,r4,1
   439fc:	2109883a 	add	r4,r4,r4
   43a00:	2109883a 	add	r4,r4,r4
   43a04:	1907883a 	add	r3,r3,r4
   43a08:	290b883a 	add	r5,r5,r4
   43a0c:	30000626 	beq	r6,zero,43a28 <memcpy+0x11c>
   43a10:	198d883a 	add	r6,r3,r6
   43a14:	29c00003 	ldbu	r7,0(r5)
   43a18:	18c00044 	addi	r3,r3,1
   43a1c:	29400044 	addi	r5,r5,1
   43a20:	19ffffc5 	stb	r7,-1(r3)
   43a24:	19bffb1e 	bne	r3,r6,43a14 <__alt_data_end+0xf4043a14>
   43a28:	dfc00217 	ldw	ra,8(sp)
   43a2c:	dc400117 	ldw	r17,4(sp)
   43a30:	dc000017 	ldw	r16,0(sp)
   43a34:	dec00304 	addi	sp,sp,12
   43a38:	f800283a 	ret
   43a3c:	2007883a 	mov	r3,r4
   43a40:	003ff206 	br	43a0c <__alt_data_end+0xf4043a0c>
   43a44:	2007883a 	mov	r3,r4
   43a48:	003ff106 	br	43a10 <__alt_data_end+0xf4043a10>
   43a4c:	200d883a 	mov	r6,r4
   43a50:	003fee06 	br	43a0c <__alt_data_end+0xf4043a0c>

00043a54 <memmove>:
   43a54:	2005883a 	mov	r2,r4
   43a58:	29000b2e 	bgeu	r5,r4,43a88 <memmove+0x34>
   43a5c:	298f883a 	add	r7,r5,r6
   43a60:	21c0092e 	bgeu	r4,r7,43a88 <memmove+0x34>
   43a64:	2187883a 	add	r3,r4,r6
   43a68:	198bc83a 	sub	r5,r3,r6
   43a6c:	30004826 	beq	r6,zero,43b90 <memmove+0x13c>
   43a70:	39ffffc4 	addi	r7,r7,-1
   43a74:	39000003 	ldbu	r4,0(r7)
   43a78:	18ffffc4 	addi	r3,r3,-1
   43a7c:	19000005 	stb	r4,0(r3)
   43a80:	28fffb1e 	bne	r5,r3,43a70 <__alt_data_end+0xf4043a70>
   43a84:	f800283a 	ret
   43a88:	00c003c4 	movi	r3,15
   43a8c:	1980412e 	bgeu	r3,r6,43b94 <memmove+0x140>
   43a90:	2886b03a 	or	r3,r5,r2
   43a94:	18c000cc 	andi	r3,r3,3
   43a98:	1800401e 	bne	r3,zero,43b9c <memmove+0x148>
   43a9c:	33fffc04 	addi	r15,r6,-16
   43aa0:	781ed13a 	srli	r15,r15,4
   43aa4:	28c00104 	addi	r3,r5,4
   43aa8:	13400104 	addi	r13,r2,4
   43aac:	781c913a 	slli	r14,r15,4
   43ab0:	2b000204 	addi	r12,r5,8
   43ab4:	12c00204 	addi	r11,r2,8
   43ab8:	73800504 	addi	r14,r14,20
   43abc:	2a800304 	addi	r10,r5,12
   43ac0:	12400304 	addi	r9,r2,12
   43ac4:	2b9d883a 	add	r14,r5,r14
   43ac8:	2811883a 	mov	r8,r5
   43acc:	100f883a 	mov	r7,r2
   43ad0:	41000017 	ldw	r4,0(r8)
   43ad4:	39c00404 	addi	r7,r7,16
   43ad8:	18c00404 	addi	r3,r3,16
   43adc:	393ffc15 	stw	r4,-16(r7)
   43ae0:	193ffc17 	ldw	r4,-16(r3)
   43ae4:	6b400404 	addi	r13,r13,16
   43ae8:	5ac00404 	addi	r11,r11,16
   43aec:	693ffc15 	stw	r4,-16(r13)
   43af0:	61000017 	ldw	r4,0(r12)
   43af4:	4a400404 	addi	r9,r9,16
   43af8:	42000404 	addi	r8,r8,16
   43afc:	593ffc15 	stw	r4,-16(r11)
   43b00:	51000017 	ldw	r4,0(r10)
   43b04:	63000404 	addi	r12,r12,16
   43b08:	52800404 	addi	r10,r10,16
   43b0c:	493ffc15 	stw	r4,-16(r9)
   43b10:	1bbfef1e 	bne	r3,r14,43ad0 <__alt_data_end+0xf4043ad0>
   43b14:	79000044 	addi	r4,r15,1
   43b18:	2008913a 	slli	r4,r4,4
   43b1c:	328003cc 	andi	r10,r6,15
   43b20:	02c000c4 	movi	r11,3
   43b24:	1107883a 	add	r3,r2,r4
   43b28:	290b883a 	add	r5,r5,r4
   43b2c:	5a801e2e 	bgeu	r11,r10,43ba8 <memmove+0x154>
   43b30:	1813883a 	mov	r9,r3
   43b34:	2811883a 	mov	r8,r5
   43b38:	500f883a 	mov	r7,r10
   43b3c:	41000017 	ldw	r4,0(r8)
   43b40:	4a400104 	addi	r9,r9,4
   43b44:	39ffff04 	addi	r7,r7,-4
   43b48:	493fff15 	stw	r4,-4(r9)
   43b4c:	42000104 	addi	r8,r8,4
   43b50:	59fffa36 	bltu	r11,r7,43b3c <__alt_data_end+0xf4043b3c>
   43b54:	513fff04 	addi	r4,r10,-4
   43b58:	2008d0ba 	srli	r4,r4,2
   43b5c:	318000cc 	andi	r6,r6,3
   43b60:	21000044 	addi	r4,r4,1
   43b64:	2109883a 	add	r4,r4,r4
   43b68:	2109883a 	add	r4,r4,r4
   43b6c:	1907883a 	add	r3,r3,r4
   43b70:	290b883a 	add	r5,r5,r4
   43b74:	30000b26 	beq	r6,zero,43ba4 <memmove+0x150>
   43b78:	198d883a 	add	r6,r3,r6
   43b7c:	29c00003 	ldbu	r7,0(r5)
   43b80:	18c00044 	addi	r3,r3,1
   43b84:	29400044 	addi	r5,r5,1
   43b88:	19ffffc5 	stb	r7,-1(r3)
   43b8c:	19bffb1e 	bne	r3,r6,43b7c <__alt_data_end+0xf4043b7c>
   43b90:	f800283a 	ret
   43b94:	1007883a 	mov	r3,r2
   43b98:	003ff606 	br	43b74 <__alt_data_end+0xf4043b74>
   43b9c:	1007883a 	mov	r3,r2
   43ba0:	003ff506 	br	43b78 <__alt_data_end+0xf4043b78>
   43ba4:	f800283a 	ret
   43ba8:	500d883a 	mov	r6,r10
   43bac:	003ff106 	br	43b74 <__alt_data_end+0xf4043b74>

00043bb0 <_realloc_r>:
   43bb0:	defff604 	addi	sp,sp,-40
   43bb4:	dc800215 	stw	r18,8(sp)
   43bb8:	dfc00915 	stw	ra,36(sp)
   43bbc:	df000815 	stw	fp,32(sp)
   43bc0:	ddc00715 	stw	r23,28(sp)
   43bc4:	dd800615 	stw	r22,24(sp)
   43bc8:	dd400515 	stw	r21,20(sp)
   43bcc:	dd000415 	stw	r20,16(sp)
   43bd0:	dcc00315 	stw	r19,12(sp)
   43bd4:	dc400115 	stw	r17,4(sp)
   43bd8:	dc000015 	stw	r16,0(sp)
   43bdc:	3025883a 	mov	r18,r6
   43be0:	2800b726 	beq	r5,zero,43ec0 <_realloc_r+0x310>
   43be4:	282b883a 	mov	r21,r5
   43be8:	2029883a 	mov	r20,r4
   43bec:	0045c700 	call	45c70 <__malloc_lock>
   43bf0:	a8bfff17 	ldw	r2,-4(r21)
   43bf4:	043fff04 	movi	r16,-4
   43bf8:	90c002c4 	addi	r3,r18,11
   43bfc:	01000584 	movi	r4,22
   43c00:	acfffe04 	addi	r19,r21,-8
   43c04:	1420703a 	and	r16,r2,r16
   43c08:	20c0332e 	bgeu	r4,r3,43cd8 <_realloc_r+0x128>
   43c0c:	047ffe04 	movi	r17,-8
   43c10:	1c62703a 	and	r17,r3,r17
   43c14:	8807883a 	mov	r3,r17
   43c18:	88005816 	blt	r17,zero,43d7c <_realloc_r+0x1cc>
   43c1c:	8c805736 	bltu	r17,r18,43d7c <_realloc_r+0x1cc>
   43c20:	80c0300e 	bge	r16,r3,43ce4 <_realloc_r+0x134>
   43c24:	07020034 	movhi	fp,2048
   43c28:	e705f404 	addi	fp,fp,6096
   43c2c:	e1c00217 	ldw	r7,8(fp)
   43c30:	9c09883a 	add	r4,r19,r16
   43c34:	22000117 	ldw	r8,4(r4)
   43c38:	21c06326 	beq	r4,r7,43dc8 <_realloc_r+0x218>
   43c3c:	017fff84 	movi	r5,-2
   43c40:	414a703a 	and	r5,r8,r5
   43c44:	214b883a 	add	r5,r4,r5
   43c48:	29800117 	ldw	r6,4(r5)
   43c4c:	3180004c 	andi	r6,r6,1
   43c50:	30003f26 	beq	r6,zero,43d50 <_realloc_r+0x1a0>
   43c54:	1080004c 	andi	r2,r2,1
   43c58:	10008326 	beq	r2,zero,43e68 <_realloc_r+0x2b8>
   43c5c:	900b883a 	mov	r5,r18
   43c60:	a009883a 	mov	r4,r20
   43c64:	0042fa00 	call	42fa0 <_malloc_r>
   43c68:	1025883a 	mov	r18,r2
   43c6c:	10011e26 	beq	r2,zero,440e8 <_realloc_r+0x538>
   43c70:	a93fff17 	ldw	r4,-4(r21)
   43c74:	10fffe04 	addi	r3,r2,-8
   43c78:	00bfff84 	movi	r2,-2
   43c7c:	2084703a 	and	r2,r4,r2
   43c80:	9885883a 	add	r2,r19,r2
   43c84:	1880ee26 	beq	r3,r2,44040 <_realloc_r+0x490>
   43c88:	81bfff04 	addi	r6,r16,-4
   43c8c:	00800904 	movi	r2,36
   43c90:	1180b836 	bltu	r2,r6,43f74 <_realloc_r+0x3c4>
   43c94:	00c004c4 	movi	r3,19
   43c98:	19809636 	bltu	r3,r6,43ef4 <_realloc_r+0x344>
   43c9c:	9005883a 	mov	r2,r18
   43ca0:	a807883a 	mov	r3,r21
   43ca4:	19000017 	ldw	r4,0(r3)
   43ca8:	11000015 	stw	r4,0(r2)
   43cac:	19000117 	ldw	r4,4(r3)
   43cb0:	11000115 	stw	r4,4(r2)
   43cb4:	18c00217 	ldw	r3,8(r3)
   43cb8:	10c00215 	stw	r3,8(r2)
   43cbc:	a80b883a 	mov	r5,r21
   43cc0:	a009883a 	mov	r4,r20
   43cc4:	0044d680 	call	44d68 <_free_r>
   43cc8:	a009883a 	mov	r4,r20
   43ccc:	0045c940 	call	45c94 <__malloc_unlock>
   43cd0:	9005883a 	mov	r2,r18
   43cd4:	00001206 	br	43d20 <_realloc_r+0x170>
   43cd8:	00c00404 	movi	r3,16
   43cdc:	1823883a 	mov	r17,r3
   43ce0:	003fce06 	br	43c1c <__alt_data_end+0xf4043c1c>
   43ce4:	a825883a 	mov	r18,r21
   43ce8:	8445c83a 	sub	r2,r16,r17
   43cec:	00c003c4 	movi	r3,15
   43cf0:	18802636 	bltu	r3,r2,43d8c <_realloc_r+0x1dc>
   43cf4:	99800117 	ldw	r6,4(r19)
   43cf8:	9c07883a 	add	r3,r19,r16
   43cfc:	3180004c 	andi	r6,r6,1
   43d00:	3420b03a 	or	r16,r6,r16
   43d04:	9c000115 	stw	r16,4(r19)
   43d08:	18800117 	ldw	r2,4(r3)
   43d0c:	10800054 	ori	r2,r2,1
   43d10:	18800115 	stw	r2,4(r3)
   43d14:	a009883a 	mov	r4,r20
   43d18:	0045c940 	call	45c94 <__malloc_unlock>
   43d1c:	9005883a 	mov	r2,r18
   43d20:	dfc00917 	ldw	ra,36(sp)
   43d24:	df000817 	ldw	fp,32(sp)
   43d28:	ddc00717 	ldw	r23,28(sp)
   43d2c:	dd800617 	ldw	r22,24(sp)
   43d30:	dd400517 	ldw	r21,20(sp)
   43d34:	dd000417 	ldw	r20,16(sp)
   43d38:	dcc00317 	ldw	r19,12(sp)
   43d3c:	dc800217 	ldw	r18,8(sp)
   43d40:	dc400117 	ldw	r17,4(sp)
   43d44:	dc000017 	ldw	r16,0(sp)
   43d48:	dec00a04 	addi	sp,sp,40
   43d4c:	f800283a 	ret
   43d50:	017fff04 	movi	r5,-4
   43d54:	414a703a 	and	r5,r8,r5
   43d58:	814d883a 	add	r6,r16,r5
   43d5c:	30c01f16 	blt	r6,r3,43ddc <_realloc_r+0x22c>
   43d60:	20800317 	ldw	r2,12(r4)
   43d64:	20c00217 	ldw	r3,8(r4)
   43d68:	a825883a 	mov	r18,r21
   43d6c:	3021883a 	mov	r16,r6
   43d70:	18800315 	stw	r2,12(r3)
   43d74:	10c00215 	stw	r3,8(r2)
   43d78:	003fdb06 	br	43ce8 <__alt_data_end+0xf4043ce8>
   43d7c:	00800304 	movi	r2,12
   43d80:	a0800015 	stw	r2,0(r20)
   43d84:	0005883a 	mov	r2,zero
   43d88:	003fe506 	br	43d20 <__alt_data_end+0xf4043d20>
   43d8c:	98c00117 	ldw	r3,4(r19)
   43d90:	9c4b883a 	add	r5,r19,r17
   43d94:	11000054 	ori	r4,r2,1
   43d98:	18c0004c 	andi	r3,r3,1
   43d9c:	1c62b03a 	or	r17,r3,r17
   43da0:	9c400115 	stw	r17,4(r19)
   43da4:	29000115 	stw	r4,4(r5)
   43da8:	2885883a 	add	r2,r5,r2
   43dac:	10c00117 	ldw	r3,4(r2)
   43db0:	29400204 	addi	r5,r5,8
   43db4:	a009883a 	mov	r4,r20
   43db8:	18c00054 	ori	r3,r3,1
   43dbc:	10c00115 	stw	r3,4(r2)
   43dc0:	0044d680 	call	44d68 <_free_r>
   43dc4:	003fd306 	br	43d14 <__alt_data_end+0xf4043d14>
   43dc8:	017fff04 	movi	r5,-4
   43dcc:	414a703a 	and	r5,r8,r5
   43dd0:	89800404 	addi	r6,r17,16
   43dd4:	8151883a 	add	r8,r16,r5
   43dd8:	4180590e 	bge	r8,r6,43f40 <_realloc_r+0x390>
   43ddc:	1080004c 	andi	r2,r2,1
   43de0:	103f9e1e 	bne	r2,zero,43c5c <__alt_data_end+0xf4043c5c>
   43de4:	adbffe17 	ldw	r22,-8(r21)
   43de8:	00bfff04 	movi	r2,-4
   43dec:	9dadc83a 	sub	r22,r19,r22
   43df0:	b1800117 	ldw	r6,4(r22)
   43df4:	3084703a 	and	r2,r6,r2
   43df8:	20002026 	beq	r4,zero,43e7c <_realloc_r+0x2cc>
   43dfc:	80af883a 	add	r23,r16,r2
   43e00:	b96f883a 	add	r23,r23,r5
   43e04:	21c05f26 	beq	r4,r7,43f84 <_realloc_r+0x3d4>
   43e08:	b8c01c16 	blt	r23,r3,43e7c <_realloc_r+0x2cc>
   43e0c:	20800317 	ldw	r2,12(r4)
   43e10:	20c00217 	ldw	r3,8(r4)
   43e14:	81bfff04 	addi	r6,r16,-4
   43e18:	01000904 	movi	r4,36
   43e1c:	18800315 	stw	r2,12(r3)
   43e20:	10c00215 	stw	r3,8(r2)
   43e24:	b0c00217 	ldw	r3,8(r22)
   43e28:	b0800317 	ldw	r2,12(r22)
   43e2c:	b4800204 	addi	r18,r22,8
   43e30:	18800315 	stw	r2,12(r3)
   43e34:	10c00215 	stw	r3,8(r2)
   43e38:	21801b36 	bltu	r4,r6,43ea8 <_realloc_r+0x2f8>
   43e3c:	008004c4 	movi	r2,19
   43e40:	1180352e 	bgeu	r2,r6,43f18 <_realloc_r+0x368>
   43e44:	a8800017 	ldw	r2,0(r21)
   43e48:	b0800215 	stw	r2,8(r22)
   43e4c:	a8800117 	ldw	r2,4(r21)
   43e50:	b0800315 	stw	r2,12(r22)
   43e54:	008006c4 	movi	r2,27
   43e58:	11807f36 	bltu	r2,r6,44058 <_realloc_r+0x4a8>
   43e5c:	b0800404 	addi	r2,r22,16
   43e60:	ad400204 	addi	r21,r21,8
   43e64:	00002d06 	br	43f1c <_realloc_r+0x36c>
   43e68:	adbffe17 	ldw	r22,-8(r21)
   43e6c:	00bfff04 	movi	r2,-4
   43e70:	9dadc83a 	sub	r22,r19,r22
   43e74:	b1000117 	ldw	r4,4(r22)
   43e78:	2084703a 	and	r2,r4,r2
   43e7c:	b03f7726 	beq	r22,zero,43c5c <__alt_data_end+0xf4043c5c>
   43e80:	80af883a 	add	r23,r16,r2
   43e84:	b8ff7516 	blt	r23,r3,43c5c <__alt_data_end+0xf4043c5c>
   43e88:	b0800317 	ldw	r2,12(r22)
   43e8c:	b0c00217 	ldw	r3,8(r22)
   43e90:	81bfff04 	addi	r6,r16,-4
   43e94:	01000904 	movi	r4,36
   43e98:	18800315 	stw	r2,12(r3)
   43e9c:	10c00215 	stw	r3,8(r2)
   43ea0:	b4800204 	addi	r18,r22,8
   43ea4:	21bfe52e 	bgeu	r4,r6,43e3c <__alt_data_end+0xf4043e3c>
   43ea8:	a80b883a 	mov	r5,r21
   43eac:	9009883a 	mov	r4,r18
   43eb0:	0043a540 	call	43a54 <memmove>
   43eb4:	b821883a 	mov	r16,r23
   43eb8:	b027883a 	mov	r19,r22
   43ebc:	003f8a06 	br	43ce8 <__alt_data_end+0xf4043ce8>
   43ec0:	300b883a 	mov	r5,r6
   43ec4:	dfc00917 	ldw	ra,36(sp)
   43ec8:	df000817 	ldw	fp,32(sp)
   43ecc:	ddc00717 	ldw	r23,28(sp)
   43ed0:	dd800617 	ldw	r22,24(sp)
   43ed4:	dd400517 	ldw	r21,20(sp)
   43ed8:	dd000417 	ldw	r20,16(sp)
   43edc:	dcc00317 	ldw	r19,12(sp)
   43ee0:	dc800217 	ldw	r18,8(sp)
   43ee4:	dc400117 	ldw	r17,4(sp)
   43ee8:	dc000017 	ldw	r16,0(sp)
   43eec:	dec00a04 	addi	sp,sp,40
   43ef0:	0042fa01 	jmpi	42fa0 <_malloc_r>
   43ef4:	a8c00017 	ldw	r3,0(r21)
   43ef8:	90c00015 	stw	r3,0(r18)
   43efc:	a8c00117 	ldw	r3,4(r21)
   43f00:	90c00115 	stw	r3,4(r18)
   43f04:	00c006c4 	movi	r3,27
   43f08:	19804536 	bltu	r3,r6,44020 <_realloc_r+0x470>
   43f0c:	90800204 	addi	r2,r18,8
   43f10:	a8c00204 	addi	r3,r21,8
   43f14:	003f6306 	br	43ca4 <__alt_data_end+0xf4043ca4>
   43f18:	9005883a 	mov	r2,r18
   43f1c:	a8c00017 	ldw	r3,0(r21)
   43f20:	b821883a 	mov	r16,r23
   43f24:	b027883a 	mov	r19,r22
   43f28:	10c00015 	stw	r3,0(r2)
   43f2c:	a8c00117 	ldw	r3,4(r21)
   43f30:	10c00115 	stw	r3,4(r2)
   43f34:	a8c00217 	ldw	r3,8(r21)
   43f38:	10c00215 	stw	r3,8(r2)
   43f3c:	003f6a06 	br	43ce8 <__alt_data_end+0xf4043ce8>
   43f40:	9c67883a 	add	r19,r19,r17
   43f44:	4445c83a 	sub	r2,r8,r17
   43f48:	e4c00215 	stw	r19,8(fp)
   43f4c:	10800054 	ori	r2,r2,1
   43f50:	98800115 	stw	r2,4(r19)
   43f54:	a8bfff17 	ldw	r2,-4(r21)
   43f58:	a009883a 	mov	r4,r20
   43f5c:	1080004c 	andi	r2,r2,1
   43f60:	1462b03a 	or	r17,r2,r17
   43f64:	ac7fff15 	stw	r17,-4(r21)
   43f68:	0045c940 	call	45c94 <__malloc_unlock>
   43f6c:	a805883a 	mov	r2,r21
   43f70:	003f6b06 	br	43d20 <__alt_data_end+0xf4043d20>
   43f74:	a80b883a 	mov	r5,r21
   43f78:	9009883a 	mov	r4,r18
   43f7c:	0043a540 	call	43a54 <memmove>
   43f80:	003f4e06 	br	43cbc <__alt_data_end+0xf4043cbc>
   43f84:	89000404 	addi	r4,r17,16
   43f88:	b93fbc16 	blt	r23,r4,43e7c <__alt_data_end+0xf4043e7c>
   43f8c:	b0800317 	ldw	r2,12(r22)
   43f90:	b0c00217 	ldw	r3,8(r22)
   43f94:	81bfff04 	addi	r6,r16,-4
   43f98:	01000904 	movi	r4,36
   43f9c:	18800315 	stw	r2,12(r3)
   43fa0:	10c00215 	stw	r3,8(r2)
   43fa4:	b4800204 	addi	r18,r22,8
   43fa8:	21804336 	bltu	r4,r6,440b8 <_realloc_r+0x508>
   43fac:	008004c4 	movi	r2,19
   43fb0:	11803f2e 	bgeu	r2,r6,440b0 <_realloc_r+0x500>
   43fb4:	a8800017 	ldw	r2,0(r21)
   43fb8:	b0800215 	stw	r2,8(r22)
   43fbc:	a8800117 	ldw	r2,4(r21)
   43fc0:	b0800315 	stw	r2,12(r22)
   43fc4:	008006c4 	movi	r2,27
   43fc8:	11803f36 	bltu	r2,r6,440c8 <_realloc_r+0x518>
   43fcc:	b0800404 	addi	r2,r22,16
   43fd0:	ad400204 	addi	r21,r21,8
   43fd4:	a8c00017 	ldw	r3,0(r21)
   43fd8:	10c00015 	stw	r3,0(r2)
   43fdc:	a8c00117 	ldw	r3,4(r21)
   43fe0:	10c00115 	stw	r3,4(r2)
   43fe4:	a8c00217 	ldw	r3,8(r21)
   43fe8:	10c00215 	stw	r3,8(r2)
   43fec:	b447883a 	add	r3,r22,r17
   43ff0:	bc45c83a 	sub	r2,r23,r17
   43ff4:	e0c00215 	stw	r3,8(fp)
   43ff8:	10800054 	ori	r2,r2,1
   43ffc:	18800115 	stw	r2,4(r3)
   44000:	b0800117 	ldw	r2,4(r22)
   44004:	a009883a 	mov	r4,r20
   44008:	1080004c 	andi	r2,r2,1
   4400c:	1462b03a 	or	r17,r2,r17
   44010:	b4400115 	stw	r17,4(r22)
   44014:	0045c940 	call	45c94 <__malloc_unlock>
   44018:	9005883a 	mov	r2,r18
   4401c:	003f4006 	br	43d20 <__alt_data_end+0xf4043d20>
   44020:	a8c00217 	ldw	r3,8(r21)
   44024:	90c00215 	stw	r3,8(r18)
   44028:	a8c00317 	ldw	r3,12(r21)
   4402c:	90c00315 	stw	r3,12(r18)
   44030:	30801126 	beq	r6,r2,44078 <_realloc_r+0x4c8>
   44034:	90800404 	addi	r2,r18,16
   44038:	a8c00404 	addi	r3,r21,16
   4403c:	003f1906 	br	43ca4 <__alt_data_end+0xf4043ca4>
   44040:	90ffff17 	ldw	r3,-4(r18)
   44044:	00bfff04 	movi	r2,-4
   44048:	a825883a 	mov	r18,r21
   4404c:	1884703a 	and	r2,r3,r2
   44050:	80a1883a 	add	r16,r16,r2
   44054:	003f2406 	br	43ce8 <__alt_data_end+0xf4043ce8>
   44058:	a8800217 	ldw	r2,8(r21)
   4405c:	b0800415 	stw	r2,16(r22)
   44060:	a8800317 	ldw	r2,12(r21)
   44064:	b0800515 	stw	r2,20(r22)
   44068:	31000a26 	beq	r6,r4,44094 <_realloc_r+0x4e4>
   4406c:	b0800604 	addi	r2,r22,24
   44070:	ad400404 	addi	r21,r21,16
   44074:	003fa906 	br	43f1c <__alt_data_end+0xf4043f1c>
   44078:	a9000417 	ldw	r4,16(r21)
   4407c:	90800604 	addi	r2,r18,24
   44080:	a8c00604 	addi	r3,r21,24
   44084:	91000415 	stw	r4,16(r18)
   44088:	a9000517 	ldw	r4,20(r21)
   4408c:	91000515 	stw	r4,20(r18)
   44090:	003f0406 	br	43ca4 <__alt_data_end+0xf4043ca4>
   44094:	a8c00417 	ldw	r3,16(r21)
   44098:	ad400604 	addi	r21,r21,24
   4409c:	b0800804 	addi	r2,r22,32
   440a0:	b0c00615 	stw	r3,24(r22)
   440a4:	a8ffff17 	ldw	r3,-4(r21)
   440a8:	b0c00715 	stw	r3,28(r22)
   440ac:	003f9b06 	br	43f1c <__alt_data_end+0xf4043f1c>
   440b0:	9005883a 	mov	r2,r18
   440b4:	003fc706 	br	43fd4 <__alt_data_end+0xf4043fd4>
   440b8:	a80b883a 	mov	r5,r21
   440bc:	9009883a 	mov	r4,r18
   440c0:	0043a540 	call	43a54 <memmove>
   440c4:	003fc906 	br	43fec <__alt_data_end+0xf4043fec>
   440c8:	a8800217 	ldw	r2,8(r21)
   440cc:	b0800415 	stw	r2,16(r22)
   440d0:	a8800317 	ldw	r2,12(r21)
   440d4:	b0800515 	stw	r2,20(r22)
   440d8:	31000726 	beq	r6,r4,440f8 <_realloc_r+0x548>
   440dc:	b0800604 	addi	r2,r22,24
   440e0:	ad400404 	addi	r21,r21,16
   440e4:	003fbb06 	br	43fd4 <__alt_data_end+0xf4043fd4>
   440e8:	a009883a 	mov	r4,r20
   440ec:	0045c940 	call	45c94 <__malloc_unlock>
   440f0:	0005883a 	mov	r2,zero
   440f4:	003f0a06 	br	43d20 <__alt_data_end+0xf4043d20>
   440f8:	a8c00417 	ldw	r3,16(r21)
   440fc:	ad400604 	addi	r21,r21,24
   44100:	b0800804 	addi	r2,r22,32
   44104:	b0c00615 	stw	r3,24(r22)
   44108:	a8ffff17 	ldw	r3,-4(r21)
   4410c:	b0c00715 	stw	r3,28(r22)
   44110:	003fb006 	br	43fd4 <__alt_data_end+0xf4043fd4>

00044114 <_sbrk_r>:
   44114:	defffd04 	addi	sp,sp,-12
   44118:	dc000015 	stw	r16,0(sp)
   4411c:	04020034 	movhi	r16,2048
   44120:	dc400115 	stw	r17,4(sp)
   44124:	84070b04 	addi	r16,r16,7212
   44128:	2023883a 	mov	r17,r4
   4412c:	2809883a 	mov	r4,r5
   44130:	dfc00215 	stw	ra,8(sp)
   44134:	80000015 	stw	zero,0(r16)
   44138:	0045df80 	call	45df8 <sbrk>
   4413c:	00ffffc4 	movi	r3,-1
   44140:	10c00526 	beq	r2,r3,44158 <_sbrk_r+0x44>
   44144:	dfc00217 	ldw	ra,8(sp)
   44148:	dc400117 	ldw	r17,4(sp)
   4414c:	dc000017 	ldw	r16,0(sp)
   44150:	dec00304 	addi	sp,sp,12
   44154:	f800283a 	ret
   44158:	80c00017 	ldw	r3,0(r16)
   4415c:	183ff926 	beq	r3,zero,44144 <__alt_data_end+0xf4044144>
   44160:	88c00015 	stw	r3,0(r17)
   44164:	003ff706 	br	44144 <__alt_data_end+0xf4044144>

00044168 <strlen>:
   44168:	208000cc 	andi	r2,r4,3
   4416c:	10002026 	beq	r2,zero,441f0 <strlen+0x88>
   44170:	20800007 	ldb	r2,0(r4)
   44174:	10002026 	beq	r2,zero,441f8 <strlen+0x90>
   44178:	2005883a 	mov	r2,r4
   4417c:	00000206 	br	44188 <strlen+0x20>
   44180:	10c00007 	ldb	r3,0(r2)
   44184:	18001826 	beq	r3,zero,441e8 <strlen+0x80>
   44188:	10800044 	addi	r2,r2,1
   4418c:	10c000cc 	andi	r3,r2,3
   44190:	183ffb1e 	bne	r3,zero,44180 <__alt_data_end+0xf4044180>
   44194:	10c00017 	ldw	r3,0(r2)
   44198:	01ffbff4 	movhi	r7,65279
   4419c:	39ffbfc4 	addi	r7,r7,-257
   441a0:	00ca303a 	nor	r5,zero,r3
   441a4:	01a02074 	movhi	r6,32897
   441a8:	19c7883a 	add	r3,r3,r7
   441ac:	31a02004 	addi	r6,r6,-32640
   441b0:	1946703a 	and	r3,r3,r5
   441b4:	1986703a 	and	r3,r3,r6
   441b8:	1800091e 	bne	r3,zero,441e0 <strlen+0x78>
   441bc:	10800104 	addi	r2,r2,4
   441c0:	10c00017 	ldw	r3,0(r2)
   441c4:	19cb883a 	add	r5,r3,r7
   441c8:	00c6303a 	nor	r3,zero,r3
   441cc:	28c6703a 	and	r3,r5,r3
   441d0:	1986703a 	and	r3,r3,r6
   441d4:	183ff926 	beq	r3,zero,441bc <__alt_data_end+0xf40441bc>
   441d8:	00000106 	br	441e0 <strlen+0x78>
   441dc:	10800044 	addi	r2,r2,1
   441e0:	10c00007 	ldb	r3,0(r2)
   441e4:	183ffd1e 	bne	r3,zero,441dc <__alt_data_end+0xf40441dc>
   441e8:	1105c83a 	sub	r2,r2,r4
   441ec:	f800283a 	ret
   441f0:	2005883a 	mov	r2,r4
   441f4:	003fe706 	br	44194 <__alt_data_end+0xf4044194>
   441f8:	0005883a 	mov	r2,zero
   441fc:	f800283a 	ret

00044200 <__swsetup_r>:
   44200:	00820034 	movhi	r2,2048
   44204:	defffd04 	addi	sp,sp,-12
   44208:	10870004 	addi	r2,r2,7168
   4420c:	dc400115 	stw	r17,4(sp)
   44210:	2023883a 	mov	r17,r4
   44214:	11000017 	ldw	r4,0(r2)
   44218:	dc000015 	stw	r16,0(sp)
   4421c:	dfc00215 	stw	ra,8(sp)
   44220:	2821883a 	mov	r16,r5
   44224:	20000226 	beq	r4,zero,44230 <__swsetup_r+0x30>
   44228:	20800e17 	ldw	r2,56(r4)
   4422c:	10003126 	beq	r2,zero,442f4 <__swsetup_r+0xf4>
   44230:	8080030b 	ldhu	r2,12(r16)
   44234:	10c0020c 	andi	r3,r2,8
   44238:	1009883a 	mov	r4,r2
   4423c:	18000f26 	beq	r3,zero,4427c <__swsetup_r+0x7c>
   44240:	80c00417 	ldw	r3,16(r16)
   44244:	18001526 	beq	r3,zero,4429c <__swsetup_r+0x9c>
   44248:	1100004c 	andi	r4,r2,1
   4424c:	20001c1e 	bne	r4,zero,442c0 <__swsetup_r+0xc0>
   44250:	1080008c 	andi	r2,r2,2
   44254:	1000291e 	bne	r2,zero,442fc <__swsetup_r+0xfc>
   44258:	80800517 	ldw	r2,20(r16)
   4425c:	80800215 	stw	r2,8(r16)
   44260:	18001c26 	beq	r3,zero,442d4 <__swsetup_r+0xd4>
   44264:	0005883a 	mov	r2,zero
   44268:	dfc00217 	ldw	ra,8(sp)
   4426c:	dc400117 	ldw	r17,4(sp)
   44270:	dc000017 	ldw	r16,0(sp)
   44274:	dec00304 	addi	sp,sp,12
   44278:	f800283a 	ret
   4427c:	2080040c 	andi	r2,r4,16
   44280:	10002e26 	beq	r2,zero,4433c <__swsetup_r+0x13c>
   44284:	2080010c 	andi	r2,r4,4
   44288:	10001e1e 	bne	r2,zero,44304 <__swsetup_r+0x104>
   4428c:	80c00417 	ldw	r3,16(r16)
   44290:	20800214 	ori	r2,r4,8
   44294:	8080030d 	sth	r2,12(r16)
   44298:	183feb1e 	bne	r3,zero,44248 <__alt_data_end+0xf4044248>
   4429c:	1100a00c 	andi	r4,r2,640
   442a0:	01408004 	movi	r5,512
   442a4:	217fe826 	beq	r4,r5,44248 <__alt_data_end+0xf4044248>
   442a8:	800b883a 	mov	r5,r16
   442ac:	8809883a 	mov	r4,r17
   442b0:	00452000 	call	45200 <__smakebuf_r>
   442b4:	8080030b 	ldhu	r2,12(r16)
   442b8:	80c00417 	ldw	r3,16(r16)
   442bc:	003fe206 	br	44248 <__alt_data_end+0xf4044248>
   442c0:	80800517 	ldw	r2,20(r16)
   442c4:	80000215 	stw	zero,8(r16)
   442c8:	0085c83a 	sub	r2,zero,r2
   442cc:	80800615 	stw	r2,24(r16)
   442d0:	183fe41e 	bne	r3,zero,44264 <__alt_data_end+0xf4044264>
   442d4:	80c0030b 	ldhu	r3,12(r16)
   442d8:	0005883a 	mov	r2,zero
   442dc:	1900200c 	andi	r4,r3,128
   442e0:	203fe126 	beq	r4,zero,44268 <__alt_data_end+0xf4044268>
   442e4:	18c01014 	ori	r3,r3,64
   442e8:	80c0030d 	sth	r3,12(r16)
   442ec:	00bfffc4 	movi	r2,-1
   442f0:	003fdd06 	br	44268 <__alt_data_end+0xf4044268>
   442f4:	0044bf40 	call	44bf4 <__sinit>
   442f8:	003fcd06 	br	44230 <__alt_data_end+0xf4044230>
   442fc:	0005883a 	mov	r2,zero
   44300:	003fd606 	br	4425c <__alt_data_end+0xf404425c>
   44304:	81400c17 	ldw	r5,48(r16)
   44308:	28000626 	beq	r5,zero,44324 <__swsetup_r+0x124>
   4430c:	80801004 	addi	r2,r16,64
   44310:	28800326 	beq	r5,r2,44320 <__swsetup_r+0x120>
   44314:	8809883a 	mov	r4,r17
   44318:	0044d680 	call	44d68 <_free_r>
   4431c:	8100030b 	ldhu	r4,12(r16)
   44320:	80000c15 	stw	zero,48(r16)
   44324:	80c00417 	ldw	r3,16(r16)
   44328:	00bff6c4 	movi	r2,-37
   4432c:	1108703a 	and	r4,r2,r4
   44330:	80000115 	stw	zero,4(r16)
   44334:	80c00015 	stw	r3,0(r16)
   44338:	003fd506 	br	44290 <__alt_data_end+0xf4044290>
   4433c:	00800244 	movi	r2,9
   44340:	88800015 	stw	r2,0(r17)
   44344:	20801014 	ori	r2,r4,64
   44348:	8080030d 	sth	r2,12(r16)
   4434c:	00bfffc4 	movi	r2,-1
   44350:	003fc506 	br	44268 <__alt_data_end+0xf4044268>

00044354 <__register_exitproc>:
   44354:	defffa04 	addi	sp,sp,-24
   44358:	dc000315 	stw	r16,12(sp)
   4435c:	04020034 	movhi	r16,2048
   44360:	8406ff04 	addi	r16,r16,7164
   44364:	80c00017 	ldw	r3,0(r16)
   44368:	dc400415 	stw	r17,16(sp)
   4436c:	dfc00515 	stw	ra,20(sp)
   44370:	18805217 	ldw	r2,328(r3)
   44374:	2023883a 	mov	r17,r4
   44378:	10003726 	beq	r2,zero,44458 <__register_exitproc+0x104>
   4437c:	10c00117 	ldw	r3,4(r2)
   44380:	010007c4 	movi	r4,31
   44384:	20c00e16 	blt	r4,r3,443c0 <__register_exitproc+0x6c>
   44388:	1a000044 	addi	r8,r3,1
   4438c:	8800221e 	bne	r17,zero,44418 <__register_exitproc+0xc4>
   44390:	18c00084 	addi	r3,r3,2
   44394:	18c7883a 	add	r3,r3,r3
   44398:	18c7883a 	add	r3,r3,r3
   4439c:	12000115 	stw	r8,4(r2)
   443a0:	10c7883a 	add	r3,r2,r3
   443a4:	19400015 	stw	r5,0(r3)
   443a8:	0005883a 	mov	r2,zero
   443ac:	dfc00517 	ldw	ra,20(sp)
   443b0:	dc400417 	ldw	r17,16(sp)
   443b4:	dc000317 	ldw	r16,12(sp)
   443b8:	dec00604 	addi	sp,sp,24
   443bc:	f800283a 	ret
   443c0:	00800034 	movhi	r2,0
   443c4:	10800004 	addi	r2,r2,0
   443c8:	10002626 	beq	r2,zero,44464 <__register_exitproc+0x110>
   443cc:	01006404 	movi	r4,400
   443d0:	d9400015 	stw	r5,0(sp)
   443d4:	d9800115 	stw	r6,4(sp)
   443d8:	d9c00215 	stw	r7,8(sp)
   443dc:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x40000>
   443e0:	d9400017 	ldw	r5,0(sp)
   443e4:	d9800117 	ldw	r6,4(sp)
   443e8:	d9c00217 	ldw	r7,8(sp)
   443ec:	10001d26 	beq	r2,zero,44464 <__register_exitproc+0x110>
   443f0:	81000017 	ldw	r4,0(r16)
   443f4:	10000115 	stw	zero,4(r2)
   443f8:	02000044 	movi	r8,1
   443fc:	22405217 	ldw	r9,328(r4)
   44400:	0007883a 	mov	r3,zero
   44404:	12400015 	stw	r9,0(r2)
   44408:	20805215 	stw	r2,328(r4)
   4440c:	10006215 	stw	zero,392(r2)
   44410:	10006315 	stw	zero,396(r2)
   44414:	883fde26 	beq	r17,zero,44390 <__alt_data_end+0xf4044390>
   44418:	18c9883a 	add	r4,r3,r3
   4441c:	2109883a 	add	r4,r4,r4
   44420:	1109883a 	add	r4,r2,r4
   44424:	21802215 	stw	r6,136(r4)
   44428:	01800044 	movi	r6,1
   4442c:	12406217 	ldw	r9,392(r2)
   44430:	30cc983a 	sll	r6,r6,r3
   44434:	4992b03a 	or	r9,r9,r6
   44438:	12406215 	stw	r9,392(r2)
   4443c:	21c04215 	stw	r7,264(r4)
   44440:	01000084 	movi	r4,2
   44444:	893fd21e 	bne	r17,r4,44390 <__alt_data_end+0xf4044390>
   44448:	11006317 	ldw	r4,396(r2)
   4444c:	218cb03a 	or	r6,r4,r6
   44450:	11806315 	stw	r6,396(r2)
   44454:	003fce06 	br	44390 <__alt_data_end+0xf4044390>
   44458:	18805304 	addi	r2,r3,332
   4445c:	18805215 	stw	r2,328(r3)
   44460:	003fc606 	br	4437c <__alt_data_end+0xf404437c>
   44464:	00bfffc4 	movi	r2,-1
   44468:	003fd006 	br	443ac <__alt_data_end+0xf40443ac>

0004446c <__call_exitprocs>:
   4446c:	defff504 	addi	sp,sp,-44
   44470:	df000915 	stw	fp,36(sp)
   44474:	dd400615 	stw	r21,24(sp)
   44478:	dc800315 	stw	r18,12(sp)
   4447c:	dfc00a15 	stw	ra,40(sp)
   44480:	ddc00815 	stw	r23,32(sp)
   44484:	dd800715 	stw	r22,28(sp)
   44488:	dd000515 	stw	r20,20(sp)
   4448c:	dcc00415 	stw	r19,16(sp)
   44490:	dc400215 	stw	r17,8(sp)
   44494:	dc000115 	stw	r16,4(sp)
   44498:	d9000015 	stw	r4,0(sp)
   4449c:	2839883a 	mov	fp,r5
   444a0:	04800044 	movi	r18,1
   444a4:	057fffc4 	movi	r21,-1
   444a8:	00820034 	movhi	r2,2048
   444ac:	1086ff04 	addi	r2,r2,7164
   444b0:	12000017 	ldw	r8,0(r2)
   444b4:	45005217 	ldw	r20,328(r8)
   444b8:	44c05204 	addi	r19,r8,328
   444bc:	a0001c26 	beq	r20,zero,44530 <__call_exitprocs+0xc4>
   444c0:	a0800117 	ldw	r2,4(r20)
   444c4:	15ffffc4 	addi	r23,r2,-1
   444c8:	b8000d16 	blt	r23,zero,44500 <__call_exitprocs+0x94>
   444cc:	14000044 	addi	r16,r2,1
   444d0:	8421883a 	add	r16,r16,r16
   444d4:	8421883a 	add	r16,r16,r16
   444d8:	84402004 	addi	r17,r16,128
   444dc:	a463883a 	add	r17,r20,r17
   444e0:	a421883a 	add	r16,r20,r16
   444e4:	e0001e26 	beq	fp,zero,44560 <__call_exitprocs+0xf4>
   444e8:	80804017 	ldw	r2,256(r16)
   444ec:	e0801c26 	beq	fp,r2,44560 <__call_exitprocs+0xf4>
   444f0:	bdffffc4 	addi	r23,r23,-1
   444f4:	843fff04 	addi	r16,r16,-4
   444f8:	8c7fff04 	addi	r17,r17,-4
   444fc:	bd7ff91e 	bne	r23,r21,444e4 <__alt_data_end+0xf40444e4>
   44500:	00800034 	movhi	r2,0
   44504:	10800004 	addi	r2,r2,0
   44508:	10000926 	beq	r2,zero,44530 <__call_exitprocs+0xc4>
   4450c:	a0800117 	ldw	r2,4(r20)
   44510:	1000301e 	bne	r2,zero,445d4 <__call_exitprocs+0x168>
   44514:	a0800017 	ldw	r2,0(r20)
   44518:	10003226 	beq	r2,zero,445e4 <__call_exitprocs+0x178>
   4451c:	a009883a 	mov	r4,r20
   44520:	98800015 	stw	r2,0(r19)
   44524:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x40000>
   44528:	9d000017 	ldw	r20,0(r19)
   4452c:	a03fe41e 	bne	r20,zero,444c0 <__alt_data_end+0xf40444c0>
   44530:	dfc00a17 	ldw	ra,40(sp)
   44534:	df000917 	ldw	fp,36(sp)
   44538:	ddc00817 	ldw	r23,32(sp)
   4453c:	dd800717 	ldw	r22,28(sp)
   44540:	dd400617 	ldw	r21,24(sp)
   44544:	dd000517 	ldw	r20,20(sp)
   44548:	dcc00417 	ldw	r19,16(sp)
   4454c:	dc800317 	ldw	r18,12(sp)
   44550:	dc400217 	ldw	r17,8(sp)
   44554:	dc000117 	ldw	r16,4(sp)
   44558:	dec00b04 	addi	sp,sp,44
   4455c:	f800283a 	ret
   44560:	a0800117 	ldw	r2,4(r20)
   44564:	80c00017 	ldw	r3,0(r16)
   44568:	10bfffc4 	addi	r2,r2,-1
   4456c:	15c01426 	beq	r2,r23,445c0 <__call_exitprocs+0x154>
   44570:	80000015 	stw	zero,0(r16)
   44574:	183fde26 	beq	r3,zero,444f0 <__alt_data_end+0xf40444f0>
   44578:	95c8983a 	sll	r4,r18,r23
   4457c:	a0806217 	ldw	r2,392(r20)
   44580:	a5800117 	ldw	r22,4(r20)
   44584:	2084703a 	and	r2,r4,r2
   44588:	10000b26 	beq	r2,zero,445b8 <__call_exitprocs+0x14c>
   4458c:	a0806317 	ldw	r2,396(r20)
   44590:	2088703a 	and	r4,r4,r2
   44594:	20000c1e 	bne	r4,zero,445c8 <__call_exitprocs+0x15c>
   44598:	89400017 	ldw	r5,0(r17)
   4459c:	d9000017 	ldw	r4,0(sp)
   445a0:	183ee83a 	callr	r3
   445a4:	a0800117 	ldw	r2,4(r20)
   445a8:	15bfbf1e 	bne	r2,r22,444a8 <__alt_data_end+0xf40444a8>
   445ac:	98800017 	ldw	r2,0(r19)
   445b0:	153fcf26 	beq	r2,r20,444f0 <__alt_data_end+0xf40444f0>
   445b4:	003fbc06 	br	444a8 <__alt_data_end+0xf40444a8>
   445b8:	183ee83a 	callr	r3
   445bc:	003ff906 	br	445a4 <__alt_data_end+0xf40445a4>
   445c0:	a5c00115 	stw	r23,4(r20)
   445c4:	003feb06 	br	44574 <__alt_data_end+0xf4044574>
   445c8:	89000017 	ldw	r4,0(r17)
   445cc:	183ee83a 	callr	r3
   445d0:	003ff406 	br	445a4 <__alt_data_end+0xf40445a4>
   445d4:	a0800017 	ldw	r2,0(r20)
   445d8:	a027883a 	mov	r19,r20
   445dc:	1029883a 	mov	r20,r2
   445e0:	003fb606 	br	444bc <__alt_data_end+0xf40444bc>
   445e4:	0005883a 	mov	r2,zero
   445e8:	003ffb06 	br	445d8 <__alt_data_end+0xf40445d8>

000445ec <__sflush_r>:
   445ec:	2880030b 	ldhu	r2,12(r5)
   445f0:	defffb04 	addi	sp,sp,-20
   445f4:	dcc00315 	stw	r19,12(sp)
   445f8:	dc400115 	stw	r17,4(sp)
   445fc:	dfc00415 	stw	ra,16(sp)
   44600:	dc800215 	stw	r18,8(sp)
   44604:	dc000015 	stw	r16,0(sp)
   44608:	10c0020c 	andi	r3,r2,8
   4460c:	2823883a 	mov	r17,r5
   44610:	2027883a 	mov	r19,r4
   44614:	1800311e 	bne	r3,zero,446dc <__sflush_r+0xf0>
   44618:	28c00117 	ldw	r3,4(r5)
   4461c:	10820014 	ori	r2,r2,2048
   44620:	2880030d 	sth	r2,12(r5)
   44624:	00c04b0e 	bge	zero,r3,44754 <__sflush_r+0x168>
   44628:	8a000a17 	ldw	r8,40(r17)
   4462c:	40002326 	beq	r8,zero,446bc <__sflush_r+0xd0>
   44630:	9c000017 	ldw	r16,0(r19)
   44634:	10c4000c 	andi	r3,r2,4096
   44638:	98000015 	stw	zero,0(r19)
   4463c:	18004826 	beq	r3,zero,44760 <__sflush_r+0x174>
   44640:	89801417 	ldw	r6,80(r17)
   44644:	10c0010c 	andi	r3,r2,4
   44648:	18000626 	beq	r3,zero,44664 <__sflush_r+0x78>
   4464c:	88c00117 	ldw	r3,4(r17)
   44650:	88800c17 	ldw	r2,48(r17)
   44654:	30cdc83a 	sub	r6,r6,r3
   44658:	10000226 	beq	r2,zero,44664 <__sflush_r+0x78>
   4465c:	88800f17 	ldw	r2,60(r17)
   44660:	308dc83a 	sub	r6,r6,r2
   44664:	89400717 	ldw	r5,28(r17)
   44668:	000f883a 	mov	r7,zero
   4466c:	9809883a 	mov	r4,r19
   44670:	403ee83a 	callr	r8
   44674:	00ffffc4 	movi	r3,-1
   44678:	10c04426 	beq	r2,r3,4478c <__sflush_r+0x1a0>
   4467c:	88c0030b 	ldhu	r3,12(r17)
   44680:	89000417 	ldw	r4,16(r17)
   44684:	88000115 	stw	zero,4(r17)
   44688:	197dffcc 	andi	r5,r3,63487
   4468c:	8940030d 	sth	r5,12(r17)
   44690:	89000015 	stw	r4,0(r17)
   44694:	18c4000c 	andi	r3,r3,4096
   44698:	18002c1e 	bne	r3,zero,4474c <__sflush_r+0x160>
   4469c:	89400c17 	ldw	r5,48(r17)
   446a0:	9c000015 	stw	r16,0(r19)
   446a4:	28000526 	beq	r5,zero,446bc <__sflush_r+0xd0>
   446a8:	88801004 	addi	r2,r17,64
   446ac:	28800226 	beq	r5,r2,446b8 <__sflush_r+0xcc>
   446b0:	9809883a 	mov	r4,r19
   446b4:	0044d680 	call	44d68 <_free_r>
   446b8:	88000c15 	stw	zero,48(r17)
   446bc:	0005883a 	mov	r2,zero
   446c0:	dfc00417 	ldw	ra,16(sp)
   446c4:	dcc00317 	ldw	r19,12(sp)
   446c8:	dc800217 	ldw	r18,8(sp)
   446cc:	dc400117 	ldw	r17,4(sp)
   446d0:	dc000017 	ldw	r16,0(sp)
   446d4:	dec00504 	addi	sp,sp,20
   446d8:	f800283a 	ret
   446dc:	2c800417 	ldw	r18,16(r5)
   446e0:	903ff626 	beq	r18,zero,446bc <__alt_data_end+0xf40446bc>
   446e4:	2c000017 	ldw	r16,0(r5)
   446e8:	108000cc 	andi	r2,r2,3
   446ec:	2c800015 	stw	r18,0(r5)
   446f0:	84a1c83a 	sub	r16,r16,r18
   446f4:	1000131e 	bne	r2,zero,44744 <__sflush_r+0x158>
   446f8:	28800517 	ldw	r2,20(r5)
   446fc:	88800215 	stw	r2,8(r17)
   44700:	04000316 	blt	zero,r16,44710 <__sflush_r+0x124>
   44704:	003fed06 	br	446bc <__alt_data_end+0xf40446bc>
   44708:	90a5883a 	add	r18,r18,r2
   4470c:	043feb0e 	bge	zero,r16,446bc <__alt_data_end+0xf40446bc>
   44710:	88800917 	ldw	r2,36(r17)
   44714:	89400717 	ldw	r5,28(r17)
   44718:	800f883a 	mov	r7,r16
   4471c:	900d883a 	mov	r6,r18
   44720:	9809883a 	mov	r4,r19
   44724:	103ee83a 	callr	r2
   44728:	80a1c83a 	sub	r16,r16,r2
   4472c:	00bff616 	blt	zero,r2,44708 <__alt_data_end+0xf4044708>
   44730:	88c0030b 	ldhu	r3,12(r17)
   44734:	00bfffc4 	movi	r2,-1
   44738:	18c01014 	ori	r3,r3,64
   4473c:	88c0030d 	sth	r3,12(r17)
   44740:	003fdf06 	br	446c0 <__alt_data_end+0xf40446c0>
   44744:	0005883a 	mov	r2,zero
   44748:	003fec06 	br	446fc <__alt_data_end+0xf40446fc>
   4474c:	88801415 	stw	r2,80(r17)
   44750:	003fd206 	br	4469c <__alt_data_end+0xf404469c>
   44754:	28c00f17 	ldw	r3,60(r5)
   44758:	00ffb316 	blt	zero,r3,44628 <__alt_data_end+0xf4044628>
   4475c:	003fd706 	br	446bc <__alt_data_end+0xf40446bc>
   44760:	89400717 	ldw	r5,28(r17)
   44764:	000d883a 	mov	r6,zero
   44768:	01c00044 	movi	r7,1
   4476c:	9809883a 	mov	r4,r19
   44770:	403ee83a 	callr	r8
   44774:	100d883a 	mov	r6,r2
   44778:	00bfffc4 	movi	r2,-1
   4477c:	30801426 	beq	r6,r2,447d0 <__sflush_r+0x1e4>
   44780:	8880030b 	ldhu	r2,12(r17)
   44784:	8a000a17 	ldw	r8,40(r17)
   44788:	003fae06 	br	44644 <__alt_data_end+0xf4044644>
   4478c:	98c00017 	ldw	r3,0(r19)
   44790:	183fba26 	beq	r3,zero,4467c <__alt_data_end+0xf404467c>
   44794:	01000744 	movi	r4,29
   44798:	19000626 	beq	r3,r4,447b4 <__sflush_r+0x1c8>
   4479c:	01000584 	movi	r4,22
   447a0:	19000426 	beq	r3,r4,447b4 <__sflush_r+0x1c8>
   447a4:	88c0030b 	ldhu	r3,12(r17)
   447a8:	18c01014 	ori	r3,r3,64
   447ac:	88c0030d 	sth	r3,12(r17)
   447b0:	003fc306 	br	446c0 <__alt_data_end+0xf40446c0>
   447b4:	8880030b 	ldhu	r2,12(r17)
   447b8:	88c00417 	ldw	r3,16(r17)
   447bc:	88000115 	stw	zero,4(r17)
   447c0:	10bdffcc 	andi	r2,r2,63487
   447c4:	8880030d 	sth	r2,12(r17)
   447c8:	88c00015 	stw	r3,0(r17)
   447cc:	003fb306 	br	4469c <__alt_data_end+0xf404469c>
   447d0:	98800017 	ldw	r2,0(r19)
   447d4:	103fea26 	beq	r2,zero,44780 <__alt_data_end+0xf4044780>
   447d8:	00c00744 	movi	r3,29
   447dc:	10c00226 	beq	r2,r3,447e8 <__sflush_r+0x1fc>
   447e0:	00c00584 	movi	r3,22
   447e4:	10c0031e 	bne	r2,r3,447f4 <__sflush_r+0x208>
   447e8:	9c000015 	stw	r16,0(r19)
   447ec:	0005883a 	mov	r2,zero
   447f0:	003fb306 	br	446c0 <__alt_data_end+0xf40446c0>
   447f4:	88c0030b 	ldhu	r3,12(r17)
   447f8:	3005883a 	mov	r2,r6
   447fc:	18c01014 	ori	r3,r3,64
   44800:	88c0030d 	sth	r3,12(r17)
   44804:	003fae06 	br	446c0 <__alt_data_end+0xf40446c0>

00044808 <_fflush_r>:
   44808:	defffd04 	addi	sp,sp,-12
   4480c:	dc000115 	stw	r16,4(sp)
   44810:	dfc00215 	stw	ra,8(sp)
   44814:	2021883a 	mov	r16,r4
   44818:	20000226 	beq	r4,zero,44824 <_fflush_r+0x1c>
   4481c:	20800e17 	ldw	r2,56(r4)
   44820:	10000c26 	beq	r2,zero,44854 <_fflush_r+0x4c>
   44824:	2880030f 	ldh	r2,12(r5)
   44828:	1000051e 	bne	r2,zero,44840 <_fflush_r+0x38>
   4482c:	0005883a 	mov	r2,zero
   44830:	dfc00217 	ldw	ra,8(sp)
   44834:	dc000117 	ldw	r16,4(sp)
   44838:	dec00304 	addi	sp,sp,12
   4483c:	f800283a 	ret
   44840:	8009883a 	mov	r4,r16
   44844:	dfc00217 	ldw	ra,8(sp)
   44848:	dc000117 	ldw	r16,4(sp)
   4484c:	dec00304 	addi	sp,sp,12
   44850:	00445ec1 	jmpi	445ec <__sflush_r>
   44854:	d9400015 	stw	r5,0(sp)
   44858:	0044bf40 	call	44bf4 <__sinit>
   4485c:	d9400017 	ldw	r5,0(sp)
   44860:	003ff006 	br	44824 <__alt_data_end+0xf4044824>

00044864 <fflush>:
   44864:	20000526 	beq	r4,zero,4487c <fflush+0x18>
   44868:	00820034 	movhi	r2,2048
   4486c:	10870004 	addi	r2,r2,7168
   44870:	200b883a 	mov	r5,r4
   44874:	11000017 	ldw	r4,0(r2)
   44878:	00448081 	jmpi	44808 <_fflush_r>
   4487c:	00820034 	movhi	r2,2048
   44880:	1086ff04 	addi	r2,r2,7164
   44884:	11000017 	ldw	r4,0(r2)
   44888:	01400134 	movhi	r5,4
   4488c:	29520204 	addi	r5,r5,18440
   44890:	004513c1 	jmpi	4513c <_fwalk_reent>

00044894 <__fp_unlock>:
   44894:	0005883a 	mov	r2,zero
   44898:	f800283a 	ret

0004489c <_cleanup_r>:
   4489c:	01400134 	movhi	r5,4
   448a0:	2955b504 	addi	r5,r5,22228
   448a4:	004513c1 	jmpi	4513c <_fwalk_reent>

000448a8 <__sinit.part.1>:
   448a8:	defff704 	addi	sp,sp,-36
   448ac:	00c00134 	movhi	r3,4
   448b0:	dfc00815 	stw	ra,32(sp)
   448b4:	ddc00715 	stw	r23,28(sp)
   448b8:	dd800615 	stw	r22,24(sp)
   448bc:	dd400515 	stw	r21,20(sp)
   448c0:	dd000415 	stw	r20,16(sp)
   448c4:	dcc00315 	stw	r19,12(sp)
   448c8:	dc800215 	stw	r18,8(sp)
   448cc:	dc400115 	stw	r17,4(sp)
   448d0:	dc000015 	stw	r16,0(sp)
   448d4:	18d22704 	addi	r3,r3,18588
   448d8:	24000117 	ldw	r16,4(r4)
   448dc:	20c00f15 	stw	r3,60(r4)
   448e0:	2080bb04 	addi	r2,r4,748
   448e4:	00c000c4 	movi	r3,3
   448e8:	20c0b915 	stw	r3,740(r4)
   448ec:	2080ba15 	stw	r2,744(r4)
   448f0:	2000b815 	stw	zero,736(r4)
   448f4:	05c00204 	movi	r23,8
   448f8:	00800104 	movi	r2,4
   448fc:	2025883a 	mov	r18,r4
   44900:	b80d883a 	mov	r6,r23
   44904:	81001704 	addi	r4,r16,92
   44908:	000b883a 	mov	r5,zero
   4490c:	80000015 	stw	zero,0(r16)
   44910:	80000115 	stw	zero,4(r16)
   44914:	80000215 	stw	zero,8(r16)
   44918:	8080030d 	sth	r2,12(r16)
   4491c:	80001915 	stw	zero,100(r16)
   44920:	8000038d 	sth	zero,14(r16)
   44924:	80000415 	stw	zero,16(r16)
   44928:	80000515 	stw	zero,20(r16)
   4492c:	80000615 	stw	zero,24(r16)
   44930:	00453bc0 	call	453bc <memset>
   44934:	05800134 	movhi	r22,4
   44938:	94400217 	ldw	r17,8(r18)
   4493c:	05400134 	movhi	r21,4
   44940:	05000134 	movhi	r20,4
   44944:	04c00134 	movhi	r19,4
   44948:	b5953904 	addi	r22,r22,21732
   4494c:	ad555004 	addi	r21,r21,21824
   44950:	a5156f04 	addi	r20,r20,21948
   44954:	9cd58604 	addi	r19,r19,22040
   44958:	85800815 	stw	r22,32(r16)
   4495c:	85400915 	stw	r21,36(r16)
   44960:	85000a15 	stw	r20,40(r16)
   44964:	84c00b15 	stw	r19,44(r16)
   44968:	84000715 	stw	r16,28(r16)
   4496c:	00800284 	movi	r2,10
   44970:	8880030d 	sth	r2,12(r17)
   44974:	00800044 	movi	r2,1
   44978:	b80d883a 	mov	r6,r23
   4497c:	89001704 	addi	r4,r17,92
   44980:	000b883a 	mov	r5,zero
   44984:	88000015 	stw	zero,0(r17)
   44988:	88000115 	stw	zero,4(r17)
   4498c:	88000215 	stw	zero,8(r17)
   44990:	88001915 	stw	zero,100(r17)
   44994:	8880038d 	sth	r2,14(r17)
   44998:	88000415 	stw	zero,16(r17)
   4499c:	88000515 	stw	zero,20(r17)
   449a0:	88000615 	stw	zero,24(r17)
   449a4:	00453bc0 	call	453bc <memset>
   449a8:	94000317 	ldw	r16,12(r18)
   449ac:	00800484 	movi	r2,18
   449b0:	8c400715 	stw	r17,28(r17)
   449b4:	8d800815 	stw	r22,32(r17)
   449b8:	8d400915 	stw	r21,36(r17)
   449bc:	8d000a15 	stw	r20,40(r17)
   449c0:	8cc00b15 	stw	r19,44(r17)
   449c4:	8080030d 	sth	r2,12(r16)
   449c8:	00800084 	movi	r2,2
   449cc:	80000015 	stw	zero,0(r16)
   449d0:	80000115 	stw	zero,4(r16)
   449d4:	80000215 	stw	zero,8(r16)
   449d8:	80001915 	stw	zero,100(r16)
   449dc:	8080038d 	sth	r2,14(r16)
   449e0:	80000415 	stw	zero,16(r16)
   449e4:	80000515 	stw	zero,20(r16)
   449e8:	80000615 	stw	zero,24(r16)
   449ec:	b80d883a 	mov	r6,r23
   449f0:	000b883a 	mov	r5,zero
   449f4:	81001704 	addi	r4,r16,92
   449f8:	00453bc0 	call	453bc <memset>
   449fc:	00800044 	movi	r2,1
   44a00:	84000715 	stw	r16,28(r16)
   44a04:	85800815 	stw	r22,32(r16)
   44a08:	85400915 	stw	r21,36(r16)
   44a0c:	85000a15 	stw	r20,40(r16)
   44a10:	84c00b15 	stw	r19,44(r16)
   44a14:	90800e15 	stw	r2,56(r18)
   44a18:	dfc00817 	ldw	ra,32(sp)
   44a1c:	ddc00717 	ldw	r23,28(sp)
   44a20:	dd800617 	ldw	r22,24(sp)
   44a24:	dd400517 	ldw	r21,20(sp)
   44a28:	dd000417 	ldw	r20,16(sp)
   44a2c:	dcc00317 	ldw	r19,12(sp)
   44a30:	dc800217 	ldw	r18,8(sp)
   44a34:	dc400117 	ldw	r17,4(sp)
   44a38:	dc000017 	ldw	r16,0(sp)
   44a3c:	dec00904 	addi	sp,sp,36
   44a40:	f800283a 	ret

00044a44 <__fp_lock>:
   44a44:	0005883a 	mov	r2,zero
   44a48:	f800283a 	ret

00044a4c <__sfmoreglue>:
   44a4c:	defffc04 	addi	sp,sp,-16
   44a50:	dc800215 	stw	r18,8(sp)
   44a54:	2825883a 	mov	r18,r5
   44a58:	dc000015 	stw	r16,0(sp)
   44a5c:	01401a04 	movi	r5,104
   44a60:	2021883a 	mov	r16,r4
   44a64:	913fffc4 	addi	r4,r18,-1
   44a68:	dfc00315 	stw	ra,12(sp)
   44a6c:	dc400115 	stw	r17,4(sp)
   44a70:	00407a00 	call	407a0 <__mulsi3>
   44a74:	8009883a 	mov	r4,r16
   44a78:	11401d04 	addi	r5,r2,116
   44a7c:	1023883a 	mov	r17,r2
   44a80:	0042fa00 	call	42fa0 <_malloc_r>
   44a84:	1021883a 	mov	r16,r2
   44a88:	10000726 	beq	r2,zero,44aa8 <__sfmoreglue+0x5c>
   44a8c:	11000304 	addi	r4,r2,12
   44a90:	10000015 	stw	zero,0(r2)
   44a94:	14800115 	stw	r18,4(r2)
   44a98:	11000215 	stw	r4,8(r2)
   44a9c:	89801a04 	addi	r6,r17,104
   44aa0:	000b883a 	mov	r5,zero
   44aa4:	00453bc0 	call	453bc <memset>
   44aa8:	8005883a 	mov	r2,r16
   44aac:	dfc00317 	ldw	ra,12(sp)
   44ab0:	dc800217 	ldw	r18,8(sp)
   44ab4:	dc400117 	ldw	r17,4(sp)
   44ab8:	dc000017 	ldw	r16,0(sp)
   44abc:	dec00404 	addi	sp,sp,16
   44ac0:	f800283a 	ret

00044ac4 <__sfp>:
   44ac4:	defffb04 	addi	sp,sp,-20
   44ac8:	dc000015 	stw	r16,0(sp)
   44acc:	04020034 	movhi	r16,2048
   44ad0:	8406ff04 	addi	r16,r16,7164
   44ad4:	dcc00315 	stw	r19,12(sp)
   44ad8:	2027883a 	mov	r19,r4
   44adc:	81000017 	ldw	r4,0(r16)
   44ae0:	dfc00415 	stw	ra,16(sp)
   44ae4:	dc800215 	stw	r18,8(sp)
   44ae8:	20800e17 	ldw	r2,56(r4)
   44aec:	dc400115 	stw	r17,4(sp)
   44af0:	1000021e 	bne	r2,zero,44afc <__sfp+0x38>
   44af4:	00448a80 	call	448a8 <__sinit.part.1>
   44af8:	81000017 	ldw	r4,0(r16)
   44afc:	2480b804 	addi	r18,r4,736
   44b00:	047fffc4 	movi	r17,-1
   44b04:	91000117 	ldw	r4,4(r18)
   44b08:	94000217 	ldw	r16,8(r18)
   44b0c:	213fffc4 	addi	r4,r4,-1
   44b10:	20000a16 	blt	r4,zero,44b3c <__sfp+0x78>
   44b14:	8080030f 	ldh	r2,12(r16)
   44b18:	10000c26 	beq	r2,zero,44b4c <__sfp+0x88>
   44b1c:	80c01d04 	addi	r3,r16,116
   44b20:	00000206 	br	44b2c <__sfp+0x68>
   44b24:	18bfe60f 	ldh	r2,-104(r3)
   44b28:	10000826 	beq	r2,zero,44b4c <__sfp+0x88>
   44b2c:	213fffc4 	addi	r4,r4,-1
   44b30:	1c3ffd04 	addi	r16,r3,-12
   44b34:	18c01a04 	addi	r3,r3,104
   44b38:	247ffa1e 	bne	r4,r17,44b24 <__alt_data_end+0xf4044b24>
   44b3c:	90800017 	ldw	r2,0(r18)
   44b40:	10001d26 	beq	r2,zero,44bb8 <__sfp+0xf4>
   44b44:	1025883a 	mov	r18,r2
   44b48:	003fee06 	br	44b04 <__alt_data_end+0xf4044b04>
   44b4c:	00bfffc4 	movi	r2,-1
   44b50:	8080038d 	sth	r2,14(r16)
   44b54:	00800044 	movi	r2,1
   44b58:	8080030d 	sth	r2,12(r16)
   44b5c:	80001915 	stw	zero,100(r16)
   44b60:	80000015 	stw	zero,0(r16)
   44b64:	80000215 	stw	zero,8(r16)
   44b68:	80000115 	stw	zero,4(r16)
   44b6c:	80000415 	stw	zero,16(r16)
   44b70:	80000515 	stw	zero,20(r16)
   44b74:	80000615 	stw	zero,24(r16)
   44b78:	01800204 	movi	r6,8
   44b7c:	000b883a 	mov	r5,zero
   44b80:	81001704 	addi	r4,r16,92
   44b84:	00453bc0 	call	453bc <memset>
   44b88:	8005883a 	mov	r2,r16
   44b8c:	80000c15 	stw	zero,48(r16)
   44b90:	80000d15 	stw	zero,52(r16)
   44b94:	80001115 	stw	zero,68(r16)
   44b98:	80001215 	stw	zero,72(r16)
   44b9c:	dfc00417 	ldw	ra,16(sp)
   44ba0:	dcc00317 	ldw	r19,12(sp)
   44ba4:	dc800217 	ldw	r18,8(sp)
   44ba8:	dc400117 	ldw	r17,4(sp)
   44bac:	dc000017 	ldw	r16,0(sp)
   44bb0:	dec00504 	addi	sp,sp,20
   44bb4:	f800283a 	ret
   44bb8:	01400104 	movi	r5,4
   44bbc:	9809883a 	mov	r4,r19
   44bc0:	0044a4c0 	call	44a4c <__sfmoreglue>
   44bc4:	90800015 	stw	r2,0(r18)
   44bc8:	103fde1e 	bne	r2,zero,44b44 <__alt_data_end+0xf4044b44>
   44bcc:	00800304 	movi	r2,12
   44bd0:	98800015 	stw	r2,0(r19)
   44bd4:	0005883a 	mov	r2,zero
   44bd8:	003ff006 	br	44b9c <__alt_data_end+0xf4044b9c>

00044bdc <_cleanup>:
   44bdc:	00820034 	movhi	r2,2048
   44be0:	1086ff04 	addi	r2,r2,7164
   44be4:	11000017 	ldw	r4,0(r2)
   44be8:	01400134 	movhi	r5,4
   44bec:	2955b504 	addi	r5,r5,22228
   44bf0:	004513c1 	jmpi	4513c <_fwalk_reent>

00044bf4 <__sinit>:
   44bf4:	20800e17 	ldw	r2,56(r4)
   44bf8:	10000126 	beq	r2,zero,44c00 <__sinit+0xc>
   44bfc:	f800283a 	ret
   44c00:	00448a81 	jmpi	448a8 <__sinit.part.1>

00044c04 <__sfp_lock_acquire>:
   44c04:	f800283a 	ret

00044c08 <__sfp_lock_release>:
   44c08:	f800283a 	ret

00044c0c <__sinit_lock_acquire>:
   44c0c:	f800283a 	ret

00044c10 <__sinit_lock_release>:
   44c10:	f800283a 	ret

00044c14 <__fp_lock_all>:
   44c14:	00820034 	movhi	r2,2048
   44c18:	10870004 	addi	r2,r2,7168
   44c1c:	11000017 	ldw	r4,0(r2)
   44c20:	01400134 	movhi	r5,4
   44c24:	29529104 	addi	r5,r5,19012
   44c28:	00450781 	jmpi	45078 <_fwalk>

00044c2c <__fp_unlock_all>:
   44c2c:	00820034 	movhi	r2,2048
   44c30:	10870004 	addi	r2,r2,7168
   44c34:	11000017 	ldw	r4,0(r2)
   44c38:	01400134 	movhi	r5,4
   44c3c:	29522504 	addi	r5,r5,18580
   44c40:	00450781 	jmpi	45078 <_fwalk>

00044c44 <_malloc_trim_r>:
   44c44:	defffb04 	addi	sp,sp,-20
   44c48:	dcc00315 	stw	r19,12(sp)
   44c4c:	04c20034 	movhi	r19,2048
   44c50:	dc800215 	stw	r18,8(sp)
   44c54:	dc400115 	stw	r17,4(sp)
   44c58:	dc000015 	stw	r16,0(sp)
   44c5c:	dfc00415 	stw	ra,16(sp)
   44c60:	2821883a 	mov	r16,r5
   44c64:	9cc5f404 	addi	r19,r19,6096
   44c68:	2025883a 	mov	r18,r4
   44c6c:	0045c700 	call	45c70 <__malloc_lock>
   44c70:	98800217 	ldw	r2,8(r19)
   44c74:	14400117 	ldw	r17,4(r2)
   44c78:	00bfff04 	movi	r2,-4
   44c7c:	88a2703a 	and	r17,r17,r2
   44c80:	8c21c83a 	sub	r16,r17,r16
   44c84:	8403fbc4 	addi	r16,r16,4079
   44c88:	8020d33a 	srli	r16,r16,12
   44c8c:	0083ffc4 	movi	r2,4095
   44c90:	843fffc4 	addi	r16,r16,-1
   44c94:	8020933a 	slli	r16,r16,12
   44c98:	1400060e 	bge	r2,r16,44cb4 <_malloc_trim_r+0x70>
   44c9c:	000b883a 	mov	r5,zero
   44ca0:	9009883a 	mov	r4,r18
   44ca4:	00441140 	call	44114 <_sbrk_r>
   44ca8:	98c00217 	ldw	r3,8(r19)
   44cac:	1c47883a 	add	r3,r3,r17
   44cb0:	10c00a26 	beq	r2,r3,44cdc <_malloc_trim_r+0x98>
   44cb4:	9009883a 	mov	r4,r18
   44cb8:	0045c940 	call	45c94 <__malloc_unlock>
   44cbc:	0005883a 	mov	r2,zero
   44cc0:	dfc00417 	ldw	ra,16(sp)
   44cc4:	dcc00317 	ldw	r19,12(sp)
   44cc8:	dc800217 	ldw	r18,8(sp)
   44ccc:	dc400117 	ldw	r17,4(sp)
   44cd0:	dc000017 	ldw	r16,0(sp)
   44cd4:	dec00504 	addi	sp,sp,20
   44cd8:	f800283a 	ret
   44cdc:	040bc83a 	sub	r5,zero,r16
   44ce0:	9009883a 	mov	r4,r18
   44ce4:	00441140 	call	44114 <_sbrk_r>
   44ce8:	00ffffc4 	movi	r3,-1
   44cec:	10c00d26 	beq	r2,r3,44d24 <_malloc_trim_r+0xe0>
   44cf0:	00c20034 	movhi	r3,2048
   44cf4:	18c70f04 	addi	r3,r3,7228
   44cf8:	18800017 	ldw	r2,0(r3)
   44cfc:	99000217 	ldw	r4,8(r19)
   44d00:	8c23c83a 	sub	r17,r17,r16
   44d04:	8c400054 	ori	r17,r17,1
   44d08:	1421c83a 	sub	r16,r2,r16
   44d0c:	24400115 	stw	r17,4(r4)
   44d10:	9009883a 	mov	r4,r18
   44d14:	1c000015 	stw	r16,0(r3)
   44d18:	0045c940 	call	45c94 <__malloc_unlock>
   44d1c:	00800044 	movi	r2,1
   44d20:	003fe706 	br	44cc0 <__alt_data_end+0xf4044cc0>
   44d24:	000b883a 	mov	r5,zero
   44d28:	9009883a 	mov	r4,r18
   44d2c:	00441140 	call	44114 <_sbrk_r>
   44d30:	99000217 	ldw	r4,8(r19)
   44d34:	014003c4 	movi	r5,15
   44d38:	1107c83a 	sub	r3,r2,r4
   44d3c:	28ffdd0e 	bge	r5,r3,44cb4 <__alt_data_end+0xf4044cb4>
   44d40:	01420034 	movhi	r5,2048
   44d44:	29470104 	addi	r5,r5,7172
   44d48:	29400017 	ldw	r5,0(r5)
   44d4c:	18c00054 	ori	r3,r3,1
   44d50:	20c00115 	stw	r3,4(r4)
   44d54:	00c20034 	movhi	r3,2048
   44d58:	1145c83a 	sub	r2,r2,r5
   44d5c:	18c70f04 	addi	r3,r3,7228
   44d60:	18800015 	stw	r2,0(r3)
   44d64:	003fd306 	br	44cb4 <__alt_data_end+0xf4044cb4>

00044d68 <_free_r>:
   44d68:	28004126 	beq	r5,zero,44e70 <_free_r+0x108>
   44d6c:	defffd04 	addi	sp,sp,-12
   44d70:	dc400115 	stw	r17,4(sp)
   44d74:	dc000015 	stw	r16,0(sp)
   44d78:	2023883a 	mov	r17,r4
   44d7c:	2821883a 	mov	r16,r5
   44d80:	dfc00215 	stw	ra,8(sp)
   44d84:	0045c700 	call	45c70 <__malloc_lock>
   44d88:	81ffff17 	ldw	r7,-4(r16)
   44d8c:	00bfff84 	movi	r2,-2
   44d90:	01020034 	movhi	r4,2048
   44d94:	81bffe04 	addi	r6,r16,-8
   44d98:	3884703a 	and	r2,r7,r2
   44d9c:	2105f404 	addi	r4,r4,6096
   44da0:	308b883a 	add	r5,r6,r2
   44da4:	2a400117 	ldw	r9,4(r5)
   44da8:	22000217 	ldw	r8,8(r4)
   44dac:	00ffff04 	movi	r3,-4
   44db0:	48c6703a 	and	r3,r9,r3
   44db4:	2a005726 	beq	r5,r8,44f14 <_free_r+0x1ac>
   44db8:	28c00115 	stw	r3,4(r5)
   44dbc:	39c0004c 	andi	r7,r7,1
   44dc0:	3800091e 	bne	r7,zero,44de8 <_free_r+0x80>
   44dc4:	823ffe17 	ldw	r8,-8(r16)
   44dc8:	22400204 	addi	r9,r4,8
   44dcc:	320dc83a 	sub	r6,r6,r8
   44dd0:	31c00217 	ldw	r7,8(r6)
   44dd4:	1205883a 	add	r2,r2,r8
   44dd8:	3a406526 	beq	r7,r9,44f70 <_free_r+0x208>
   44ddc:	32000317 	ldw	r8,12(r6)
   44de0:	3a000315 	stw	r8,12(r7)
   44de4:	41c00215 	stw	r7,8(r8)
   44de8:	28cf883a 	add	r7,r5,r3
   44dec:	39c00117 	ldw	r7,4(r7)
   44df0:	39c0004c 	andi	r7,r7,1
   44df4:	38003a26 	beq	r7,zero,44ee0 <_free_r+0x178>
   44df8:	10c00054 	ori	r3,r2,1
   44dfc:	30c00115 	stw	r3,4(r6)
   44e00:	3087883a 	add	r3,r6,r2
   44e04:	18800015 	stw	r2,0(r3)
   44e08:	00c07fc4 	movi	r3,511
   44e0c:	18801936 	bltu	r3,r2,44e74 <_free_r+0x10c>
   44e10:	1004d0fa 	srli	r2,r2,3
   44e14:	01c00044 	movi	r7,1
   44e18:	21400117 	ldw	r5,4(r4)
   44e1c:	10c00044 	addi	r3,r2,1
   44e20:	18c7883a 	add	r3,r3,r3
   44e24:	1005d0ba 	srai	r2,r2,2
   44e28:	18c7883a 	add	r3,r3,r3
   44e2c:	18c7883a 	add	r3,r3,r3
   44e30:	1907883a 	add	r3,r3,r4
   44e34:	3884983a 	sll	r2,r7,r2
   44e38:	19c00017 	ldw	r7,0(r3)
   44e3c:	1a3ffe04 	addi	r8,r3,-8
   44e40:	1144b03a 	or	r2,r2,r5
   44e44:	32000315 	stw	r8,12(r6)
   44e48:	31c00215 	stw	r7,8(r6)
   44e4c:	20800115 	stw	r2,4(r4)
   44e50:	19800015 	stw	r6,0(r3)
   44e54:	39800315 	stw	r6,12(r7)
   44e58:	8809883a 	mov	r4,r17
   44e5c:	dfc00217 	ldw	ra,8(sp)
   44e60:	dc400117 	ldw	r17,4(sp)
   44e64:	dc000017 	ldw	r16,0(sp)
   44e68:	dec00304 	addi	sp,sp,12
   44e6c:	0045c941 	jmpi	45c94 <__malloc_unlock>
   44e70:	f800283a 	ret
   44e74:	100ad27a 	srli	r5,r2,9
   44e78:	00c00104 	movi	r3,4
   44e7c:	19404a36 	bltu	r3,r5,44fa8 <_free_r+0x240>
   44e80:	100ad1ba 	srli	r5,r2,6
   44e84:	28c00e44 	addi	r3,r5,57
   44e88:	18c7883a 	add	r3,r3,r3
   44e8c:	29400e04 	addi	r5,r5,56
   44e90:	18c7883a 	add	r3,r3,r3
   44e94:	18c7883a 	add	r3,r3,r3
   44e98:	1909883a 	add	r4,r3,r4
   44e9c:	20c00017 	ldw	r3,0(r4)
   44ea0:	01c20034 	movhi	r7,2048
   44ea4:	213ffe04 	addi	r4,r4,-8
   44ea8:	39c5f404 	addi	r7,r7,6096
   44eac:	20c04426 	beq	r4,r3,44fc0 <_free_r+0x258>
   44eb0:	01ffff04 	movi	r7,-4
   44eb4:	19400117 	ldw	r5,4(r3)
   44eb8:	29ca703a 	and	r5,r5,r7
   44ebc:	1140022e 	bgeu	r2,r5,44ec8 <_free_r+0x160>
   44ec0:	18c00217 	ldw	r3,8(r3)
   44ec4:	20fffb1e 	bne	r4,r3,44eb4 <__alt_data_end+0xf4044eb4>
   44ec8:	19000317 	ldw	r4,12(r3)
   44ecc:	31000315 	stw	r4,12(r6)
   44ed0:	30c00215 	stw	r3,8(r6)
   44ed4:	21800215 	stw	r6,8(r4)
   44ed8:	19800315 	stw	r6,12(r3)
   44edc:	003fde06 	br	44e58 <__alt_data_end+0xf4044e58>
   44ee0:	29c00217 	ldw	r7,8(r5)
   44ee4:	10c5883a 	add	r2,r2,r3
   44ee8:	00c20034 	movhi	r3,2048
   44eec:	18c5f604 	addi	r3,r3,6104
   44ef0:	38c03b26 	beq	r7,r3,44fe0 <_free_r+0x278>
   44ef4:	2a000317 	ldw	r8,12(r5)
   44ef8:	11400054 	ori	r5,r2,1
   44efc:	3087883a 	add	r3,r6,r2
   44f00:	3a000315 	stw	r8,12(r7)
   44f04:	41c00215 	stw	r7,8(r8)
   44f08:	31400115 	stw	r5,4(r6)
   44f0c:	18800015 	stw	r2,0(r3)
   44f10:	003fbd06 	br	44e08 <__alt_data_end+0xf4044e08>
   44f14:	39c0004c 	andi	r7,r7,1
   44f18:	10c5883a 	add	r2,r2,r3
   44f1c:	3800071e 	bne	r7,zero,44f3c <_free_r+0x1d4>
   44f20:	81fffe17 	ldw	r7,-8(r16)
   44f24:	31cdc83a 	sub	r6,r6,r7
   44f28:	30c00317 	ldw	r3,12(r6)
   44f2c:	31400217 	ldw	r5,8(r6)
   44f30:	11c5883a 	add	r2,r2,r7
   44f34:	28c00315 	stw	r3,12(r5)
   44f38:	19400215 	stw	r5,8(r3)
   44f3c:	10c00054 	ori	r3,r2,1
   44f40:	30c00115 	stw	r3,4(r6)
   44f44:	00c20034 	movhi	r3,2048
   44f48:	18c70204 	addi	r3,r3,7176
   44f4c:	18c00017 	ldw	r3,0(r3)
   44f50:	21800215 	stw	r6,8(r4)
   44f54:	10ffc036 	bltu	r2,r3,44e58 <__alt_data_end+0xf4044e58>
   44f58:	00820034 	movhi	r2,2048
   44f5c:	10870e04 	addi	r2,r2,7224
   44f60:	11400017 	ldw	r5,0(r2)
   44f64:	8809883a 	mov	r4,r17
   44f68:	0044c440 	call	44c44 <_malloc_trim_r>
   44f6c:	003fba06 	br	44e58 <__alt_data_end+0xf4044e58>
   44f70:	28c9883a 	add	r4,r5,r3
   44f74:	21000117 	ldw	r4,4(r4)
   44f78:	2100004c 	andi	r4,r4,1
   44f7c:	2000391e 	bne	r4,zero,45064 <_free_r+0x2fc>
   44f80:	29c00217 	ldw	r7,8(r5)
   44f84:	29000317 	ldw	r4,12(r5)
   44f88:	1885883a 	add	r2,r3,r2
   44f8c:	10c00054 	ori	r3,r2,1
   44f90:	39000315 	stw	r4,12(r7)
   44f94:	21c00215 	stw	r7,8(r4)
   44f98:	30c00115 	stw	r3,4(r6)
   44f9c:	308d883a 	add	r6,r6,r2
   44fa0:	30800015 	stw	r2,0(r6)
   44fa4:	003fac06 	br	44e58 <__alt_data_end+0xf4044e58>
   44fa8:	00c00504 	movi	r3,20
   44fac:	19401536 	bltu	r3,r5,45004 <_free_r+0x29c>
   44fb0:	28c01704 	addi	r3,r5,92
   44fb4:	18c7883a 	add	r3,r3,r3
   44fb8:	294016c4 	addi	r5,r5,91
   44fbc:	003fb406 	br	44e90 <__alt_data_end+0xf4044e90>
   44fc0:	280bd0ba 	srai	r5,r5,2
   44fc4:	00c00044 	movi	r3,1
   44fc8:	38800117 	ldw	r2,4(r7)
   44fcc:	194a983a 	sll	r5,r3,r5
   44fd0:	2007883a 	mov	r3,r4
   44fd4:	2884b03a 	or	r2,r5,r2
   44fd8:	38800115 	stw	r2,4(r7)
   44fdc:	003fbb06 	br	44ecc <__alt_data_end+0xf4044ecc>
   44fe0:	21800515 	stw	r6,20(r4)
   44fe4:	21800415 	stw	r6,16(r4)
   44fe8:	10c00054 	ori	r3,r2,1
   44fec:	31c00315 	stw	r7,12(r6)
   44ff0:	31c00215 	stw	r7,8(r6)
   44ff4:	30c00115 	stw	r3,4(r6)
   44ff8:	308d883a 	add	r6,r6,r2
   44ffc:	30800015 	stw	r2,0(r6)
   45000:	003f9506 	br	44e58 <__alt_data_end+0xf4044e58>
   45004:	00c01504 	movi	r3,84
   45008:	19400536 	bltu	r3,r5,45020 <_free_r+0x2b8>
   4500c:	100ad33a 	srli	r5,r2,12
   45010:	28c01bc4 	addi	r3,r5,111
   45014:	18c7883a 	add	r3,r3,r3
   45018:	29401b84 	addi	r5,r5,110
   4501c:	003f9c06 	br	44e90 <__alt_data_end+0xf4044e90>
   45020:	00c05504 	movi	r3,340
   45024:	19400536 	bltu	r3,r5,4503c <_free_r+0x2d4>
   45028:	100ad3fa 	srli	r5,r2,15
   4502c:	28c01e04 	addi	r3,r5,120
   45030:	18c7883a 	add	r3,r3,r3
   45034:	29401dc4 	addi	r5,r5,119
   45038:	003f9506 	br	44e90 <__alt_data_end+0xf4044e90>
   4503c:	00c15504 	movi	r3,1364
   45040:	19400536 	bltu	r3,r5,45058 <_free_r+0x2f0>
   45044:	100ad4ba 	srli	r5,r2,18
   45048:	28c01f44 	addi	r3,r5,125
   4504c:	18c7883a 	add	r3,r3,r3
   45050:	29401f04 	addi	r5,r5,124
   45054:	003f8e06 	br	44e90 <__alt_data_end+0xf4044e90>
   45058:	00c03f84 	movi	r3,254
   4505c:	01401f84 	movi	r5,126
   45060:	003f8b06 	br	44e90 <__alt_data_end+0xf4044e90>
   45064:	10c00054 	ori	r3,r2,1
   45068:	30c00115 	stw	r3,4(r6)
   4506c:	308d883a 	add	r6,r6,r2
   45070:	30800015 	stw	r2,0(r6)
   45074:	003f7806 	br	44e58 <__alt_data_end+0xf4044e58>

00045078 <_fwalk>:
   45078:	defff704 	addi	sp,sp,-36
   4507c:	dd000415 	stw	r20,16(sp)
   45080:	dfc00815 	stw	ra,32(sp)
   45084:	ddc00715 	stw	r23,28(sp)
   45088:	dd800615 	stw	r22,24(sp)
   4508c:	dd400515 	stw	r21,20(sp)
   45090:	dcc00315 	stw	r19,12(sp)
   45094:	dc800215 	stw	r18,8(sp)
   45098:	dc400115 	stw	r17,4(sp)
   4509c:	dc000015 	stw	r16,0(sp)
   450a0:	2500b804 	addi	r20,r4,736
   450a4:	a0002326 	beq	r20,zero,45134 <_fwalk+0xbc>
   450a8:	282b883a 	mov	r21,r5
   450ac:	002f883a 	mov	r23,zero
   450b0:	05800044 	movi	r22,1
   450b4:	04ffffc4 	movi	r19,-1
   450b8:	a4400117 	ldw	r17,4(r20)
   450bc:	a4800217 	ldw	r18,8(r20)
   450c0:	8c7fffc4 	addi	r17,r17,-1
   450c4:	88000d16 	blt	r17,zero,450fc <_fwalk+0x84>
   450c8:	94000304 	addi	r16,r18,12
   450cc:	94800384 	addi	r18,r18,14
   450d0:	8080000b 	ldhu	r2,0(r16)
   450d4:	8c7fffc4 	addi	r17,r17,-1
   450d8:	813ffd04 	addi	r4,r16,-12
   450dc:	b080042e 	bgeu	r22,r2,450f0 <_fwalk+0x78>
   450e0:	9080000f 	ldh	r2,0(r18)
   450e4:	14c00226 	beq	r2,r19,450f0 <_fwalk+0x78>
   450e8:	a83ee83a 	callr	r21
   450ec:	b8aeb03a 	or	r23,r23,r2
   450f0:	84001a04 	addi	r16,r16,104
   450f4:	94801a04 	addi	r18,r18,104
   450f8:	8cfff51e 	bne	r17,r19,450d0 <__alt_data_end+0xf40450d0>
   450fc:	a5000017 	ldw	r20,0(r20)
   45100:	a03fed1e 	bne	r20,zero,450b8 <__alt_data_end+0xf40450b8>
   45104:	b805883a 	mov	r2,r23
   45108:	dfc00817 	ldw	ra,32(sp)
   4510c:	ddc00717 	ldw	r23,28(sp)
   45110:	dd800617 	ldw	r22,24(sp)
   45114:	dd400517 	ldw	r21,20(sp)
   45118:	dd000417 	ldw	r20,16(sp)
   4511c:	dcc00317 	ldw	r19,12(sp)
   45120:	dc800217 	ldw	r18,8(sp)
   45124:	dc400117 	ldw	r17,4(sp)
   45128:	dc000017 	ldw	r16,0(sp)
   4512c:	dec00904 	addi	sp,sp,36
   45130:	f800283a 	ret
   45134:	002f883a 	mov	r23,zero
   45138:	003ff206 	br	45104 <__alt_data_end+0xf4045104>

0004513c <_fwalk_reent>:
   4513c:	defff704 	addi	sp,sp,-36
   45140:	dd000415 	stw	r20,16(sp)
   45144:	dfc00815 	stw	ra,32(sp)
   45148:	ddc00715 	stw	r23,28(sp)
   4514c:	dd800615 	stw	r22,24(sp)
   45150:	dd400515 	stw	r21,20(sp)
   45154:	dcc00315 	stw	r19,12(sp)
   45158:	dc800215 	stw	r18,8(sp)
   4515c:	dc400115 	stw	r17,4(sp)
   45160:	dc000015 	stw	r16,0(sp)
   45164:	2500b804 	addi	r20,r4,736
   45168:	a0002326 	beq	r20,zero,451f8 <_fwalk_reent+0xbc>
   4516c:	282b883a 	mov	r21,r5
   45170:	2027883a 	mov	r19,r4
   45174:	002f883a 	mov	r23,zero
   45178:	05800044 	movi	r22,1
   4517c:	04bfffc4 	movi	r18,-1
   45180:	a4400117 	ldw	r17,4(r20)
   45184:	a4000217 	ldw	r16,8(r20)
   45188:	8c7fffc4 	addi	r17,r17,-1
   4518c:	88000c16 	blt	r17,zero,451c0 <_fwalk_reent+0x84>
   45190:	84000304 	addi	r16,r16,12
   45194:	8080000b 	ldhu	r2,0(r16)
   45198:	8c7fffc4 	addi	r17,r17,-1
   4519c:	817ffd04 	addi	r5,r16,-12
   451a0:	b080052e 	bgeu	r22,r2,451b8 <_fwalk_reent+0x7c>
   451a4:	8080008f 	ldh	r2,2(r16)
   451a8:	9809883a 	mov	r4,r19
   451ac:	14800226 	beq	r2,r18,451b8 <_fwalk_reent+0x7c>
   451b0:	a83ee83a 	callr	r21
   451b4:	b8aeb03a 	or	r23,r23,r2
   451b8:	84001a04 	addi	r16,r16,104
   451bc:	8cbff51e 	bne	r17,r18,45194 <__alt_data_end+0xf4045194>
   451c0:	a5000017 	ldw	r20,0(r20)
   451c4:	a03fee1e 	bne	r20,zero,45180 <__alt_data_end+0xf4045180>
   451c8:	b805883a 	mov	r2,r23
   451cc:	dfc00817 	ldw	ra,32(sp)
   451d0:	ddc00717 	ldw	r23,28(sp)
   451d4:	dd800617 	ldw	r22,24(sp)
   451d8:	dd400517 	ldw	r21,20(sp)
   451dc:	dd000417 	ldw	r20,16(sp)
   451e0:	dcc00317 	ldw	r19,12(sp)
   451e4:	dc800217 	ldw	r18,8(sp)
   451e8:	dc400117 	ldw	r17,4(sp)
   451ec:	dc000017 	ldw	r16,0(sp)
   451f0:	dec00904 	addi	sp,sp,36
   451f4:	f800283a 	ret
   451f8:	002f883a 	mov	r23,zero
   451fc:	003ff206 	br	451c8 <__alt_data_end+0xf40451c8>

00045200 <__smakebuf_r>:
   45200:	2880030b 	ldhu	r2,12(r5)
   45204:	10c0008c 	andi	r3,r2,2
   45208:	1800411e 	bne	r3,zero,45310 <__smakebuf_r+0x110>
   4520c:	deffec04 	addi	sp,sp,-80
   45210:	dc000f15 	stw	r16,60(sp)
   45214:	2821883a 	mov	r16,r5
   45218:	2940038f 	ldh	r5,14(r5)
   4521c:	dc401015 	stw	r17,64(sp)
   45220:	dfc01315 	stw	ra,76(sp)
   45224:	dcc01215 	stw	r19,72(sp)
   45228:	dc801115 	stw	r18,68(sp)
   4522c:	2023883a 	mov	r17,r4
   45230:	28001c16 	blt	r5,zero,452a4 <__smakebuf_r+0xa4>
   45234:	d80d883a 	mov	r6,sp
   45238:	00457d80 	call	457d8 <_fstat_r>
   4523c:	10001816 	blt	r2,zero,452a0 <__smakebuf_r+0xa0>
   45240:	d8800117 	ldw	r2,4(sp)
   45244:	00e00014 	movui	r3,32768
   45248:	10bc000c 	andi	r2,r2,61440
   4524c:	14c80020 	cmpeqi	r19,r2,8192
   45250:	10c03726 	beq	r2,r3,45330 <__smakebuf_r+0x130>
   45254:	80c0030b 	ldhu	r3,12(r16)
   45258:	18c20014 	ori	r3,r3,2048
   4525c:	80c0030d 	sth	r3,12(r16)
   45260:	00c80004 	movi	r3,8192
   45264:	10c0521e 	bne	r2,r3,453b0 <__smakebuf_r+0x1b0>
   45268:	8140038f 	ldh	r5,14(r16)
   4526c:	8809883a 	mov	r4,r17
   45270:	00458340 	call	45834 <_isatty_r>
   45274:	10004c26 	beq	r2,zero,453a8 <__smakebuf_r+0x1a8>
   45278:	8080030b 	ldhu	r2,12(r16)
   4527c:	80c010c4 	addi	r3,r16,67
   45280:	80c00015 	stw	r3,0(r16)
   45284:	10800054 	ori	r2,r2,1
   45288:	8080030d 	sth	r2,12(r16)
   4528c:	00800044 	movi	r2,1
   45290:	80c00415 	stw	r3,16(r16)
   45294:	80800515 	stw	r2,20(r16)
   45298:	04810004 	movi	r18,1024
   4529c:	00000706 	br	452bc <__smakebuf_r+0xbc>
   452a0:	8080030b 	ldhu	r2,12(r16)
   452a4:	10c0200c 	andi	r3,r2,128
   452a8:	18001f1e 	bne	r3,zero,45328 <__smakebuf_r+0x128>
   452ac:	04810004 	movi	r18,1024
   452b0:	10820014 	ori	r2,r2,2048
   452b4:	8080030d 	sth	r2,12(r16)
   452b8:	0027883a 	mov	r19,zero
   452bc:	900b883a 	mov	r5,r18
   452c0:	8809883a 	mov	r4,r17
   452c4:	0042fa00 	call	42fa0 <_malloc_r>
   452c8:	10002c26 	beq	r2,zero,4537c <__smakebuf_r+0x17c>
   452cc:	80c0030b 	ldhu	r3,12(r16)
   452d0:	01000134 	movhi	r4,4
   452d4:	21122704 	addi	r4,r4,18588
   452d8:	89000f15 	stw	r4,60(r17)
   452dc:	18c02014 	ori	r3,r3,128
   452e0:	80c0030d 	sth	r3,12(r16)
   452e4:	80800015 	stw	r2,0(r16)
   452e8:	80800415 	stw	r2,16(r16)
   452ec:	84800515 	stw	r18,20(r16)
   452f0:	98001a1e 	bne	r19,zero,4535c <__smakebuf_r+0x15c>
   452f4:	dfc01317 	ldw	ra,76(sp)
   452f8:	dcc01217 	ldw	r19,72(sp)
   452fc:	dc801117 	ldw	r18,68(sp)
   45300:	dc401017 	ldw	r17,64(sp)
   45304:	dc000f17 	ldw	r16,60(sp)
   45308:	dec01404 	addi	sp,sp,80
   4530c:	f800283a 	ret
   45310:	288010c4 	addi	r2,r5,67
   45314:	28800015 	stw	r2,0(r5)
   45318:	28800415 	stw	r2,16(r5)
   4531c:	00800044 	movi	r2,1
   45320:	28800515 	stw	r2,20(r5)
   45324:	f800283a 	ret
   45328:	04801004 	movi	r18,64
   4532c:	003fe006 	br	452b0 <__alt_data_end+0xf40452b0>
   45330:	81000a17 	ldw	r4,40(r16)
   45334:	00c00134 	movhi	r3,4
   45338:	18d56f04 	addi	r3,r3,21948
   4533c:	20ffc51e 	bne	r4,r3,45254 <__alt_data_end+0xf4045254>
   45340:	8080030b 	ldhu	r2,12(r16)
   45344:	04810004 	movi	r18,1024
   45348:	84801315 	stw	r18,76(r16)
   4534c:	1484b03a 	or	r2,r2,r18
   45350:	8080030d 	sth	r2,12(r16)
   45354:	0027883a 	mov	r19,zero
   45358:	003fd806 	br	452bc <__alt_data_end+0xf40452bc>
   4535c:	8140038f 	ldh	r5,14(r16)
   45360:	8809883a 	mov	r4,r17
   45364:	00458340 	call	45834 <_isatty_r>
   45368:	103fe226 	beq	r2,zero,452f4 <__alt_data_end+0xf40452f4>
   4536c:	8080030b 	ldhu	r2,12(r16)
   45370:	10800054 	ori	r2,r2,1
   45374:	8080030d 	sth	r2,12(r16)
   45378:	003fde06 	br	452f4 <__alt_data_end+0xf40452f4>
   4537c:	8080030b 	ldhu	r2,12(r16)
   45380:	10c0800c 	andi	r3,r2,512
   45384:	183fdb1e 	bne	r3,zero,452f4 <__alt_data_end+0xf40452f4>
   45388:	10800094 	ori	r2,r2,2
   4538c:	80c010c4 	addi	r3,r16,67
   45390:	8080030d 	sth	r2,12(r16)
   45394:	00800044 	movi	r2,1
   45398:	80c00015 	stw	r3,0(r16)
   4539c:	80c00415 	stw	r3,16(r16)
   453a0:	80800515 	stw	r2,20(r16)
   453a4:	003fd306 	br	452f4 <__alt_data_end+0xf40452f4>
   453a8:	04810004 	movi	r18,1024
   453ac:	003fc306 	br	452bc <__alt_data_end+0xf40452bc>
   453b0:	0027883a 	mov	r19,zero
   453b4:	04810004 	movi	r18,1024
   453b8:	003fc006 	br	452bc <__alt_data_end+0xf40452bc>

000453bc <memset>:
   453bc:	20c000cc 	andi	r3,r4,3
   453c0:	2005883a 	mov	r2,r4
   453c4:	18004426 	beq	r3,zero,454d8 <memset+0x11c>
   453c8:	31ffffc4 	addi	r7,r6,-1
   453cc:	30004026 	beq	r6,zero,454d0 <memset+0x114>
   453d0:	2813883a 	mov	r9,r5
   453d4:	200d883a 	mov	r6,r4
   453d8:	2007883a 	mov	r3,r4
   453dc:	00000406 	br	453f0 <memset+0x34>
   453e0:	3a3fffc4 	addi	r8,r7,-1
   453e4:	31800044 	addi	r6,r6,1
   453e8:	38003926 	beq	r7,zero,454d0 <memset+0x114>
   453ec:	400f883a 	mov	r7,r8
   453f0:	18c00044 	addi	r3,r3,1
   453f4:	32400005 	stb	r9,0(r6)
   453f8:	1a0000cc 	andi	r8,r3,3
   453fc:	403ff81e 	bne	r8,zero,453e0 <__alt_data_end+0xf40453e0>
   45400:	010000c4 	movi	r4,3
   45404:	21c02d2e 	bgeu	r4,r7,454bc <memset+0x100>
   45408:	29003fcc 	andi	r4,r5,255
   4540c:	200c923a 	slli	r6,r4,8
   45410:	3108b03a 	or	r4,r6,r4
   45414:	200c943a 	slli	r6,r4,16
   45418:	218cb03a 	or	r6,r4,r6
   4541c:	010003c4 	movi	r4,15
   45420:	21c0182e 	bgeu	r4,r7,45484 <memset+0xc8>
   45424:	3b3ffc04 	addi	r12,r7,-16
   45428:	6018d13a 	srli	r12,r12,4
   4542c:	1a000104 	addi	r8,r3,4
   45430:	1ac00204 	addi	r11,r3,8
   45434:	6008913a 	slli	r4,r12,4
   45438:	1a800304 	addi	r10,r3,12
   4543c:	1813883a 	mov	r9,r3
   45440:	21000504 	addi	r4,r4,20
   45444:	1909883a 	add	r4,r3,r4
   45448:	49800015 	stw	r6,0(r9)
   4544c:	41800015 	stw	r6,0(r8)
   45450:	59800015 	stw	r6,0(r11)
   45454:	51800015 	stw	r6,0(r10)
   45458:	42000404 	addi	r8,r8,16
   4545c:	4a400404 	addi	r9,r9,16
   45460:	5ac00404 	addi	r11,r11,16
   45464:	52800404 	addi	r10,r10,16
   45468:	413ff71e 	bne	r8,r4,45448 <__alt_data_end+0xf4045448>
   4546c:	63000044 	addi	r12,r12,1
   45470:	6018913a 	slli	r12,r12,4
   45474:	39c003cc 	andi	r7,r7,15
   45478:	010000c4 	movi	r4,3
   4547c:	1b07883a 	add	r3,r3,r12
   45480:	21c00e2e 	bgeu	r4,r7,454bc <memset+0x100>
   45484:	1813883a 	mov	r9,r3
   45488:	3811883a 	mov	r8,r7
   4548c:	010000c4 	movi	r4,3
   45490:	49800015 	stw	r6,0(r9)
   45494:	423fff04 	addi	r8,r8,-4
   45498:	4a400104 	addi	r9,r9,4
   4549c:	223ffc36 	bltu	r4,r8,45490 <__alt_data_end+0xf4045490>
   454a0:	393fff04 	addi	r4,r7,-4
   454a4:	2008d0ba 	srli	r4,r4,2
   454a8:	39c000cc 	andi	r7,r7,3
   454ac:	21000044 	addi	r4,r4,1
   454b0:	2109883a 	add	r4,r4,r4
   454b4:	2109883a 	add	r4,r4,r4
   454b8:	1907883a 	add	r3,r3,r4
   454bc:	38000526 	beq	r7,zero,454d4 <memset+0x118>
   454c0:	19cf883a 	add	r7,r3,r7
   454c4:	19400005 	stb	r5,0(r3)
   454c8:	18c00044 	addi	r3,r3,1
   454cc:	38fffd1e 	bne	r7,r3,454c4 <__alt_data_end+0xf40454c4>
   454d0:	f800283a 	ret
   454d4:	f800283a 	ret
   454d8:	2007883a 	mov	r3,r4
   454dc:	300f883a 	mov	r7,r6
   454e0:	003fc706 	br	45400 <__alt_data_end+0xf4045400>

000454e4 <__sread>:
   454e4:	defffe04 	addi	sp,sp,-8
   454e8:	dc000015 	stw	r16,0(sp)
   454ec:	2821883a 	mov	r16,r5
   454f0:	2940038f 	ldh	r5,14(r5)
   454f4:	dfc00115 	stw	ra,4(sp)
   454f8:	00458e80 	call	458e8 <_read_r>
   454fc:	10000716 	blt	r2,zero,4551c <__sread+0x38>
   45500:	80c01417 	ldw	r3,80(r16)
   45504:	1887883a 	add	r3,r3,r2
   45508:	80c01415 	stw	r3,80(r16)
   4550c:	dfc00117 	ldw	ra,4(sp)
   45510:	dc000017 	ldw	r16,0(sp)
   45514:	dec00204 	addi	sp,sp,8
   45518:	f800283a 	ret
   4551c:	80c0030b 	ldhu	r3,12(r16)
   45520:	18fbffcc 	andi	r3,r3,61439
   45524:	80c0030d 	sth	r3,12(r16)
   45528:	dfc00117 	ldw	ra,4(sp)
   4552c:	dc000017 	ldw	r16,0(sp)
   45530:	dec00204 	addi	sp,sp,8
   45534:	f800283a 	ret

00045538 <__seofread>:
   45538:	0005883a 	mov	r2,zero
   4553c:	f800283a 	ret

00045540 <__swrite>:
   45540:	2880030b 	ldhu	r2,12(r5)
   45544:	defffb04 	addi	sp,sp,-20
   45548:	dcc00315 	stw	r19,12(sp)
   4554c:	dc800215 	stw	r18,8(sp)
   45550:	dc400115 	stw	r17,4(sp)
   45554:	dc000015 	stw	r16,0(sp)
   45558:	dfc00415 	stw	ra,16(sp)
   4555c:	10c0400c 	andi	r3,r2,256
   45560:	2821883a 	mov	r16,r5
   45564:	2023883a 	mov	r17,r4
   45568:	3025883a 	mov	r18,r6
   4556c:	3827883a 	mov	r19,r7
   45570:	18000526 	beq	r3,zero,45588 <__swrite+0x48>
   45574:	2940038f 	ldh	r5,14(r5)
   45578:	01c00084 	movi	r7,2
   4557c:	000d883a 	mov	r6,zero
   45580:	00458880 	call	45888 <_lseek_r>
   45584:	8080030b 	ldhu	r2,12(r16)
   45588:	8140038f 	ldh	r5,14(r16)
   4558c:	10bbffcc 	andi	r2,r2,61439
   45590:	980f883a 	mov	r7,r19
   45594:	900d883a 	mov	r6,r18
   45598:	8809883a 	mov	r4,r17
   4559c:	8080030d 	sth	r2,12(r16)
   455a0:	dfc00417 	ldw	ra,16(sp)
   455a4:	dcc00317 	ldw	r19,12(sp)
   455a8:	dc800217 	ldw	r18,8(sp)
   455ac:	dc400117 	ldw	r17,4(sp)
   455b0:	dc000017 	ldw	r16,0(sp)
   455b4:	dec00504 	addi	sp,sp,20
   455b8:	00456201 	jmpi	45620 <_write_r>

000455bc <__sseek>:
   455bc:	defffe04 	addi	sp,sp,-8
   455c0:	dc000015 	stw	r16,0(sp)
   455c4:	2821883a 	mov	r16,r5
   455c8:	2940038f 	ldh	r5,14(r5)
   455cc:	dfc00115 	stw	ra,4(sp)
   455d0:	00458880 	call	45888 <_lseek_r>
   455d4:	00ffffc4 	movi	r3,-1
   455d8:	10c00826 	beq	r2,r3,455fc <__sseek+0x40>
   455dc:	80c0030b 	ldhu	r3,12(r16)
   455e0:	80801415 	stw	r2,80(r16)
   455e4:	18c40014 	ori	r3,r3,4096
   455e8:	80c0030d 	sth	r3,12(r16)
   455ec:	dfc00117 	ldw	ra,4(sp)
   455f0:	dc000017 	ldw	r16,0(sp)
   455f4:	dec00204 	addi	sp,sp,8
   455f8:	f800283a 	ret
   455fc:	80c0030b 	ldhu	r3,12(r16)
   45600:	18fbffcc 	andi	r3,r3,61439
   45604:	80c0030d 	sth	r3,12(r16)
   45608:	dfc00117 	ldw	ra,4(sp)
   4560c:	dc000017 	ldw	r16,0(sp)
   45610:	dec00204 	addi	sp,sp,8
   45614:	f800283a 	ret

00045618 <__sclose>:
   45618:	2940038f 	ldh	r5,14(r5)
   4561c:	00456801 	jmpi	45680 <_close_r>

00045620 <_write_r>:
   45620:	defffd04 	addi	sp,sp,-12
   45624:	2805883a 	mov	r2,r5
   45628:	dc000015 	stw	r16,0(sp)
   4562c:	04020034 	movhi	r16,2048
   45630:	dc400115 	stw	r17,4(sp)
   45634:	300b883a 	mov	r5,r6
   45638:	84070b04 	addi	r16,r16,7212
   4563c:	2023883a 	mov	r17,r4
   45640:	380d883a 	mov	r6,r7
   45644:	1009883a 	mov	r4,r2
   45648:	dfc00215 	stw	ra,8(sp)
   4564c:	80000015 	stw	zero,0(r16)
   45650:	0045ee40 	call	45ee4 <write>
   45654:	00ffffc4 	movi	r3,-1
   45658:	10c00526 	beq	r2,r3,45670 <_write_r+0x50>
   4565c:	dfc00217 	ldw	ra,8(sp)
   45660:	dc400117 	ldw	r17,4(sp)
   45664:	dc000017 	ldw	r16,0(sp)
   45668:	dec00304 	addi	sp,sp,12
   4566c:	f800283a 	ret
   45670:	80c00017 	ldw	r3,0(r16)
   45674:	183ff926 	beq	r3,zero,4565c <__alt_data_end+0xf404565c>
   45678:	88c00015 	stw	r3,0(r17)
   4567c:	003ff706 	br	4565c <__alt_data_end+0xf404565c>

00045680 <_close_r>:
   45680:	defffd04 	addi	sp,sp,-12
   45684:	dc000015 	stw	r16,0(sp)
   45688:	04020034 	movhi	r16,2048
   4568c:	dc400115 	stw	r17,4(sp)
   45690:	84070b04 	addi	r16,r16,7212
   45694:	2023883a 	mov	r17,r4
   45698:	2809883a 	mov	r4,r5
   4569c:	dfc00215 	stw	ra,8(sp)
   456a0:	80000015 	stw	zero,0(r16)
   456a4:	0041c4c0 	call	41c4c <close>
   456a8:	00ffffc4 	movi	r3,-1
   456ac:	10c00526 	beq	r2,r3,456c4 <_close_r+0x44>
   456b0:	dfc00217 	ldw	ra,8(sp)
   456b4:	dc400117 	ldw	r17,4(sp)
   456b8:	dc000017 	ldw	r16,0(sp)
   456bc:	dec00304 	addi	sp,sp,12
   456c0:	f800283a 	ret
   456c4:	80c00017 	ldw	r3,0(r16)
   456c8:	183ff926 	beq	r3,zero,456b0 <__alt_data_end+0xf40456b0>
   456cc:	88c00015 	stw	r3,0(r17)
   456d0:	003ff706 	br	456b0 <__alt_data_end+0xf40456b0>

000456d4 <_fclose_r>:
   456d4:	28003926 	beq	r5,zero,457bc <_fclose_r+0xe8>
   456d8:	defffc04 	addi	sp,sp,-16
   456dc:	dc400115 	stw	r17,4(sp)
   456e0:	dc000015 	stw	r16,0(sp)
   456e4:	dfc00315 	stw	ra,12(sp)
   456e8:	dc800215 	stw	r18,8(sp)
   456ec:	2023883a 	mov	r17,r4
   456f0:	2821883a 	mov	r16,r5
   456f4:	20000226 	beq	r4,zero,45700 <_fclose_r+0x2c>
   456f8:	20800e17 	ldw	r2,56(r4)
   456fc:	10002726 	beq	r2,zero,4579c <_fclose_r+0xc8>
   45700:	8080030f 	ldh	r2,12(r16)
   45704:	1000071e 	bne	r2,zero,45724 <_fclose_r+0x50>
   45708:	0005883a 	mov	r2,zero
   4570c:	dfc00317 	ldw	ra,12(sp)
   45710:	dc800217 	ldw	r18,8(sp)
   45714:	dc400117 	ldw	r17,4(sp)
   45718:	dc000017 	ldw	r16,0(sp)
   4571c:	dec00404 	addi	sp,sp,16
   45720:	f800283a 	ret
   45724:	800b883a 	mov	r5,r16
   45728:	8809883a 	mov	r4,r17
   4572c:	00445ec0 	call	445ec <__sflush_r>
   45730:	1025883a 	mov	r18,r2
   45734:	80800b17 	ldw	r2,44(r16)
   45738:	10000426 	beq	r2,zero,4574c <_fclose_r+0x78>
   4573c:	81400717 	ldw	r5,28(r16)
   45740:	8809883a 	mov	r4,r17
   45744:	103ee83a 	callr	r2
   45748:	10001616 	blt	r2,zero,457a4 <_fclose_r+0xd0>
   4574c:	8080030b 	ldhu	r2,12(r16)
   45750:	1080200c 	andi	r2,r2,128
   45754:	1000151e 	bne	r2,zero,457ac <_fclose_r+0xd8>
   45758:	81400c17 	ldw	r5,48(r16)
   4575c:	28000526 	beq	r5,zero,45774 <_fclose_r+0xa0>
   45760:	80801004 	addi	r2,r16,64
   45764:	28800226 	beq	r5,r2,45770 <_fclose_r+0x9c>
   45768:	8809883a 	mov	r4,r17
   4576c:	0044d680 	call	44d68 <_free_r>
   45770:	80000c15 	stw	zero,48(r16)
   45774:	81401117 	ldw	r5,68(r16)
   45778:	28000326 	beq	r5,zero,45788 <_fclose_r+0xb4>
   4577c:	8809883a 	mov	r4,r17
   45780:	0044d680 	call	44d68 <_free_r>
   45784:	80001115 	stw	zero,68(r16)
   45788:	0044c040 	call	44c04 <__sfp_lock_acquire>
   4578c:	8000030d 	sth	zero,12(r16)
   45790:	0044c080 	call	44c08 <__sfp_lock_release>
   45794:	9005883a 	mov	r2,r18
   45798:	003fdc06 	br	4570c <__alt_data_end+0xf404570c>
   4579c:	0044bf40 	call	44bf4 <__sinit>
   457a0:	003fd706 	br	45700 <__alt_data_end+0xf4045700>
   457a4:	04bfffc4 	movi	r18,-1
   457a8:	003fe806 	br	4574c <__alt_data_end+0xf404574c>
   457ac:	81400417 	ldw	r5,16(r16)
   457b0:	8809883a 	mov	r4,r17
   457b4:	0044d680 	call	44d68 <_free_r>
   457b8:	003fe706 	br	45758 <__alt_data_end+0xf4045758>
   457bc:	0005883a 	mov	r2,zero
   457c0:	f800283a 	ret

000457c4 <fclose>:
   457c4:	00820034 	movhi	r2,2048
   457c8:	10870004 	addi	r2,r2,7168
   457cc:	200b883a 	mov	r5,r4
   457d0:	11000017 	ldw	r4,0(r2)
   457d4:	00456d41 	jmpi	456d4 <_fclose_r>

000457d8 <_fstat_r>:
   457d8:	defffd04 	addi	sp,sp,-12
   457dc:	2805883a 	mov	r2,r5
   457e0:	dc000015 	stw	r16,0(sp)
   457e4:	04020034 	movhi	r16,2048
   457e8:	dc400115 	stw	r17,4(sp)
   457ec:	84070b04 	addi	r16,r16,7212
   457f0:	2023883a 	mov	r17,r4
   457f4:	300b883a 	mov	r5,r6
   457f8:	1009883a 	mov	r4,r2
   457fc:	dfc00215 	stw	ra,8(sp)
   45800:	80000015 	stw	zero,0(r16)
   45804:	00459b80 	call	459b8 <fstat>
   45808:	00ffffc4 	movi	r3,-1
   4580c:	10c00526 	beq	r2,r3,45824 <_fstat_r+0x4c>
   45810:	dfc00217 	ldw	ra,8(sp)
   45814:	dc400117 	ldw	r17,4(sp)
   45818:	dc000017 	ldw	r16,0(sp)
   4581c:	dec00304 	addi	sp,sp,12
   45820:	f800283a 	ret
   45824:	80c00017 	ldw	r3,0(r16)
   45828:	183ff926 	beq	r3,zero,45810 <__alt_data_end+0xf4045810>
   4582c:	88c00015 	stw	r3,0(r17)
   45830:	003ff706 	br	45810 <__alt_data_end+0xf4045810>

00045834 <_isatty_r>:
   45834:	defffd04 	addi	sp,sp,-12
   45838:	dc000015 	stw	r16,0(sp)
   4583c:	04020034 	movhi	r16,2048
   45840:	dc400115 	stw	r17,4(sp)
   45844:	84070b04 	addi	r16,r16,7212
   45848:	2023883a 	mov	r17,r4
   4584c:	2809883a 	mov	r4,r5
   45850:	dfc00215 	stw	ra,8(sp)
   45854:	80000015 	stw	zero,0(r16)
   45858:	0045aac0 	call	45aac <isatty>
   4585c:	00ffffc4 	movi	r3,-1
   45860:	10c00526 	beq	r2,r3,45878 <_isatty_r+0x44>
   45864:	dfc00217 	ldw	ra,8(sp)
   45868:	dc400117 	ldw	r17,4(sp)
   4586c:	dc000017 	ldw	r16,0(sp)
   45870:	dec00304 	addi	sp,sp,12
   45874:	f800283a 	ret
   45878:	80c00017 	ldw	r3,0(r16)
   4587c:	183ff926 	beq	r3,zero,45864 <__alt_data_end+0xf4045864>
   45880:	88c00015 	stw	r3,0(r17)
   45884:	003ff706 	br	45864 <__alt_data_end+0xf4045864>

00045888 <_lseek_r>:
   45888:	defffd04 	addi	sp,sp,-12
   4588c:	2805883a 	mov	r2,r5
   45890:	dc000015 	stw	r16,0(sp)
   45894:	04020034 	movhi	r16,2048
   45898:	dc400115 	stw	r17,4(sp)
   4589c:	300b883a 	mov	r5,r6
   458a0:	84070b04 	addi	r16,r16,7212
   458a4:	2023883a 	mov	r17,r4
   458a8:	380d883a 	mov	r6,r7
   458ac:	1009883a 	mov	r4,r2
   458b0:	dfc00215 	stw	ra,8(sp)
   458b4:	80000015 	stw	zero,0(r16)
   458b8:	0045b940 	call	45b94 <lseek>
   458bc:	00ffffc4 	movi	r3,-1
   458c0:	10c00526 	beq	r2,r3,458d8 <_lseek_r+0x50>
   458c4:	dfc00217 	ldw	ra,8(sp)
   458c8:	dc400117 	ldw	r17,4(sp)
   458cc:	dc000017 	ldw	r16,0(sp)
   458d0:	dec00304 	addi	sp,sp,12
   458d4:	f800283a 	ret
   458d8:	80c00017 	ldw	r3,0(r16)
   458dc:	183ff926 	beq	r3,zero,458c4 <__alt_data_end+0xf40458c4>
   458e0:	88c00015 	stw	r3,0(r17)
   458e4:	003ff706 	br	458c4 <__alt_data_end+0xf40458c4>

000458e8 <_read_r>:
   458e8:	defffd04 	addi	sp,sp,-12
   458ec:	2805883a 	mov	r2,r5
   458f0:	dc000015 	stw	r16,0(sp)
   458f4:	04020034 	movhi	r16,2048
   458f8:	dc400115 	stw	r17,4(sp)
   458fc:	300b883a 	mov	r5,r6
   45900:	84070b04 	addi	r16,r16,7212
   45904:	2023883a 	mov	r17,r4
   45908:	380d883a 	mov	r6,r7
   4590c:	1009883a 	mov	r4,r2
   45910:	dfc00215 	stw	ra,8(sp)
   45914:	80000015 	stw	zero,0(r16)
   45918:	0045cf40 	call	45cf4 <read>
   4591c:	00ffffc4 	movi	r3,-1
   45920:	10c00526 	beq	r2,r3,45938 <_read_r+0x50>
   45924:	dfc00217 	ldw	ra,8(sp)
   45928:	dc400117 	ldw	r17,4(sp)
   4592c:	dc000017 	ldw	r16,0(sp)
   45930:	dec00304 	addi	sp,sp,12
   45934:	f800283a 	ret
   45938:	80c00017 	ldw	r3,0(r16)
   4593c:	183ff926 	beq	r3,zero,45924 <__alt_data_end+0xf4045924>
   45940:	88c00015 	stw	r3,0(r17)
   45944:	003ff706 	br	45924 <__alt_data_end+0xf4045924>

00045948 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   45948:	defffd04 	addi	sp,sp,-12
   4594c:	df000215 	stw	fp,8(sp)
   45950:	df000204 	addi	fp,sp,8
   45954:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   45958:	0001883a 	nop
   4595c:	e0bfff17 	ldw	r2,-4(fp)
   45960:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   45964:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   45968:	10000226 	beq	r2,zero,45974 <_exit+0x2c>
    ALT_SIM_FAIL();
   4596c:	002af070 	cmpltui	zero,zero,43969
   45970:	00000106 	br	45978 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   45974:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   45978:	003fff06 	br	45978 <__alt_data_end+0xf4045978>

0004597c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4597c:	defffe04 	addi	sp,sp,-8
   45980:	dfc00115 	stw	ra,4(sp)
   45984:	df000015 	stw	fp,0(sp)
   45988:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4598c:	d0a00517 	ldw	r2,-32748(gp)
   45990:	10000326 	beq	r2,zero,459a0 <alt_get_errno+0x24>
   45994:	d0a00517 	ldw	r2,-32748(gp)
   45998:	103ee83a 	callr	r2
   4599c:	00000106 	br	459a4 <alt_get_errno+0x28>
   459a0:	d0a01504 	addi	r2,gp,-32684
}
   459a4:	e037883a 	mov	sp,fp
   459a8:	dfc00117 	ldw	ra,4(sp)
   459ac:	df000017 	ldw	fp,0(sp)
   459b0:	dec00204 	addi	sp,sp,8
   459b4:	f800283a 	ret

000459b8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   459b8:	defffb04 	addi	sp,sp,-20
   459bc:	dfc00415 	stw	ra,16(sp)
   459c0:	df000315 	stw	fp,12(sp)
   459c4:	df000304 	addi	fp,sp,12
   459c8:	e13ffe15 	stw	r4,-8(fp)
   459cc:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   459d0:	e0bffe17 	ldw	r2,-8(fp)
   459d4:	10000816 	blt	r2,zero,459f8 <fstat+0x40>
   459d8:	01400304 	movi	r5,12
   459dc:	e13ffe17 	ldw	r4,-8(fp)
   459e0:	00407a00 	call	407a0 <__mulsi3>
   459e4:	1007883a 	mov	r3,r2
   459e8:	00820034 	movhi	r2,2048
   459ec:	10848b04 	addi	r2,r2,4652
   459f0:	1885883a 	add	r2,r3,r2
   459f4:	00000106 	br	459fc <fstat+0x44>
   459f8:	0005883a 	mov	r2,zero
   459fc:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   45a00:	e0bffd17 	ldw	r2,-12(fp)
   45a04:	10001026 	beq	r2,zero,45a48 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   45a08:	e0bffd17 	ldw	r2,-12(fp)
   45a0c:	10800017 	ldw	r2,0(r2)
   45a10:	10800817 	ldw	r2,32(r2)
   45a14:	10000726 	beq	r2,zero,45a34 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   45a18:	e0bffd17 	ldw	r2,-12(fp)
   45a1c:	10800017 	ldw	r2,0(r2)
   45a20:	10800817 	ldw	r2,32(r2)
   45a24:	e17fff17 	ldw	r5,-4(fp)
   45a28:	e13ffd17 	ldw	r4,-12(fp)
   45a2c:	103ee83a 	callr	r2
   45a30:	00000a06 	br	45a5c <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   45a34:	e0bfff17 	ldw	r2,-4(fp)
   45a38:	00c80004 	movi	r3,8192
   45a3c:	10c00115 	stw	r3,4(r2)
      return 0;
   45a40:	0005883a 	mov	r2,zero
   45a44:	00000506 	br	45a5c <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   45a48:	004597c0 	call	4597c <alt_get_errno>
   45a4c:	1007883a 	mov	r3,r2
   45a50:	00801444 	movi	r2,81
   45a54:	18800015 	stw	r2,0(r3)
    return -1;
   45a58:	00bfffc4 	movi	r2,-1
  }
}
   45a5c:	e037883a 	mov	sp,fp
   45a60:	dfc00117 	ldw	ra,4(sp)
   45a64:	df000017 	ldw	fp,0(sp)
   45a68:	dec00204 	addi	sp,sp,8
   45a6c:	f800283a 	ret

00045a70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   45a70:	defffe04 	addi	sp,sp,-8
   45a74:	dfc00115 	stw	ra,4(sp)
   45a78:	df000015 	stw	fp,0(sp)
   45a7c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   45a80:	d0a00517 	ldw	r2,-32748(gp)
   45a84:	10000326 	beq	r2,zero,45a94 <alt_get_errno+0x24>
   45a88:	d0a00517 	ldw	r2,-32748(gp)
   45a8c:	103ee83a 	callr	r2
   45a90:	00000106 	br	45a98 <alt_get_errno+0x28>
   45a94:	d0a01504 	addi	r2,gp,-32684
}
   45a98:	e037883a 	mov	sp,fp
   45a9c:	dfc00117 	ldw	ra,4(sp)
   45aa0:	df000017 	ldw	fp,0(sp)
   45aa4:	dec00204 	addi	sp,sp,8
   45aa8:	f800283a 	ret

00045aac <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   45aac:	deffed04 	addi	sp,sp,-76
   45ab0:	dfc01215 	stw	ra,72(sp)
   45ab4:	df001115 	stw	fp,68(sp)
   45ab8:	df001104 	addi	fp,sp,68
   45abc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   45ac0:	e0bfff17 	ldw	r2,-4(fp)
   45ac4:	10000816 	blt	r2,zero,45ae8 <isatty+0x3c>
   45ac8:	01400304 	movi	r5,12
   45acc:	e13fff17 	ldw	r4,-4(fp)
   45ad0:	00407a00 	call	407a0 <__mulsi3>
   45ad4:	1007883a 	mov	r3,r2
   45ad8:	00820034 	movhi	r2,2048
   45adc:	10848b04 	addi	r2,r2,4652
   45ae0:	1885883a 	add	r2,r3,r2
   45ae4:	00000106 	br	45aec <isatty+0x40>
   45ae8:	0005883a 	mov	r2,zero
   45aec:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   45af0:	e0bfef17 	ldw	r2,-68(fp)
   45af4:	10000e26 	beq	r2,zero,45b30 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   45af8:	e0bfef17 	ldw	r2,-68(fp)
   45afc:	10800017 	ldw	r2,0(r2)
   45b00:	10800817 	ldw	r2,32(r2)
   45b04:	1000021e 	bne	r2,zero,45b10 <isatty+0x64>
    {
      return 1;
   45b08:	00800044 	movi	r2,1
   45b0c:	00000d06 	br	45b44 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   45b10:	e0bff004 	addi	r2,fp,-64
   45b14:	100b883a 	mov	r5,r2
   45b18:	e13fff17 	ldw	r4,-4(fp)
   45b1c:	00459b80 	call	459b8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   45b20:	e0bff117 	ldw	r2,-60(fp)
   45b24:	10880020 	cmpeqi	r2,r2,8192
   45b28:	10803fcc 	andi	r2,r2,255
   45b2c:	00000506 	br	45b44 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   45b30:	0045a700 	call	45a70 <alt_get_errno>
   45b34:	1007883a 	mov	r3,r2
   45b38:	00801444 	movi	r2,81
   45b3c:	18800015 	stw	r2,0(r3)
    return 0;
   45b40:	0005883a 	mov	r2,zero
  }
}
   45b44:	e037883a 	mov	sp,fp
   45b48:	dfc00117 	ldw	ra,4(sp)
   45b4c:	df000017 	ldw	fp,0(sp)
   45b50:	dec00204 	addi	sp,sp,8
   45b54:	f800283a 	ret

00045b58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   45b58:	defffe04 	addi	sp,sp,-8
   45b5c:	dfc00115 	stw	ra,4(sp)
   45b60:	df000015 	stw	fp,0(sp)
   45b64:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   45b68:	d0a00517 	ldw	r2,-32748(gp)
   45b6c:	10000326 	beq	r2,zero,45b7c <alt_get_errno+0x24>
   45b70:	d0a00517 	ldw	r2,-32748(gp)
   45b74:	103ee83a 	callr	r2
   45b78:	00000106 	br	45b80 <alt_get_errno+0x28>
   45b7c:	d0a01504 	addi	r2,gp,-32684
}
   45b80:	e037883a 	mov	sp,fp
   45b84:	dfc00117 	ldw	ra,4(sp)
   45b88:	df000017 	ldw	fp,0(sp)
   45b8c:	dec00204 	addi	sp,sp,8
   45b90:	f800283a 	ret

00045b94 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   45b94:	defff904 	addi	sp,sp,-28
   45b98:	dfc00615 	stw	ra,24(sp)
   45b9c:	df000515 	stw	fp,20(sp)
   45ba0:	df000504 	addi	fp,sp,20
   45ba4:	e13ffd15 	stw	r4,-12(fp)
   45ba8:	e17ffe15 	stw	r5,-8(fp)
   45bac:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   45bb0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   45bb4:	e0bffd17 	ldw	r2,-12(fp)
   45bb8:	10000816 	blt	r2,zero,45bdc <lseek+0x48>
   45bbc:	01400304 	movi	r5,12
   45bc0:	e13ffd17 	ldw	r4,-12(fp)
   45bc4:	00407a00 	call	407a0 <__mulsi3>
   45bc8:	1007883a 	mov	r3,r2
   45bcc:	00820034 	movhi	r2,2048
   45bd0:	10848b04 	addi	r2,r2,4652
   45bd4:	1885883a 	add	r2,r3,r2
   45bd8:	00000106 	br	45be0 <lseek+0x4c>
   45bdc:	0005883a 	mov	r2,zero
   45be0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   45be4:	e0bffc17 	ldw	r2,-16(fp)
   45be8:	10001026 	beq	r2,zero,45c2c <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   45bec:	e0bffc17 	ldw	r2,-16(fp)
   45bf0:	10800017 	ldw	r2,0(r2)
   45bf4:	10800717 	ldw	r2,28(r2)
   45bf8:	10000926 	beq	r2,zero,45c20 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   45bfc:	e0bffc17 	ldw	r2,-16(fp)
   45c00:	10800017 	ldw	r2,0(r2)
   45c04:	10800717 	ldw	r2,28(r2)
   45c08:	e1bfff17 	ldw	r6,-4(fp)
   45c0c:	e17ffe17 	ldw	r5,-8(fp)
   45c10:	e13ffc17 	ldw	r4,-16(fp)
   45c14:	103ee83a 	callr	r2
   45c18:	e0bffb15 	stw	r2,-20(fp)
   45c1c:	00000506 	br	45c34 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   45c20:	00bfde84 	movi	r2,-134
   45c24:	e0bffb15 	stw	r2,-20(fp)
   45c28:	00000206 	br	45c34 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   45c2c:	00bfebc4 	movi	r2,-81
   45c30:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   45c34:	e0bffb17 	ldw	r2,-20(fp)
   45c38:	1000070e 	bge	r2,zero,45c58 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   45c3c:	0045b580 	call	45b58 <alt_get_errno>
   45c40:	1007883a 	mov	r3,r2
   45c44:	e0bffb17 	ldw	r2,-20(fp)
   45c48:	0085c83a 	sub	r2,zero,r2
   45c4c:	18800015 	stw	r2,0(r3)
    rc = -1;
   45c50:	00bfffc4 	movi	r2,-1
   45c54:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   45c58:	e0bffb17 	ldw	r2,-20(fp)
}
   45c5c:	e037883a 	mov	sp,fp
   45c60:	dfc00117 	ldw	ra,4(sp)
   45c64:	df000017 	ldw	fp,0(sp)
   45c68:	dec00204 	addi	sp,sp,8
   45c6c:	f800283a 	ret

00045c70 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   45c70:	defffe04 	addi	sp,sp,-8
   45c74:	df000115 	stw	fp,4(sp)
   45c78:	df000104 	addi	fp,sp,4
   45c7c:	e13fff15 	stw	r4,-4(fp)
}
   45c80:	0001883a 	nop
   45c84:	e037883a 	mov	sp,fp
   45c88:	df000017 	ldw	fp,0(sp)
   45c8c:	dec00104 	addi	sp,sp,4
   45c90:	f800283a 	ret

00045c94 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   45c94:	defffe04 	addi	sp,sp,-8
   45c98:	df000115 	stw	fp,4(sp)
   45c9c:	df000104 	addi	fp,sp,4
   45ca0:	e13fff15 	stw	r4,-4(fp)
}
   45ca4:	0001883a 	nop
   45ca8:	e037883a 	mov	sp,fp
   45cac:	df000017 	ldw	fp,0(sp)
   45cb0:	dec00104 	addi	sp,sp,4
   45cb4:	f800283a 	ret

00045cb8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   45cb8:	defffe04 	addi	sp,sp,-8
   45cbc:	dfc00115 	stw	ra,4(sp)
   45cc0:	df000015 	stw	fp,0(sp)
   45cc4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   45cc8:	d0a00517 	ldw	r2,-32748(gp)
   45ccc:	10000326 	beq	r2,zero,45cdc <alt_get_errno+0x24>
   45cd0:	d0a00517 	ldw	r2,-32748(gp)
   45cd4:	103ee83a 	callr	r2
   45cd8:	00000106 	br	45ce0 <alt_get_errno+0x28>
   45cdc:	d0a01504 	addi	r2,gp,-32684
}
   45ce0:	e037883a 	mov	sp,fp
   45ce4:	dfc00117 	ldw	ra,4(sp)
   45ce8:	df000017 	ldw	fp,0(sp)
   45cec:	dec00204 	addi	sp,sp,8
   45cf0:	f800283a 	ret

00045cf4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   45cf4:	defff904 	addi	sp,sp,-28
   45cf8:	dfc00615 	stw	ra,24(sp)
   45cfc:	df000515 	stw	fp,20(sp)
   45d00:	df000504 	addi	fp,sp,20
   45d04:	e13ffd15 	stw	r4,-12(fp)
   45d08:	e17ffe15 	stw	r5,-8(fp)
   45d0c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   45d10:	e0bffd17 	ldw	r2,-12(fp)
   45d14:	10000816 	blt	r2,zero,45d38 <read+0x44>
   45d18:	01400304 	movi	r5,12
   45d1c:	e13ffd17 	ldw	r4,-12(fp)
   45d20:	00407a00 	call	407a0 <__mulsi3>
   45d24:	1007883a 	mov	r3,r2
   45d28:	00820034 	movhi	r2,2048
   45d2c:	10848b04 	addi	r2,r2,4652
   45d30:	1885883a 	add	r2,r3,r2
   45d34:	00000106 	br	45d3c <read+0x48>
   45d38:	0005883a 	mov	r2,zero
   45d3c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   45d40:	e0bffb17 	ldw	r2,-20(fp)
   45d44:	10002226 	beq	r2,zero,45dd0 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   45d48:	e0bffb17 	ldw	r2,-20(fp)
   45d4c:	10800217 	ldw	r2,8(r2)
   45d50:	108000cc 	andi	r2,r2,3
   45d54:	10800060 	cmpeqi	r2,r2,1
   45d58:	1000181e 	bne	r2,zero,45dbc <read+0xc8>
        (fd->dev->read))
   45d5c:	e0bffb17 	ldw	r2,-20(fp)
   45d60:	10800017 	ldw	r2,0(r2)
   45d64:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   45d68:	10001426 	beq	r2,zero,45dbc <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   45d6c:	e0bffb17 	ldw	r2,-20(fp)
   45d70:	10800017 	ldw	r2,0(r2)
   45d74:	10800517 	ldw	r2,20(r2)
   45d78:	e0ffff17 	ldw	r3,-4(fp)
   45d7c:	180d883a 	mov	r6,r3
   45d80:	e17ffe17 	ldw	r5,-8(fp)
   45d84:	e13ffb17 	ldw	r4,-20(fp)
   45d88:	103ee83a 	callr	r2
   45d8c:	e0bffc15 	stw	r2,-16(fp)
   45d90:	e0bffc17 	ldw	r2,-16(fp)
   45d94:	1000070e 	bge	r2,zero,45db4 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   45d98:	0045cb80 	call	45cb8 <alt_get_errno>
   45d9c:	1007883a 	mov	r3,r2
   45da0:	e0bffc17 	ldw	r2,-16(fp)
   45da4:	0085c83a 	sub	r2,zero,r2
   45da8:	18800015 	stw	r2,0(r3)
          return -1;
   45dac:	00bfffc4 	movi	r2,-1
   45db0:	00000c06 	br	45de4 <read+0xf0>
        }
        return rval;
   45db4:	e0bffc17 	ldw	r2,-16(fp)
   45db8:	00000a06 	br	45de4 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   45dbc:	0045cb80 	call	45cb8 <alt_get_errno>
   45dc0:	1007883a 	mov	r3,r2
   45dc4:	00800344 	movi	r2,13
   45dc8:	18800015 	stw	r2,0(r3)
   45dcc:	00000406 	br	45de0 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   45dd0:	0045cb80 	call	45cb8 <alt_get_errno>
   45dd4:	1007883a 	mov	r3,r2
   45dd8:	00801444 	movi	r2,81
   45ddc:	18800015 	stw	r2,0(r3)
  }
  return -1;
   45de0:	00bfffc4 	movi	r2,-1
}
   45de4:	e037883a 	mov	sp,fp
   45de8:	dfc00117 	ldw	ra,4(sp)
   45dec:	df000017 	ldw	fp,0(sp)
   45df0:	dec00204 	addi	sp,sp,8
   45df4:	f800283a 	ret

00045df8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   45df8:	defff904 	addi	sp,sp,-28
   45dfc:	df000615 	stw	fp,24(sp)
   45e00:	df000604 	addi	fp,sp,24
   45e04:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   45e08:	0005303a 	rdctl	r2,status
   45e0c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   45e10:	e0fffe17 	ldw	r3,-8(fp)
   45e14:	00bfff84 	movi	r2,-2
   45e18:	1884703a 	and	r2,r3,r2
   45e1c:	1001703a 	wrctl	status,r2
  
  return context;
   45e20:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   45e24:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   45e28:	d0a00d17 	ldw	r2,-32716(gp)
   45e2c:	10c000c4 	addi	r3,r2,3
   45e30:	00bfff04 	movi	r2,-4
   45e34:	1884703a 	and	r2,r3,r2
   45e38:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   45e3c:	d0e00d17 	ldw	r3,-32716(gp)
   45e40:	e0bfff17 	ldw	r2,-4(fp)
   45e44:	1887883a 	add	r3,r3,r2
   45e48:	00830034 	movhi	r2,3072
   45e4c:	10800004 	addi	r2,r2,0
   45e50:	10c0062e 	bgeu	r2,r3,45e6c <sbrk+0x74>
   45e54:	e0bffb17 	ldw	r2,-20(fp)
   45e58:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   45e5c:	e0bffa17 	ldw	r2,-24(fp)
   45e60:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   45e64:	00bfffc4 	movi	r2,-1
   45e68:	00000b06 	br	45e98 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   45e6c:	d0a00d17 	ldw	r2,-32716(gp)
   45e70:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   45e74:	d0e00d17 	ldw	r3,-32716(gp)
   45e78:	e0bfff17 	ldw	r2,-4(fp)
   45e7c:	1885883a 	add	r2,r3,r2
   45e80:	d0a00d15 	stw	r2,-32716(gp)
   45e84:	e0bffb17 	ldw	r2,-20(fp)
   45e88:	e0bffc15 	stw	r2,-16(fp)
   45e8c:	e0bffc17 	ldw	r2,-16(fp)
   45e90:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   45e94:	e0bffd17 	ldw	r2,-12(fp)
} 
   45e98:	e037883a 	mov	sp,fp
   45e9c:	df000017 	ldw	fp,0(sp)
   45ea0:	dec00104 	addi	sp,sp,4
   45ea4:	f800283a 	ret

00045ea8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   45ea8:	defffe04 	addi	sp,sp,-8
   45eac:	dfc00115 	stw	ra,4(sp)
   45eb0:	df000015 	stw	fp,0(sp)
   45eb4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   45eb8:	d0a00517 	ldw	r2,-32748(gp)
   45ebc:	10000326 	beq	r2,zero,45ecc <alt_get_errno+0x24>
   45ec0:	d0a00517 	ldw	r2,-32748(gp)
   45ec4:	103ee83a 	callr	r2
   45ec8:	00000106 	br	45ed0 <alt_get_errno+0x28>
   45ecc:	d0a01504 	addi	r2,gp,-32684
}
   45ed0:	e037883a 	mov	sp,fp
   45ed4:	dfc00117 	ldw	ra,4(sp)
   45ed8:	df000017 	ldw	fp,0(sp)
   45edc:	dec00204 	addi	sp,sp,8
   45ee0:	f800283a 	ret

00045ee4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   45ee4:	defff904 	addi	sp,sp,-28
   45ee8:	dfc00615 	stw	ra,24(sp)
   45eec:	df000515 	stw	fp,20(sp)
   45ef0:	df000504 	addi	fp,sp,20
   45ef4:	e13ffd15 	stw	r4,-12(fp)
   45ef8:	e17ffe15 	stw	r5,-8(fp)
   45efc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   45f00:	e0bffd17 	ldw	r2,-12(fp)
   45f04:	10000816 	blt	r2,zero,45f28 <write+0x44>
   45f08:	01400304 	movi	r5,12
   45f0c:	e13ffd17 	ldw	r4,-12(fp)
   45f10:	00407a00 	call	407a0 <__mulsi3>
   45f14:	1007883a 	mov	r3,r2
   45f18:	00820034 	movhi	r2,2048
   45f1c:	10848b04 	addi	r2,r2,4652
   45f20:	1885883a 	add	r2,r3,r2
   45f24:	00000106 	br	45f2c <write+0x48>
   45f28:	0005883a 	mov	r2,zero
   45f2c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   45f30:	e0bffb17 	ldw	r2,-20(fp)
   45f34:	10002126 	beq	r2,zero,45fbc <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   45f38:	e0bffb17 	ldw	r2,-20(fp)
   45f3c:	10800217 	ldw	r2,8(r2)
   45f40:	108000cc 	andi	r2,r2,3
   45f44:	10001826 	beq	r2,zero,45fa8 <write+0xc4>
   45f48:	e0bffb17 	ldw	r2,-20(fp)
   45f4c:	10800017 	ldw	r2,0(r2)
   45f50:	10800617 	ldw	r2,24(r2)
   45f54:	10001426 	beq	r2,zero,45fa8 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   45f58:	e0bffb17 	ldw	r2,-20(fp)
   45f5c:	10800017 	ldw	r2,0(r2)
   45f60:	10800617 	ldw	r2,24(r2)
   45f64:	e0ffff17 	ldw	r3,-4(fp)
   45f68:	180d883a 	mov	r6,r3
   45f6c:	e17ffe17 	ldw	r5,-8(fp)
   45f70:	e13ffb17 	ldw	r4,-20(fp)
   45f74:	103ee83a 	callr	r2
   45f78:	e0bffc15 	stw	r2,-16(fp)
   45f7c:	e0bffc17 	ldw	r2,-16(fp)
   45f80:	1000070e 	bge	r2,zero,45fa0 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   45f84:	0045ea80 	call	45ea8 <alt_get_errno>
   45f88:	1007883a 	mov	r3,r2
   45f8c:	e0bffc17 	ldw	r2,-16(fp)
   45f90:	0085c83a 	sub	r2,zero,r2
   45f94:	18800015 	stw	r2,0(r3)
        return -1;
   45f98:	00bfffc4 	movi	r2,-1
   45f9c:	00000c06 	br	45fd0 <write+0xec>
      }
      return rval;
   45fa0:	e0bffc17 	ldw	r2,-16(fp)
   45fa4:	00000a06 	br	45fd0 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   45fa8:	0045ea80 	call	45ea8 <alt_get_errno>
   45fac:	1007883a 	mov	r3,r2
   45fb0:	00800344 	movi	r2,13
   45fb4:	18800015 	stw	r2,0(r3)
   45fb8:	00000406 	br	45fcc <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   45fbc:	0045ea80 	call	45ea8 <alt_get_errno>
   45fc0:	1007883a 	mov	r3,r2
   45fc4:	00801444 	movi	r2,81
   45fc8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   45fcc:	00bfffc4 	movi	r2,-1
}
   45fd0:	e037883a 	mov	sp,fp
   45fd4:	dfc00117 	ldw	ra,4(sp)
   45fd8:	df000017 	ldw	fp,0(sp)
   45fdc:	dec00204 	addi	sp,sp,8
   45fe0:	f800283a 	ret
