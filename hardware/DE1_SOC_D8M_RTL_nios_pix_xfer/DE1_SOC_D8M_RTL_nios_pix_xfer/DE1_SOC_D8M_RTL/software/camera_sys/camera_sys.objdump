
camera_sys.elf:     file format elf32-littlenios2
camera_sys.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00080020

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x0000053c memsz 0x0000053c flags r-x
    LOAD off    0x0000155c vaddr 0x0008055c paddr 0x00080560 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x00001564 vaddr 0x00080564 paddr 0x00080564 align 2**12
         filesz 0x00000000 memsz 0x0000e11c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00080020  00080020  00001560  2**0
                  CONTENTS
  2 .text         00000508  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000034  00080528  00080528  00001528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000004  0008055c  00080560  0000155c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000e1a2  00080564  00080564  00001564  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  0008e680  0008e680  00001560  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001560  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000188  00000000  00000000  00001588  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00000df1  00000000  00000000  00001710  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000785  00000000  00000000  00002501  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000074d  00000000  00000000  00002c86  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000200  00000000  00000000  000033d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000705  00000000  00000000  000035d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000003a4  00000000  00000000  00003cd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00004080  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000d0  00000000  00000000  00004090  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00004f8e  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00004f91  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00004f9d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00004f9e  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00004f9f  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00004faa  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00004fb5  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000d  00000000  00000000  00004fc0  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000072  00000000  00000000  00004fcd  2**0
                  CONTENTS, READONLY
 26 .jdi          000056f0  00000000  00000000  0000503f  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000392c0  00000000  00000000  0000a72f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
00080020 l    d  .text	00000000 .text
00080528 l    d  .rodata	00000000 .rodata
0008055c l    d  .rwdata	00000000 .rwdata
00080564 l    d  .bss	00000000 .bss
0008e680 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../camera_sys_bsp//obj/HAL/src/crt0.o
00080058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 camera_pix_xfer.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
000802dc g     F .text	0000002c alt_main
00080560 g       *ABS*	00000000 __flash_rwdata_start
00080580 g     O .bss	0000e100 pixels
00080520 g     F .text	00000008 altera_nios2_gen2_irq_init
00080000 g     F .entry	0000000c __reset
00080020 g       *ABS*	00000000 __flash_exceptions_start
00080578 g     O .bss	00000004 alt_argv
0008855c g       *ABS*	00000000 _gp
00080000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0008e680 g       *ABS*	00000000 __bss_end
00080564 g     O .bss	00000004 pixel_count
00080518 g     F .text	00000004 alt_dcache_flush_all
00080560 g       *ABS*	00000000 __ram_rwdata_end
0008055c g       *ABS*	00000000 __ram_rodata_end
0008055c g     O .rwdata	00000004 jtag_uart_0
0008e680 g       *ABS*	00000000 end
000a7400 g       *ABS*	00000000 __alt_stack_pointer
000804e4 g     F .text	00000034 altera_avalon_jtag_uart_write
00080308 g     F .text	00000170 alt_printf
00080020 g     F .text	0000003c _start
000804e0 g     F .text	00000004 alt_sys_init
000801d4 g     F .text	00000028 .hidden __mulsi3
0008055c g       *ABS*	00000000 __ram_rwdata_start
00080528 g       *ABS*	00000000 __ram_rodata_start
00080568 g     O .bss	00000004 col
0008e680 g       *ABS*	00000000 __alt_stack_base
00080564 g       *ABS*	00000000 __bss_start
0008005c g     F .text	00000178 main
00080574 g     O .bss	00000004 alt_envp
00080528 g       *ABS*	00000000 __flash_rodata_start
0008056c g     O .bss	00000004 curr_pixel_data
000804c0 g     F .text	00000020 alt_irq_init
0008057c g     O .bss	00000004 alt_argc
00080020 g       *ABS*	00000000 __ram_exceptions_start
00080560 g       *ABS*	00000000 _edata
0008e680 g       *ABS*	00000000 _end
00080020 g       *ABS*	00000000 __ram_exceptions_end
000a7400 g       *ABS*	00000000 __alt_data_end
0008000c g       .entry	00000000 _exit
00080478 g     F .text	00000048 alt_putchar
0008051c g     F .text	00000004 alt_icache_flush_all
000801fc g     F .text	000000e0 alt_load
00080570 g     O .bss	00000004 row



Disassembly of section .entry:

00080000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80000:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80004:	08400814 	ori	at,at,32
    jmp r1
   80008:	0800683a 	jmp	at

0008000c <_exit>:
	...

Disassembly of section .text:

00080020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   80020:	06c002b4 	movhi	sp,10
    ori sp, sp, %lo(__alt_stack_pointer)
   80024:	dedd0014 	ori	sp,sp,29696
    movhi gp, %hi(_gp)
   80028:	06800234 	movhi	gp,8
    ori gp, gp, %lo(_gp)
   8002c:	d6a15714 	ori	gp,gp,34140
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   80030:	00800234 	movhi	r2,8
    ori r2, r2, %lo(__bss_start)
   80034:	10815914 	ori	r2,r2,1380

    movhi r3, %hi(__bss_end)
   80038:	00c00234 	movhi	r3,8
    ori r3, r3, %lo(__bss_end)
   8003c:	18f9a014 	ori	r3,r3,59008

    beq r2, r3, 1f
   80040:	10c00326 	beq	r2,r3,80050 <_start+0x30>

0:
    stw zero, (r2)
   80044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   80048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   8004c:	10fffd36 	bltu	r2,r3,80044 <__alt_data_end+0xfffd8c44>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   80050:	00801fc0 	call	801fc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   80054:	00802dc0 	call	802dc <alt_main>

00080058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   80058:	003fff06 	br	80058 <__alt_data_end+0xfffd8c58>

0008005c <main>:

unsigned int pixels[120][120];
unsigned int row;
unsigned int col;

int main(void) {
   8005c:	defffa04 	addi	sp,sp,-24
   80060:	dc000015 	stw	r16,0(sp)
   80064:	dfc00515 	stw	ra,20(sp)
   80068:	dd000415 	stw	r20,16(sp)
   8006c:	dcc00315 	stw	r19,12(sp)
   80070:	dc800215 	stw	r18,8(sp)
   80074:	dc400115 	stw	r17,4(sp)
    unsigned int pixel_ready;
    row = 0;
   80078:	d0200515 	stw	zero,-32748(gp)
    col = 0;
   8007c:	d0200315 	stw	zero,-32756(gp)

    volatile int *JTAG_PTR = (int *) JTAG_BASE;

    char prompt = 0;

     pixel_count = 0;
   80080:	d0200215 	stw	zero,-32760(gp)



	while (1) {
		// image transfer monitor
		pixel_ready = *PIX_RDY_PTR;
   80084:	00c40004 	movi	r3,4096
//        alt_printf("\nStarted %x", pixel_ready);
		if (pixel_ready == 1) {
   80088:	04000044 	movi	r16,1



	while (1) {
		// image transfer monitor
		pixel_ready = *PIX_RDY_PTR;
   8008c:	18800017 	ldw	r2,0(r3)
//        alt_printf("\nStarted %x", pixel_ready);
		if (pixel_ready == 1) {
   80090:	143ffe1e 	bne	r2,r16,8008c <__alt_data_end+0xfffd8c8c>
			alt_printf("\nEntered1");
   80094:	01000234 	movhi	r4,8
   80098:	21014a04 	addi	r4,r4,1320
   8009c:	00803080 	call	80308 <alt_printf>

					curr_pixel_data = *PIX_DATA_PTR;

					if(row < 640) {
						if(col < 480) {
							pixels[row][col] = curr_pixel_data;
   800a0:	04c00234 	movhi	r19,8



	while (1) {
		// image transfer monitor
		pixel_ready = *PIX_RDY_PTR;
   800a4:	8005883a 	mov	r2,r16
//        alt_printf("\nStarted %x", pixel_ready);
		if (pixel_ready == 1) {
			alt_printf("\nEntered1");
			// turn LED
			while(pixel_ready != 2) {
				prompt = *JTAG_PTR;
   800a8:	04840c04 	movi	r18,4144
				if(pixel_ready == 0) {   //next pixel not ready, wait
					pixel_ready = *PIX_RDY_PTR;
				} else {//if(prompt == 'a'){    //next pixel ready, acknowledge & process. Ack when prompt == a used to debug pixel by pixel
//					alt_printf("\nEntered2");
					*ACK_PTR = 1;
   800ac:	04440104 	movi	r17,4100

					curr_pixel_data = *PIX_DATA_PTR;

					if(row < 640) {
						if(col < 480) {
							pixels[row][col] = curr_pixel_data;
   800b0:	9cc16004 	addi	r19,r19,1408
//        alt_printf("\nStarted %x", pixel_ready);
		if (pixel_ready == 1) {
			alt_printf("\nEntered1");
			// turn LED
			while(pixel_ready != 2) {
				prompt = *JTAG_PTR;
   800b4:	90c00017 	ldw	r3,0(r18)
				if(pixel_ready == 0) {   //next pixel not ready, wait
   800b8:	10002926 	beq	r2,zero,80160 <main+0x104>
					pixel_ready = *PIX_RDY_PTR;
				} else {//if(prompt == 'a'){    //next pixel ready, acknowledge & process. Ack when prompt == a used to debug pixel by pixel
//					alt_printf("\nEntered2");
					*ACK_PTR = 1;
   800bc:	00800044 	movi	r2,1
   800c0:	88800015 	stw	r2,0(r17)

					curr_pixel_data = *PIX_DATA_PTR;
   800c4:	00840204 	movi	r2,4104
   800c8:	15000017 	ldw	r20,0(r2)

					if(row < 640) {
   800cc:	d1200517 	ldw	r4,-32748(gp)
   800d0:	00809fc4 	movi	r2,639
					pixel_ready = *PIX_RDY_PTR;
				} else {//if(prompt == 'a'){    //next pixel ready, acknowledge & process. Ack when prompt == a used to debug pixel by pixel
//					alt_printf("\nEntered2");
					*ACK_PTR = 1;

					curr_pixel_data = *PIX_DATA_PTR;
   800d4:	d5200415 	stw	r20,-32752(gp)

					if(row < 640) {
   800d8:	1100082e 	bgeu	r2,r4,800fc <main+0xa0>
					//     // full image captured
					// }
				}

			}
			alt_printf("\nDone pixels.");
   800dc:	01000234 	movhi	r4,8
   800e0:	21014d04 	addi	r4,r4,1332

			for(unsigned int r = 0 ; r < 120; r++) {
				for(unsigned int c = 0; c < 120; c++) {
					alt_printf("%x ", pixels[r][c]);
   800e4:	04800234 	movhi	r18,8
					//     // full image captured
					// }
				}

			}
			alt_printf("\nDone pixels.");
   800e8:	00803080 	call	80308 <alt_printf>
   800ec:	0023883a 	mov	r17,zero

			for(unsigned int r = 0 ; r < 120; r++) {
				for(unsigned int c = 0; c < 120; c++) {
					alt_printf("%x ", pixels[r][c]);
   800f0:	94816004 	addi	r18,r18,1408

			}
			alt_printf("\nDone pixels.");

			for(unsigned int r = 0 ; r < 120; r++) {
				for(unsigned int c = 0; c < 120; c++) {
   800f4:	04c07804 	movi	r19,480
   800f8:	00001e06 	br	80174 <main+0x118>
					*ACK_PTR = 1;

					curr_pixel_data = *PIX_DATA_PTR;

					if(row < 640) {
						if(col < 480) {
   800fc:	d4200317 	ldw	r16,-32756(gp)
   80100:	008077c4 	movi	r2,479
   80104:	14000a36 	bltu	r2,r16,80130 <main+0xd4>
							pixels[row][col] = curr_pixel_data;
   80108:	01401e04 	movi	r5,120
   8010c:	00801d40 	call	801d4 <__mulsi3>
   80110:	1405883a 	add	r2,r2,r16
   80114:	1085883a 	add	r2,r2,r2
   80118:	1085883a 	add	r2,r2,r2
   8011c:	9885883a 	add	r2,r19,r2
//							alt_printf("%x ", curr_pixel_data);
							col++;
   80120:	84000044 	addi	r16,r16,1

					curr_pixel_data = *PIX_DATA_PTR;

					if(row < 640) {
						if(col < 480) {
							pixels[row][col] = curr_pixel_data;
   80124:	15000015 	stw	r20,0(r2)
//							alt_printf("%x ", curr_pixel_data);
							col++;
   80128:	d4200315 	stw	r16,-32756(gp)
   8012c:	00000806 	br	80150 <main+0xf4>
						} else {
							alt_printf("Row %x done\n", row);
   80130:	200b883a 	mov	r5,r4
   80134:	01000234 	movhi	r4,8
   80138:	21015104 	addi	r4,r4,1348
   8013c:	00803080 	call	80308 <alt_printf>
							col = 0;
							row++;
   80140:	d0a00517 	ldw	r2,-32748(gp)
							pixels[row][col] = curr_pixel_data;
//							alt_printf("%x ", curr_pixel_data);
							col++;
						} else {
							alt_printf("Row %x done\n", row);
							col = 0;
   80144:	d0200315 	stw	zero,-32756(gp)
							row++;
   80148:	10800044 	addi	r2,r2,1
   8014c:	d0a00515 	stw	r2,-32748(gp)
					} else {
						break;
					}
//					alt_printf("\n Pixel %x: %x", pixel_count, curr_pixel_data);

					 pixel_count++;
   80150:	d0a00217 	ldw	r2,-32760(gp)
   80154:	10800044 	addi	r2,r2,1
   80158:	d0a00215 	stw	r2,-32760(gp)
					*ACK_PTR = 0;
   8015c:	88000015 	stw	zero,0(r17)

					pixel_ready = *PIX_RDY_PTR;
   80160:	00840004 	movi	r2,4096
   80164:	10800017 	ldw	r2,0(r2)
		pixel_ready = *PIX_RDY_PTR;
//        alt_printf("\nStarted %x", pixel_ready);
		if (pixel_ready == 1) {
			alt_printf("\nEntered1");
			// turn LED
			while(pixel_ready != 2) {
   80168:	00c00084 	movi	r3,2
   8016c:	10ffd11e 	bne	r2,r3,800b4 <__alt_data_end+0xfffd8cb4>
   80170:	003fda06 	br	800dc <__alt_data_end+0xfffd8cdc>



	while (1) {
		// image transfer monitor
		pixel_ready = *PIX_RDY_PTR;
   80174:	0021883a 	mov	r16,zero
			}
			alt_printf("\nDone pixels.");

			for(unsigned int r = 0 ; r < 120; r++) {
				for(unsigned int c = 0; c < 120; c++) {
					alt_printf("%x ", pixels[r][c]);
   80178:	8c05883a 	add	r2,r17,r16
   8017c:	1485883a 	add	r2,r2,r18
   80180:	11400017 	ldw	r5,0(r2)
   80184:	01000234 	movhi	r4,8
   80188:	21015504 	addi	r4,r4,1364
   8018c:	84000104 	addi	r16,r16,4
   80190:	00803080 	call	80308 <alt_printf>

			}
			alt_printf("\nDone pixels.");

			for(unsigned int r = 0 ; r < 120; r++) {
				for(unsigned int c = 0; c < 120; c++) {
   80194:	84fff81e 	bne	r16,r19,80178 <__alt_data_end+0xfffd8d78>
					alt_printf("%x ", pixels[r][c]);
				}
				alt_printf("\n");
   80198:	01000234 	movhi	r4,8
   8019c:	21015604 	addi	r4,r4,1368
   801a0:	00803080 	call	80308 <alt_printf>
   801a4:	8c407804 	addi	r17,r17,480
				}

			}
			alt_printf("\nDone pixels.");

			for(unsigned int r = 0 ; r < 120; r++) {
   801a8:	00b84014 	movui	r2,57600
   801ac:	88bff11e 	bne	r17,r2,80174 <__alt_data_end+0xfffd8d74>

        // touch screen monitor



}
   801b0:	0005883a 	mov	r2,zero
   801b4:	dfc00517 	ldw	ra,20(sp)
   801b8:	dd000417 	ldw	r20,16(sp)
   801bc:	dcc00317 	ldw	r19,12(sp)
   801c0:	dc800217 	ldw	r18,8(sp)
   801c4:	dc400117 	ldw	r17,4(sp)
   801c8:	dc000017 	ldw	r16,0(sp)
   801cc:	dec00604 	addi	sp,sp,24
   801d0:	f800283a 	ret

000801d4 <__mulsi3>:
   801d4:	0005883a 	mov	r2,zero
   801d8:	20000726 	beq	r4,zero,801f8 <__mulsi3+0x24>
   801dc:	20c0004c 	andi	r3,r4,1
   801e0:	2008d07a 	srli	r4,r4,1
   801e4:	18000126 	beq	r3,zero,801ec <__mulsi3+0x18>
   801e8:	1145883a 	add	r2,r2,r5
   801ec:	294b883a 	add	r5,r5,r5
   801f0:	203ffa1e 	bne	r4,zero,801dc <__alt_data_end+0xfffd8ddc>
   801f4:	f800283a 	ret
   801f8:	f800283a 	ret

000801fc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   801fc:	deffff04 	addi	sp,sp,-4
   80200:	01000234 	movhi	r4,8
   80204:	01400234 	movhi	r5,8
   80208:	dfc00015 	stw	ra,0(sp)
   8020c:	21015704 	addi	r4,r4,1372
   80210:	29415804 	addi	r5,r5,1376

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   80214:	2140061e 	bne	r4,r5,80230 <alt_load+0x34>
   80218:	01000234 	movhi	r4,8
   8021c:	01400234 	movhi	r5,8
   80220:	21000804 	addi	r4,r4,32
   80224:	29400804 	addi	r5,r5,32
   80228:	2140121e 	bne	r4,r5,80274 <alt_load+0x78>
   8022c:	00000b06 	br	8025c <alt_load+0x60>
   80230:	00c00234 	movhi	r3,8
   80234:	18c15804 	addi	r3,r3,1376
   80238:	1907c83a 	sub	r3,r3,r4
   8023c:	0005883a 	mov	r2,zero
  {
    while( to != end )
   80240:	10fff526 	beq	r2,r3,80218 <__alt_data_end+0xfffd8e18>
    {
      *to++ = *from++;
   80244:	114f883a 	add	r7,r2,r5
   80248:	39c00017 	ldw	r7,0(r7)
   8024c:	110d883a 	add	r6,r2,r4
   80250:	10800104 	addi	r2,r2,4
   80254:	31c00015 	stw	r7,0(r6)
   80258:	003ff906 	br	80240 <__alt_data_end+0xfffd8e40>
   8025c:	01000234 	movhi	r4,8
   80260:	01400234 	movhi	r5,8
   80264:	21014a04 	addi	r4,r4,1320
   80268:	29414a04 	addi	r5,r5,1320

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   8026c:	2140101e 	bne	r4,r5,802b0 <alt_load+0xb4>
   80270:	00000b06 	br	802a0 <alt_load+0xa4>
   80274:	00c00234 	movhi	r3,8
   80278:	18c00804 	addi	r3,r3,32
   8027c:	1907c83a 	sub	r3,r3,r4
   80280:	0005883a 	mov	r2,zero
  {
    while( to != end )
   80284:	10fff526 	beq	r2,r3,8025c <__alt_data_end+0xfffd8e5c>
    {
      *to++ = *from++;
   80288:	114f883a 	add	r7,r2,r5
   8028c:	39c00017 	ldw	r7,0(r7)
   80290:	110d883a 	add	r6,r2,r4
   80294:	10800104 	addi	r2,r2,4
   80298:	31c00015 	stw	r7,0(r6)
   8029c:	003ff906 	br	80284 <__alt_data_end+0xfffd8e84>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   802a0:	00805180 	call	80518 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   802a4:	dfc00017 	ldw	ra,0(sp)
   802a8:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   802ac:	008051c1 	jmpi	8051c <alt_icache_flush_all>
   802b0:	00c00234 	movhi	r3,8
   802b4:	18c15704 	addi	r3,r3,1372
   802b8:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   802bc:	0005883a 	mov	r2,zero
  {
    while( to != end )
   802c0:	18bff726 	beq	r3,r2,802a0 <__alt_data_end+0xfffd8ea0>
    {
      *to++ = *from++;
   802c4:	114f883a 	add	r7,r2,r5
   802c8:	39c00017 	ldw	r7,0(r7)
   802cc:	110d883a 	add	r6,r2,r4
   802d0:	10800104 	addi	r2,r2,4
   802d4:	31c00015 	stw	r7,0(r6)
   802d8:	003ff906 	br	802c0 <__alt_data_end+0xfffd8ec0>

000802dc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   802dc:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   802e0:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   802e4:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   802e8:	00804c00 	call	804c0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   802ec:	00804e00 	call	804e0 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   802f0:	d1a00617 	ldw	r6,-32744(gp)
   802f4:	d1600717 	ldw	r5,-32740(gp)
   802f8:	d1200817 	ldw	r4,-32736(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   802fc:	dfc00017 	ldw	ra,0(sp)
   80300:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   80304:	008005c1 	jmpi	8005c <main>

00080308 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   80308:	defff204 	addi	sp,sp,-56
   8030c:	2005883a 	mov	r2,r4
   80310:	dfc00a15 	stw	ra,40(sp)
   80314:	df000915 	stw	fp,36(sp)
   80318:	ddc00815 	stw	r23,32(sp)
   8031c:	dd800715 	stw	r22,28(sp)
   80320:	dd400615 	stw	r21,24(sp)
   80324:	dd000515 	stw	r20,20(sp)
   80328:	dcc00415 	stw	r19,16(sp)
   8032c:	dc800315 	stw	r18,12(sp)
   80330:	dc400215 	stw	r17,8(sp)
   80334:	dc000115 	stw	r16,4(sp)
   80338:	d9400b15 	stw	r5,44(sp)
   8033c:	d9800c15 	stw	r6,48(sp)
   80340:	d9c00d15 	stw	r7,52(sp)
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   80344:	04000944 	movi	r16,37
 */
void 
alt_printf(const char* fmt, ... )
{
	va_list args;
	va_start(args, fmt);
   80348:	dd400b04 	addi	r21,sp,44
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
   8034c:	048018c4 	movi	r18,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
   80350:	04c01e04 	movi	r19,120
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   80354:	05001cc4 	movi	r20,115
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   80358:	11000007 	ldb	r4,0(r2)
   8035c:	20003a26 	beq	r4,zero,80448 <alt_printf+0x140>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   80360:	24000226 	beq	r4,r16,8036c <alt_printf+0x64>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   80364:	14400044 	addi	r17,r2,1
   80368:	00001406 	br	803bc <alt_printf+0xb4>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   8036c:	14400084 	addi	r17,r2,2
   80370:	10800047 	ldb	r2,1(r2)
   80374:	10003426 	beq	r2,zero,80448 <alt_printf+0x140>
            {
                if (c == '%')
   80378:	1400021e 	bne	r2,r16,80384 <alt_printf+0x7c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   8037c:	8009883a 	mov	r4,r16
   80380:	00000e06 	br	803bc <alt_printf+0xb4>
                } 
                else if (c == 'c')
   80384:	1480051e 	bne	r2,r18,8039c <alt_printf+0x94>
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
   80388:	a9000017 	ldw	r4,0(r21)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
   8038c:	ad800104 	addi	r22,r21,4
   80390:	b02b883a 	mov	r21,r22
                    alt_putchar(v);
   80394:	00804780 	call	80478 <alt_putchar>
   80398:	00002906 	br	80440 <alt_printf+0x138>
                }
                else if (c == 'x')
   8039c:	14c0201e 	bne	r2,r19,80420 <alt_printf+0x118>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   803a0:	adc00017 	ldw	r23,0(r21)
   803a4:	ad400104 	addi	r21,r21,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   803a8:	b8000326 	beq	r23,zero,803b8 <alt_printf+0xb0>
   803ac:	05800704 	movi	r22,28
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   803b0:	00c003c4 	movi	r3,15
   803b4:	00000306 	br	803c4 <alt_printf+0xbc>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
   803b8:	01000c04 	movi	r4,48
   803bc:	00804780 	call	80478 <alt_putchar>
                        continue;
   803c0:	00001f06 	br	80440 <alt_printf+0x138>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   803c4:	1d84983a 	sll	r2,r3,r22
   803c8:	15c4703a 	and	r2,r2,r23
   803cc:	1000021e 	bne	r2,zero,803d8 <alt_printf+0xd0>
                        digit_shift -= 4;
   803d0:	b5bfff04 	addi	r22,r22,-4
   803d4:	003ffb06 	br	803c4 <__alt_data_end+0xfffd8fc4>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   803d8:	070003c4 	movi	fp,15
                        if (digit <= 9)
   803dc:	00c00244 	movi	r3,9
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   803e0:	b0001716 	blt	r22,zero,80440 <alt_printf+0x138>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   803e4:	e588983a 	sll	r4,fp,r22
   803e8:	25c8703a 	and	r4,r4,r23
   803ec:	2588d83a 	srl	r4,r4,r22
                        if (digit <= 9)
   803f0:	19000236 	bltu	r3,r4,803fc <alt_printf+0xf4>
                            c = '0' + digit;
   803f4:	21000c04 	addi	r4,r4,48
   803f8:	00000106 	br	80400 <alt_printf+0xf8>
                        else
                            c = 'a' + digit - 10;
   803fc:	210015c4 	addi	r4,r4,87
                        alt_putchar(c);
   80400:	21003fcc 	andi	r4,r4,255
   80404:	2100201c 	xori	r4,r4,128
   80408:	213fe004 	addi	r4,r4,-128
   8040c:	d8c00015 	stw	r3,0(sp)
   80410:	00804780 	call	80478 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   80414:	b5bfff04 	addi	r22,r22,-4
   80418:	d8c00017 	ldw	r3,0(sp)
   8041c:	003ff006 	br	803e0 <__alt_data_end+0xfffd8fe0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   80420:	1500071e 	bne	r2,r20,80440 <alt_printf+0x138>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   80424:	ad800017 	ldw	r22,0(r21)
   80428:	ad400104 	addi	r21,r21,4

                    while(*s)
   8042c:	b1000007 	ldb	r4,0(r22)
   80430:	20000326 	beq	r4,zero,80440 <alt_printf+0x138>
                      alt_putchar(*s++);
   80434:	b5800044 	addi	r22,r22,1
   80438:	00804780 	call	80478 <alt_putchar>
   8043c:	003ffb06 	br	8042c <__alt_data_end+0xfffd902c>
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
   80440:	8805883a 	mov	r2,r17
   80444:	003fc406 	br	80358 <__alt_data_end+0xfffd8f58>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   80448:	dfc00a17 	ldw	ra,40(sp)
   8044c:	df000917 	ldw	fp,36(sp)
   80450:	ddc00817 	ldw	r23,32(sp)
   80454:	dd800717 	ldw	r22,28(sp)
   80458:	dd400617 	ldw	r21,24(sp)
   8045c:	dd000517 	ldw	r20,20(sp)
   80460:	dcc00417 	ldw	r19,16(sp)
   80464:	dc800317 	ldw	r18,12(sp)
   80468:	dc400217 	ldw	r17,8(sp)
   8046c:	dc000117 	ldw	r16,4(sp)
   80470:	dec00e04 	addi	sp,sp,56
   80474:	f800283a 	ret

00080478 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   80478:	defffd04 	addi	sp,sp,-12
   8047c:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
   80480:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   80484:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
   80488:	01000234 	movhi	r4,8
   8048c:	000f883a 	mov	r7,zero
   80490:	01800044 	movi	r6,1
   80494:	d80b883a 	mov	r5,sp
   80498:	21015704 	addi	r4,r4,1372
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   8049c:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
   804a0:	00804e40 	call	804e4 <altera_avalon_jtag_uart_write>
   804a4:	00ffffc4 	movi	r3,-1
   804a8:	10c00126 	beq	r2,r3,804b0 <alt_putchar+0x38>
        return -1;
    }
    return c;
   804ac:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
   804b0:	dfc00217 	ldw	ra,8(sp)
   804b4:	dc000117 	ldw	r16,4(sp)
   804b8:	dec00304 	addi	sp,sp,12
   804bc:	f800283a 	ret

000804c0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   804c0:	deffff04 	addi	sp,sp,-4
   804c4:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   804c8:	00805200 	call	80520 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   804cc:	00800044 	movi	r2,1
   804d0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   804d4:	dfc00017 	ldw	ra,0(sp)
   804d8:	dec00104 	addi	sp,sp,4
   804dc:	f800283a 	ret

000804e0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   804e0:	f800283a 	ret

000804e4 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   804e4:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   804e8:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   804ec:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   804f0:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   804f4:	2980072e 	bgeu	r5,r6,80514 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   804f8:	38c00037 	ldwio	r3,0(r7)
   804fc:	18ffffec 	andhi	r3,r3,65535
   80500:	183ffc26 	beq	r3,zero,804f4 <__alt_data_end+0xfffd90f4>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   80504:	28c00007 	ldb	r3,0(r5)
   80508:	20c00035 	stwio	r3,0(r4)
   8050c:	29400044 	addi	r5,r5,1
   80510:	003ff806 	br	804f4 <__alt_data_end+0xfffd90f4>

  return count;
}
   80514:	f800283a 	ret

00080518 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   80518:	f800283a 	ret

0008051c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   8051c:	f800283a 	ret

00080520 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   80520:	000170fa 	wrctl	ienable,zero
   80524:	f800283a 	ret
